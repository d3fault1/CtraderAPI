<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cAlgo.API</name>
    </assembly>
    <members>
        <member name="T:cAlgo.API.AccessRights">
            <summary>
            cBots and Indicators Access Rights.
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.None">
            <summary>
            Algorithm doesnâ€™t require any access rights.
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.FileSystem">
            <summary>
            Access to file system.
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.Internet">
            <summary>
            Access to Internet or other networks.
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.Registry">
            <summary>
            Access to windows registry.
            </summary>
        </member>
        <member name="F:cAlgo.API.AccessRights.FullAccess">
            <summary>
            The unlimited access rights.
            </summary>
        </member>
        <member name="T:cAlgo.API.Application">
             <summary>
             Represents the application.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use the API Application object nad display its properties data inside a chart control
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ApplicationSample : Indicator
                 {
                     private TextBlock _userTimeOffsetTextBlock, _themeTextBlock;
            
                     [Parameter("Horizontal Alignment", DefaultValue = HorizontalAlignment.Center)]
                     public HorizontalAlignment HorizontalAlignment { get; set; }
            
                     [Parameter("Vertical Alignment", DefaultValue = VerticalAlignment.Center)]
                     public VerticalAlignment VerticalAlignment { get; set; }
            
                     protected override void Initialize()
                     {
                         Application.ColorThemeChanged += Application_ColorThemeChanged;
                         Application.UserTimeOffsetChanged += Application_UserTimeOffsetChanged;
            
                         DrawApplicationInfo();
                     }
            
                     private void Application_UserTimeOffsetChanged(UserTimeOffsetChangedEventArgs obj)
                     {
                         _userTimeOffsetTextBlock.Text = obj.UserTimeOffset.ToString();
                     }
            
                     private void Application_ColorThemeChanged(ColorThemeChangeEventArgs obj)
                     {
                         _themeTextBlock.Text = obj.ColorTheme.ToString();
                     }
            
                     private void DrawApplicationInfo()
                     {
                         var grid = new Grid(3, 2)
                         {
                             BackgroundColor = Color.Goldenrod,
                             HorizontalAlignment = HorizontalAlignment,
                             VerticalAlignment = VerticalAlignment
                         };
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Version",
                             Margin = 5
                         }, 0, 0);
                         grid.AddChild(new TextBlock
                         {
                             Text = Application.Version.ToString(),
                             Margin = 5
                         }, 0, 1);
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Theme",
                             Margin = 5
                         }, 1, 0);
            
                         _themeTextBlock = new TextBlock
                         {
                             Text = Application.ColorTheme.ToString(),
                             Margin = 5
                         };
            
                         grid.AddChild(_themeTextBlock, 1, 1);
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "User Time Offset",
                             Margin = 5
                         }, 2, 0);
            
                         _userTimeOffsetTextBlock = new TextBlock
                         {
                             Text = Application.UserTimeOffset.ToString(),
                             Margin = 5
                         };
            
                         grid.AddChild(_userTimeOffsetTextBlock, 2, 1);
            
                         Chart.AddControl(grid);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Application.ColorTheme">
            <summary>
            Gets the color theme.
            </summary>
        </member>
        <member name="P:cAlgo.API.Application.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:cAlgo.API.Application.UserTimeOffset">
            <summary>
            Gets user time offset.
            </summary>
        </member>
        <member name="E:cAlgo.API.Application.ColorThemeChanged">
            <summary>
            Occurs when color theme has changed.
            </summary>
        </member>
        <member name="E:cAlgo.API.Application.UserTimeOffsetChanged">
            <summary>
            Occurs when user time offset has changed.
            </summary>
        </member>
        <member name="P:cAlgo.API.Asset.Name">
            <summary>
            </summary>
        </member>
        <member name="P:cAlgo.API.Asset.Digits">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.CloudAttribute">
             <summary>
             Represents the cloud between the indicator lines.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using System;
            
             namespace cAlgo
             {
                 // This indicator shows how to use cloud attribute
                 [Cloud("Top", "Bottom", Opacity = 0.2)]
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class BollingerBandsMTFCloudSample : Indicator
                 {
                     private BollingerBands _bollingerBands;
            
                     private Bars _baseBars;
            
                     [Parameter("Base TimeFrame", DefaultValue = "Daily")]
                     public TimeFrame BaseTimeFrame { get; set; }
            
                     [Parameter("Source", DefaultValue = DataSeriesType.Close)]
                     public DataSeriesType DataSeriesType { get; set; }
            
                     [Parameter("Periods", DefaultValue = 14, MinValue = 0)]
                     public int Periods { get; set; }
            
                     [Parameter("Standard Deviation", DefaultValue = 2, MinValue = 0)]
                     public double StandardDeviation { get; set; }
            
                     [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
                     public MovingAverageType MaType { get; set; }
            
                     [Output("Main", LineColor = "Yellow", PlotType = PlotType.Line, Thickness = 1)]
                     public IndicatorDataSeries Main { get; set; }
            
                     [Output("Top", LineColor = "Red", PlotType = PlotType.Line, Thickness = 1)]
                     public IndicatorDataSeries Top { get; set; }
            
                     [Output("Bottom", LineColor = "Red", PlotType = PlotType.Line, Thickness = 1)]
                     public IndicatorDataSeries Bottom { get; set; }
            
                     protected override void Initialize()
                     {
                         _baseBars = MarketData.GetBars(BaseTimeFrame);
            
                         var baseSeries = GetBaseSeries();
            
                         _bollingerBands = Indicators.BollingerBands(baseSeries, Periods, StandardDeviation, MaType);
                     }
            
                     public override void Calculate(int index)
                     {
                         var baseIndex = _baseBars.OpenTimes.GetIndexByTime(Bars.OpenTimes[index]);
            
                         Main[index] = _bollingerBands.Main[baseIndex];
                         Top[index] = _bollingerBands.Top[baseIndex];
                         Bottom[index] = _bollingerBands.Bottom[baseIndex];
                     }
            
                     private DataSeries GetBaseSeries()
                     {
                         switch (DataSeriesType)
                         {
                             case DataSeriesType.Open:
                                 return _baseBars.OpenPrices;
            
                             case DataSeriesType.High:
                                 return _baseBars.HighPrices;
            
                             case DataSeriesType.Low:
                                 return _baseBars.LowPrices;
            
                             case DataSeriesType.Close:
                                 return _baseBars.ClosePrices;
                             default:
            
                                 throw new ArgumentOutOfRangeException("DataSeriesType");
                         }
                     }
                 }
            
                 public enum DataSeriesType
                 {
                     Open,
                     High,
                     Low,
                     Close
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.CloudAttribute.#ctor(System.String,System.String)">
            <summary>
            The cloud between the indicator lines.
            </summary>
            <param name="firstLineName"></param>
            <param name="secondLineName"></param>
        </member>
        <member name="P:cAlgo.API.CloudAttribute.FirstLineName">
            <summary>
            The name of the first indicator line.
            </summary>
        </member>
        <member name="P:cAlgo.API.CloudAttribute.SecondLineName">
            <summary>
            The name of the second indicator line.
            </summary>
        </member>
        <member name="P:cAlgo.API.CloudAttribute.Opacity">
            <summary>
            The cloud opacity. Value can be set from 0 (transparent) to 1 (opaque). Values higher than 1 will be set to 1, values below 0 will be set to 0. Opacity is multiplied by the alpha channel of the active color (first or second color). Default opacity value is 0.2.
            </summary>
        </member>
        <member name="P:cAlgo.API.CloudAttribute.FirstColor">
            <summary>
            Cloud color when the first line is above the second one. If not specified, the color of the first line is used.
            </summary>
        </member>
        <member name="P:cAlgo.API.CloudAttribute.SecondColor">
            <summary>
            Cloud color when the second line is above the first one. If not specified, color of the second line is used.
            </summary>
        </member>
        <member name="T:cAlgo.API.IndicatorAttribute">
            <summary>
            Indicator Attribute. Applies metadata to enable the indicator plot.
            </summary>
            <remarks>
            To make it effective apply enclosed in square brackets, e.g. [Indicator] before the indicator class declaration. Cannot be ommited.
            </remarks>
            <example>
            <code>
             namespace cAlgo.Indicators
            {
                [Indicator()]
                public class SampleIndicator : Indicator
                {
                    &#47;&#47;&#46;&#46;&#46;
                }
            }
            </code>
            </example>
            <example>
            <code>
            [Indicator("Custom Indicator" )]
            public class SampleIndicator : Indicator
            </code>
            </example>
            <example>
            <code>
            [Indicator("IndicatorName", ScalePrecision = 5, IsOverlay = false, TimeZone = TimeZones.UTC)] 
            public class SampleIndicator : Indicator
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.IndicatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IndicatorAttribute and sets the name of the indicator.
            </summary>
            <remarks>
            To make it effective apply enclosed in square brackets, e.g. [Indicator("IndicatorName")] before the indicator class declaration.
            The name is displayed on the top left of the indicator panel.
            </remarks>
            <param name="name">The name of an indicator.</param>
            <example>
            <code>
            [Indicator("IndicatorName")] 
            public class SampleIndicator : Indicator
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.IndicatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the IndicatorAttribute
            </summary>
            <remarks>
            To make it effective apply enclosed in square brackets, e.g. [Indicator] before the indicator class declaration.
            The name is displayed on the top left of the indicator panel.
            </remarks>
            <example>
            <code>
            
            namespace cAlgo.Indicators
            {
                [Indicator()]
                public class SampleIndicator : Indicator
                {
                    &#47;&#47;&#46;&#46;&#46;
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.Name">
            <summary>
            The name of the Indicator.
            </summary>
            <remarks>
            The name is displayed to the left of the indicator panel.
            </remarks>
            <example>
            <code>
            
            namespace cAlgo.Indicators
            {
                [Indicator("IndicatorName")] 
                public class SampleIndicator : Indicator
                {
                    &#47;&#47;&#46;&#46;&#46;
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.ScalePrecision">
            <summary>
            The price scale precision.
            </summary>
            <remarks>
            The number of decimals displayed on the price scale of the indicator panel
            </remarks>
            <example>
            <code>
            
            namespace cAlgo.Indicators
            {
                [Indicator(ScalePrecision = 5)] // The scale precision is 5 decimals.
                public class SampleIndicator : Indicator
                {
                    &#47;&#47;&#46;&#46;&#46;
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.IsOverlay">
            <summary>
            Indicates whether this instance is overlayed on the chart or plotted on a separate indicator panel
            </summary>
            <value>
            The IsOverlay property sets the value true if this Indicator should be plotted on the chart panel; false if the indicator should be plotted on a separate Indicator Panel
            </value>
            <example>
            <code>
            
                [Indicator(IsOverlay = true)] // Plots the Indicator on the chart
                public class SampleIndicator : Indicator
            
            </code>
            </example>
            <example>
            <code>
            
                [Indicator(IsOverlay = false)] // Plots the Indicator on a separate indicator panel.
                public class SampleIndicator : Indicator
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.AutoRescale">
            <summary>
            Indicates whether this instance automatically rescales the chart or not.
            </summary>
            <example>
            <code>
            
                [Indicator(AutoRescale = false)]
                public class SampleIndicator : Indicator
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.TimeZone">
            <summary>
            Gets or sets the chart timezone of the displayed indicator.
            </summary>
            <example>
            <code>
            [Indicator(TimeZone = TimeZones.UTC)]
            public class SampleIndicator : Indicator
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.IndicatorAttribute.AccessRights">
            <summary>
            Gets or sets the access rights required for Indicator.
            </summary>
        </member>
        <member name="T:cAlgo.API.LevelsAttribute">
             <summary>
             Levels Attribute. Applies metadata to enable the plot of level lines.
             </summary>
             <remarks>
             Represents level lines. It is commonly used in Oscillators, for instance to add a zero line. Must be added before the indicator class declaration.
             </remarks>
             <example>
             <code>
             namespace cAlgo.Indicators
             {
                 [Levels(0, 50, 100)]
                 [Indicator()]
                 public class NewIndicator : Indicator
                 //...
             </code>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use the LevelsAttribute to set levels on your indicator outputs
                 [Levels(30, 70)]
                 [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class LevelsSample : Indicator
                 {
                     private RelativeStrengthIndex _rsi;
            
                     [Parameter(DefaultValue = 0.0)]
                     public double Parameter { get; set; }
            
                     [Output("Main")]
                     public IndicatorDataSeries Result { get; set; }
            
                     protected override void Initialize()
                     {
                         _rsi = Indicators.RelativeStrengthIndex(Bars.ClosePrices, 20);
                     }
            
                     public override void Calculate(int index)
                     {
                         Result[index] = _rsi.Result[index];
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.LevelsAttribute.#ctor(System.Double[])">
            <summary>
            Initializes a new LevelsAttribute instance
            </summary>
            <remarks>
            Draws level (horizontal) lines at a fixed position when the plot is on the indicator panel below the chart. To make it effective apply enclosed in square brackets, e.g. [Levels(0)], before the Indicator atribute declaration.
            </remarks>
            <param name="levels">The price values that the level lines are representing</param>
            <example>
            <code>
            namespace cAlgo.Indicators
            {
                // A zero line will be drawn
                [Levels(0)]
                [Indicator]
                public class NewIndicator : Indicator
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.LevelsAttribute.Levels">
            <summary>
            The array of price values that are ploted as level lines
            </summary>
            <example>
            <code>
            namespace cAlgo.Indicators
            {
                // two level lines will be drawn at prices 20.0 and 80.5
                [Levels(20.0, 80.5)]
                [Indicator]
                public class NewIndicator : Indicator
                //...
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.OutputAttribute">
             <summary>
             Sealed Class OutputAttribute
             </summary>
             <remarks>
             Marks a IndicatorDataSeries property as output to be displayed on the chart or panel below.
             To make it effective please apply this attribute in front of the declaration of the IndicatorDataSeries to be displayed.
             </remarks>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use indicators OuputAttribute
                 [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class OutputAttributeSample : Indicator
                 {
                     [Output("Open", LineColor = "Red", IsHistogram = false, LineStyle = LineStyle.Dots, PlotType = PlotType.Line, Thickness = 2)]
                     public IndicatorDataSeries OpenOutput { get; set; }
            
                     [Output("High", LineColor = "Blue", IsHistogram = false, LineStyle = LineStyle.Solid, PlotType = PlotType.Line, Thickness = 2)]
                     public IndicatorDataSeries HighOutput { get; set; }
            
                     [Output("Low", LineColor = "Yellow", IsHistogram = false, LineStyle = LineStyle.Lines, PlotType = PlotType.Line, Thickness = 2)]
                     public IndicatorDataSeries LowOutput { get; set; }
            
                     [Output("Close", LineColor = "Green", IsHistogram = false, LineStyle = LineStyle.DotsRare, PlotType = PlotType.Line, Thickness = 2)]
                     public IndicatorDataSeries CloseOutput { get; set; }
            
                     protected override void Initialize()
                     {
                     }
            
                     public override void Calculate(int index)
                     {
                         OpenOutput[index] = Bars.OpenPrices[index];
                         HighOutput[index] = Bars.HighPrices[index];
                         LowOutput[index] = Bars.LowPrices[index];
                         CloseOutput[index] = Bars.ClosePrices[index];
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.OutputAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the OutputAttribute and sets the name.
             </summary>
             <param name="lineName">The name given to the output plot</param>
             <remarks>
             The members have the following default values:
                 PlotType = PlotType.Line;
                 LineStyle = LineStyle.Solid;
                 Thickness = 1f;
                 LineColor = "Green";
                 Name = lineName;
             </remarks>
             <example>
             <code>
             // Simple plot that uses the default solid line plot in green color
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             </code>
             </example>
             <example>
             <code>
            
             //Plot a simple moving average with a set of lines (dashes)
             [Output("Simple Moving Average", LineStyle = LineStyle.Lines)]
             public IndicatorDataSeries SMA { get; set; }
            
             </code>
             </example>
             <example>
             <code>
            
             &#47;&#47;&#46;&#46;&#46;
            
             //Plot a Histogram.
             [Output("Commodity Channel Index", PlotType = PlotType.Histogram)]
             public IndicatorDataSeries Result { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.LineStyle">
             <summary>
             Gets or sets the Line Style for given Output property. By default it is set to Solid
             </summary>
             <remarks>
             If PlotType = PlotType.Line (default) the LineStyle can be added.
             Supported line styles are:
                 Dots
                 DotsRare
                 DotsVeryRare
                 Lines
                 LinesDots
                 Solid
             </remarks>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             //Simple moving average will be now plotted as Lines.
             [Output("Simple Moving Average", LineStyle = LineStyle.Lines)]
             public IndicatorDataSeries SMA { get; set; }
            
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.Name">
             <summary>
             The plot name
             </summary>
             <remarks>
             Displayed in the User Interface when adding an new instance of the Indicator.
             </remarks>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             //The plotted indicator name is Simple Moving Average.
             [Output("Simple Moving Average")]
             public IndicatorDataSeries SMA { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.Color">
             <summary>
             Gets or sets the Color of the Output property. This Color will be used when the line for this Output is plotted.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             //The result is plotted in Turquoise.
             [Output("Simple Moving Average", Color = Colors.Turquoise)]
             public IndicatorDataSeries SMA { get; set; }
            
             public override void Calculate(int index)
             {
                &#47;&#47;&#46;&#46;&#46;
             }
            
            
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.LineColor">
             <summary>
             Gets or sets the Color of the Output property. This Color will be used when the line for this Output is plotted.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             //The result is plotted in Turquoise.
             [Output("Main", LineColor = "#008000")]
             public IndicatorDataSeries SMA { get; set; }
            
             public override void Calculate(int index)
             {
                &#47;&#47;&#46;&#46;&#46;
             }
            
            
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.Thickness">
             <summary>
             Sets the Width of the Output property.
             </summary>
             <remarks>
             This Width will be used when the line for this Output is plotted.
             </remarks>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             //The result is plotted as a line with thickness level five
             [Output("Simple Moving Average", Thickness = 5)]
             public IndicatorDataSeries SMA { get; set; }
            
             public override void Calculate(int index)
             {
                 &#47;&#47;&#46;&#46;&#46;
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.IsHistogram">
            <summary>
            Plots a Histogram.
            </summary>
            <example>
            <code>
            [Output("Main", IsHistogram = true)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.OutputAttribute.PlotType">
             <summary>
             Plot type.
             </summary>
             <remarks>
             The type of the output plotted on the output panel. Default = Line
             Supported types are:
                 Line
                 Points
                 Histogram
             </remarks>
             <example>
             <code>
            
             &#47;&#47;&#46;&#46;&#46;
            
             //The result is plotted as a Histogram.
             [Output("Commodity Channel Index", PlotType = PlotType.Histogram)]
             public IndicatorDataSeries SMA { get; set; }
            
             public override void Calculate(int index)
             {
                 &#47;&#47;&#46;&#46;&#46;
             }
            
             </code>
             </example>
             <example>
             <code>
            
             &#47;&#47;&#46;&#46;&#46;
            
             //Plot the result as a set of yellow points.
             [Output("Main", LineColor = "Yellow", PlotType = PlotType.Points)]
             public IndicatorDataSeries Result { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.ParameterAttribute">
             <summary>
             The Parameter Attribute class.
             </summary>
             <remarks>
             Marks a property as input parameter.
             </remarks>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to define different types of parameters for your indicators
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ParameterAttributreSample : Indicator
                 {
                     [Parameter("First Parameter Name", DefaultValue = 0.0, MinValue = 0, MaxValue = 10, Step = 1, Group = "Numeric Group")]
                     public double FirstNumericParameter { get; set; }
            
                     [Parameter("Second Parameter Name", DefaultValue = 0.0, MinValue = 0, MaxValue = 100, Step = 1, Group = "Numeric Group")]
                     public int SecondNumericParameter { get; set; }
            
                     [Parameter("First Parameter Name", DefaultValue = "Default value", Group = "String Group")]
                     public string FirstStringParameter { get; set; }
            
                     [Parameter("Second Parameter Name", DefaultValue = "Default value", Group = "String Group")]
                     public string SecondStringParameter { get; set; }
            
                     [Parameter("First Parameter Name", DefaultValue = TradeType.Buy, Group = "Enum Group")]
                     public TradeType FirstEnumParameter { get; set; }
            
                     [Parameter("Second Parameter Name", DefaultValue = TradeType.Sell, Group = "Enum Group")]
                     public TradeType SecondEnumParameter { get; set; }
            
                     protected override void Initialize()
                     {
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.ParameterAttribute.#ctor(System.String)">
             <summary>
             Initializes a new ParameterAttribute instance and sets the name.
             </summary>
             <remarks>
             Represents an input parameter to the program.
             To make it effective type in enclosed in square brackets, e.g. [Parameter], before the property declaration. Parameters are listed in the instance button of the robot/indicator.
             </remarks>
             <param name="name">The name of the parameter.</param>
             <example>
             <code>
            
             &#47;&#47;&#46;&#46;&#46;
             // parameter attribute
             [Parameter("Parameter Name")]
             public int ParameterName { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
             </code>
             </example>
             <example>
             <code>
            
             &#47;&#47;&#46;&#46;&#46;
            
             // parameter attribute
             [Parameter("ParameterName", DefaultValue = 14, MinValue = 2, MaxValue = 30)]
             public int ParameterName { get; set; } //  property declaration
            
             &#47;&#47;&#46;&#46;&#46;
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.ParameterAttribute.#ctor">
             <summary>
             Initializes a new instance of the ParameterAttribute class.
             </summary>
             <remarks>
             In this case the parameter name is the same as the property name.
             </remarks>
             <example>
             <code>
            
             &#47;&#47;&#46;&#46;&#46;
            
             // The Parameter name is MaPeriod
             [Parameter]
             public int MaPeriod { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.Name">
             <summary>
             The input parameter name.
             </summary>
             It is included in the input settings when a new instance is added.
             If omitted then the property name is assumed.
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             //The input parameter name is MaPeriod
             [Parameter("MaPeriod")]
             public int Period { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.DefaultValue">
             <summary>
             Gets or sets the default value of this Parameter property.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             //The value for Periods is fourteen
             [Parameter(DefaultValue = 14)]
             public int Periods { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.MinValue">
             <summary>
             Gets or sets the minimum value of this Parameter property. It is used for validating user input.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             //The minimum value the user can set Periods is five.
             [Parameter(DefaultValue = 14, MinValue = 5)]
             public int Periods { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.MaxValue">
             <summary>
             Gets or sets the maximum value of this Parameter property. It is used for validating user input.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             //The maximum value the user can set Periods is twenty
             [Parameter(DefaultValue = 14, MaxValue = 20)]
             public int Periods { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.Step">
            <summary>
            Gets or sets the step of this Parameter. Step is used in NumericUpDown controls in parameter editors.
            </summary>
        </member>
        <member name="P:cAlgo.API.ParameterAttribute.Group">
            <summary>
            Groups parameters in UI.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.RobotAttribute">
             <summary>
             Sealed class RobotAttribute.
             </summary>
             <remarks>
             Marks a class as a Robot. The Robot attribute cannot be ommited.
             </remarks>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo.Robots
             {
                 // This sample robot shows how to use the Robot attribute and its properties
                 // Every cBot (Robot) must be annotated with this attribute
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class RobotAttributeSample : Robot
                 {
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.RobotAttribute.#ctor(System.String)">
             <summary>
             Initializes a new RobotAttribute instance and sets the name.
             </summary>
             <remarks>
             Marks a class as a Robot. The Robot attribute cannot be ommited. To make it effective, apply enclosed in square brackets. Example: [Robot("Name")], before the Robot class declaration.
             </remarks>
             <param name="name">The name of the Robot</param>
             <example>
             <code>
            
             &#47;&#47;&#46;&#46;&#46;
            
             [Robot("myRobot")]    //  myRobot is the name of the Robot
             public class myRobot : Robot
             {
                 &#47;&#47;&#46;&#46;&#46;
             }
            
             &#47;&#47;&#46;&#46;&#46;
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.RobotAttribute.#ctor">
             <summary>
             Initializes a new RobotAttribute instance.
             </summary>
             <remarks>
             To make it effective apply enclosed in square brackets,
             e.g. [Robot], in front of the robot class declaration.
             </remarks>
             <example>
             <code>
            
             [Robot] // RobotAttribute
             public class NewRobot : Robot
             {
                 &#47;&#47;&#46;&#46;&#46;
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.RobotAttribute.Name">
             <summary>
             The name of a robot. Sets from constructor.
             </summary>
             <example>
             <code>
            
             [Robot("newRobot")]    //  newRobot is the name of the Robot
             public class myRobot : Robot
             {
                 &#47;&#47;&#46;&#46;&#46;
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.RobotAttribute.TimeZone">
            <summary>
            Sets the timezone for all the robot or indicator datetime references
            </summary>
            <remarks>
            All dates and times within the robot or indicator will be converted to this timezone
            </remarks>
            <example>
            <code>
            [Robot(TimeZone = TimeZones.EasternStandardTime)]
            public class NewsRobot : Robot
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.RobotAttribute.AccessRights">
            <summary>
            Gets or sets the access rights required for the cBot.
            </summary>
        </member>
        <member name="T:cAlgo.API.TimeZones">
             <summary>
             Standard TimeZones class.
             </summary>
             <remarks>
             Sets the timezone for all the robot or indicator datetime references.
             </remarks>
             <example>
             <code>
             [Robot(TimeZone = TimeZones.EasternStandardTime)]
             public class NewsRobot : Robot
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using System;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to work with time zones
                 // Every new cBot/Indicator default time zone is set to UTC via Indicator/Robot attributes TimeZone property
                 // To change it you can set the attribute time zone property value to any of supported time zones
                 // For example:
                 // [Indicator(IsOverlay = true, TimeZone = TimeZones.EasternStandardTime, AccessRights = AccessRights.None)]
                 // You can also work with different time zones programmatically by using .NET libraries\
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TimeZoneSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         // You can get user platform time zone offset like this
                         var platformUserSelectedTimeZoneOffset = Application.UserTimeOffset;
            
                         var estTime = GetEasternStandardTime();
            
                         Print(estTime.ToString("o"));
                     }
            
                     public override void Calculate(int index)
                     {
                     }
            
                     private DateTime GetEasternStandardTime()
                     {
                         var easternTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
            
                         return TimeZoneInfo.ConvertTimeFromUtc(Server.TimeInUtc, easternTimeZone);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.TimeZones.DatelineStandardTime">
            <summary>
            (GMT-12:00) International Date Line West
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.SamoaStandardTime">
            <summary>
            (GMT-11:00) Midway Island, Samoa
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.HawaiianStandardTime">
            <summary>
            (GMT-10:00) Hawaii
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.AlaskanStandardTime">
            <summary>
            (GMT-09:00) Alaska
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.PacificStandardTime">
            <summary>
            (GMT-08:00) Pacific Time (US and Canada); Tijuana
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.MountainStandardTime">
            <summary>
            (GMT-07:00) Mountain Time (US and Canada)
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralStandardTime">
            <summary>
            (GMT-06:00) Central Time (US and Canada
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CanadaCentralStandardTime">
            <summary>
            (GMT-06:00) Saskatchewan
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralAmericaStandardTime">
            <summary>
            (GMT-06:00) Central America
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EasternStandardTime">
            <summary>
            (GMT-05:00) Eastern Time (US and Canada)
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.AtlanticStandardTime">
            <summary>
            (GMT-04:00) Atlantic Time (Canada)
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ESouthAmericaStandardTime">
            <summary>
            (GMT-03:00) Brasilia
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.GreenlandStandardTime">
            <summary>
            (GMT-03:00) Greenland
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.MidAtlanticStandardTime">
            <summary>
            (GMT-02:00) Mid-Atlantic
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.AzoresStandardTime">
            <summary>
            (GMT-01:00) Azores
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CapeVerdeStandardTime">
            <summary>
            (GMT-01:00) Cape Verde Islands
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.GMTStandardTime">
            <summary>
            (GMT) Greenwich Mean Time: Dublin, Edinburgh, Lisbon, London
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.GreenwichStandardTime">
            <summary>
            (GMT) Casablanca, Monrovia
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralEuropeStandardTime">
            <summary>
            (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralEuropeanStandardTime">
            <summary>
            (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.RomanceStandardTime">
            <summary>
            (GMT+01:00) Brussels, Copenhagen, Madrid, Paris
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WEuropeStandardTime">
            <summary>
            (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WCentralAfricaStandardTime">
            <summary>
            (GMT+01:00) West Central Africa
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EEuropeStandardTime">
            <summary>
            (GMT+02:00) Bucharest
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EgyptStandardTime">
            <summary>
            (GMT+02:00) Cairo
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.FLEStandardTime">
            <summary>
            (GMT+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.GTBStandardTime">
            <summary>
            (GMT+02:00) Athens, Istanbul, Minsk
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.IsraelStandardTime">
            <summary>
            (GMT+02:00) Jerusalem
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.SouthAfricaStandardTime">
            <summary>
            (GMT+02:00) Harare, Pretoria
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.RussianStandardTime">
            <summary>
            (GMT+03:00) Moscow, St. Petersburg, Volgograd
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ArabStandardTime">
            <summary>
            (GMT+03:00) Kuwait, Riyadh
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EAfricaStandardTime">
            <summary>
            (GMT+03:00) Nairobi
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ArabicStandardTime">
            <summary>
            (GMT+03:00) Baghdad
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.IranStandardTime">
            <summary>
            (GMT+03:30) Tehran
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ArabianStandardTime">
            <summary>
            (GMT+04:00) Abu Dhabi, Muscat
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CaucasusStandardTime">
            <summary>
            (GMT+04:00) Baku, Tbilisi, Yerevan
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EkaterinburgStandardTime">
            <summary>
            (GMT+05:00) Ekaterinburg
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WestAsiaStandardTime">
            <summary>
            (GMT+05:00) Islamabad, Karachi, Tashkent
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.IndiaStandardTime">
            <summary>
            (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NepalStandardTime">
            <summary>
            (GMT+05:45) Kathmandu
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralAsiaStandardTime">
            <summary>
            (GMT+06:00) Astana, Dhaka
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.SriLankaStandardTime">
            <summary>
            (GMT+06:00) Sri Jayawardenepura
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NCentralAsiaStandardTime">
            <summary>
            (GMT+06:00) Almaty, Novosibirsk
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.MyanmarStandardTime">
            <summary>
            (GMT+06:30) Yangon Rangoon
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NorthAsiaStandardTime">
            <summary>
            (GMT+07:00) Krasnoyarsk
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.ChinaStandardTime">
            <summary>
            (GMT+08:00) Beijing, Chongqing, Hong Kong SAR, Urumqi
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.SingaporeStandardTime">
            <summary>
            (GMT+08:00) Kuala Lumpur, Singapore
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.TaipeiStandardTime">
            <summary>
            (GMT+08:00) Taipei
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WAustraliaStandardTime">
            <summary>
            (GMT+08:00) Perth
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NorthAsiaEastStandardTime">
            <summary>
            (GMT+08:00) Irkutsk, Ulaanbaatar
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.KoreaStandardTime">
            <summary>
            (GMT+09:00) Seoul
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.TokyoStandardTime">
            <summary>
            (GMT+09:00) Osaka, Sapporo, Tokyo
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.YakutskStandardTime">
            <summary>
            (GMT+09:00) Yakutsk
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CenAustraliaStandardTime">
            <summary>
            (GMT+09:30) Adelaide
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.EAustraliaStandardTime">
            <summary>
            (GMT+10:00) Brisbane
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.TasmaniaStandardTime">
            <summary>
            (GMT+10:00) Hobart
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.VladivostokStandardTime">
            <summary>
            (GMT+10:00) Vladivostok
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.WestPacificStandardTime">
            <summary>
            (GMT+10:00) Guam, Port Moresby
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.CentralPacificStandardTime">
            <summary>
            (GMT+11:00) Magadan, Solomon Islands, New Caledonia
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.NewZealandStandardTime">
            <summary>
            (GMT+12:00) Auckland, Wellington
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.TongaStandardTime">
            <summary>
            (GMT+13:00) Nuku'alofa
            </summary>
        </member>
        <member name="F:cAlgo.API.TimeZones.UTC">
            <summary>
            Coordinated Universal Time
            </summary>
        </member>
        <member name="T:cAlgo.API.Chart">
             <summary>
                 Represents the Chart Interface.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator display's the chart data by using the current Chart object
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartSample : Indicator
                 {
                     private Grid _grid;
            
                     private TextBlock _mouseLocationTextBlock;
            
                     private TextBlock _mouseWheelDeltaTextBlock;
            
                     private TextBlock _objectsNumberTextBlock;
            
                     protected override void Initialize()
                     {
                         Chart.ChartTypeChanged += args => CreateAndAddGridToChart();
                         Chart.ColorsChanged += args => CreateAndAddGridToChart();
                         Chart.DisplaySettingsChanged += args => CreateAndAddGridToChart();
                         Chart.Drag += args => CreateAndAddGridToChart();
                         Chart.DragEnd += args => CreateAndAddGridToChart();
                         Chart.DragStart += args => CreateAndAddGridToChart();
                         Chart.IndicatorAreaAdded += args => CreateAndAddGridToChart();
                         Chart.IndicatorAreaRemoved += args => CreateAndAddGridToChart();
                         Chart.MouseMove += args =>
                         {
                             if (_mouseLocationTextBlock == null)
                                 return;
            
                             _mouseLocationTextBlock.Text = string.Format("({0}, {1})", args.MouseX, args.MouseY);
                         };
                         Chart.MouseLeave += args =>
                         {
                             if (_mouseLocationTextBlock == null)
                                 return;
            
                             _mouseLocationTextBlock.Text = "(Null, Null)";
                             _mouseWheelDeltaTextBlock.Text = "0";
                         };
                         Chart.MouseWheel += args =>
                         {
                             if (_mouseWheelDeltaTextBlock == null)
                                 return;
            
                             _mouseWheelDeltaTextBlock.Text = args.Delta.ToString();
                         };
                         Chart.ObjectsAdded += args => _objectsNumberTextBlock.Text = Chart.Objects.Count.ToString();
                         Chart.ObjectsRemoved += args => _objectsNumberTextBlock.Text = Chart.Objects.Count.ToString();
            
                         Chart.ZoomChanged += args => CreateAndAddGridToChart();
            
                         CreateAndAddGridToChart();
                     }
            
                     public override void Calculate(int index)
                     {
                     }
            
                     private void CreateAndAddGridToChart()
                     {
                         if (_grid != null)
                             Chart.RemoveControl(_grid);
            
                         _grid = new Grid(10, 2)
                         {
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6,
                             HorizontalAlignment = HorizontalAlignment.Left,
                             VerticalAlignment = VerticalAlignment.Bottom
                         };
            
                         var style = new Style();
            
                         style.Set(ControlProperty.Margin, 5);
                         style.Set(ControlProperty.FontWeight, FontWeight.ExtraBold);
                         style.Set(ControlProperty.ForegroundColor, Color.Red);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Height",
                             Style = style
                         }, 0, 0);
                         _grid.AddChild(new TextBlock
                         {
                             Text = Chart.Height.ToString(),
                             Style = style
                         }, 0, 1);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Width",
                             Style = style
                         }, 1, 0);
                         _grid.AddChild(new TextBlock
                         {
                             Text = Chart.Width.ToString(),
                             Style = style
                         }, 1, 1);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Zoom Level",
                             Style = style
                         }, 2, 0);
                         _grid.AddChild(new TextBlock
                         {
                             Text = Chart.ZoomLevel.ToString(),
                             Style = style
                         }, 2, 1);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Objects #",
                             Style = style
                         }, 3, 0);
            
                         _objectsNumberTextBlock = new TextBlock
                         {
                             Style = style,
                             Text = Chart.Objects.Count.ToString()
                         };
            
                         _grid.AddChild(_objectsNumberTextBlock, 3, 1);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Top Y",
                             Style = style
                         }, 4, 0);
                         _grid.AddChild(new TextBlock
                         {
                             Text = Chart.TopY.ToString(),
                             Style = style
                         }, 4, 1);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Bottom Y",
                             Style = style
                         }, 5, 0);
                         _grid.AddChild(new TextBlock
                         {
                             Text = Chart.BottomY.ToString(),
                             Style = style
                         }, 5, 1);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Type",
                             Style = style
                         }, 6, 0);
                         _grid.AddChild(new TextBlock
                         {
                             Text = Chart.ChartType.ToString(),
                             Style = style
                         }, 6, 1);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Mouse Location",
                             Style = style
                         }, 7, 0);
            
                         _mouseLocationTextBlock = new TextBlock
                         {
                             Style = style,
                             Text = "(Null, Null)"
                         };
            
                         _grid.AddChild(_mouseLocationTextBlock, 7, 1);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Indicator Areas #",
                             Style = style
                         }, 8, 0);
                         _grid.AddChild(new TextBlock
                         {
                             Text = Chart.IndicatorAreas.Count.ToString(),
                             Style = style
                         }, 8, 1);
            
                         _grid.AddChild(new TextBlock
                         {
                             Text = "Mouse Wheel Delta",
                             Style = style
                         }, 9, 0);
            
                         _mouseWheelDeltaTextBlock = new TextBlock
                         {
                             Style = style,
                             Text = "0"
                         };
            
                         _grid.AddChild(_mouseWheelDeltaTextBlock, 9, 1);
            
                         Chart.AddControl(_grid);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Chart.IndicatorAreas">
            <summary>
                Gets the read only list of the indicator areas.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.DisplaySettings">
            <summary>
                Gets the chart display settings.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.ColorSettings">
            <summary>
                Gets the chart color settings.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.ChartType">
            <summary>
                Gets or sets the type of the chart - Bar, Candlesticks, Line or Dots chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.Zoom">
            <summary>
                Gets or sets the zoom level from 0 to 5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.ZoomLevel">
            <summary>
                Gets or sets the zoom percent values. Valid values are from 5 to 500 with a step of 5, as can be seen on UI in the
                charts Zoom control.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.FirstVisibleBarIndex">
            <summary>
                Gets the index of the first visible bar on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.LastVisibleBarIndex">
            <summary>
                Gets the index of the last visible bar on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.MaxVisibleBars">
            <summary>
                Gets the maximum number of the visible bars on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.BarsTotal">
            <summary>
                Gets the total number of the bars on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.Bars">
            <summary>
                Gets the chart Bar objects.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.MarketSeries">
            <summary>
                Gets the the chart market data such as Open, High, Low, Close, Median, Typical, and WeightedClose price series, as
                well as OpenTime for the symbol, SymbolCode, TickVolume, and TimeFrame.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.TimeFrame">
            <summary>
                Gets the time frame of the chart from 1 minute to 1 month.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.Symbol">
            <summary>
                Gets the chart symbol.
            </summary>
        </member>
        <member name="P:cAlgo.API.Chart.SymbolName">
            <summary>
                Gets the symbol name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Chart.IsScrollingEnabled">
            <summary>
                Gets or sets the value indicating whether the scrolling is enabled or disabled for the chart. If disabled, then the
                chart is not affected by scrolling, dragging, scaling, or pressing any keyboard keys, but is still affected by
                resizing, zooming, and API calls for changing X or Y-axis positions on the chart.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.DisplaySettingsChanged">
            <summary>
                Occurs when one or several charts display settings change.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.ColorsChanged">
            <summary>
                Occurs when the chart color settings change.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.ChartTypeChanged">
            <summary>
                Occurs when the chart type changes.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.ZoomChanged">
            <summary>
                Occurs when the chart zoom options change.
            </summary>
        </member>
        <member name="M:cAlgo.API.Chart.ScrollXBy(System.Int32)">
            <summary>
                Scrolls the chart by the X-axis for the specified number of bars.
            </summary>
            <param name="bars"></param>
        </member>
        <member name="M:cAlgo.API.Chart.ScrollXTo(System.Int32)">
            <summary>
                Scrolls the chart by the X-axis to the bar with the specified index.
            </summary>
            <param name="barIndex">The index of the bar.</param>
        </member>
        <member name="M:cAlgo.API.Chart.ScrollXTo(System.DateTime)">
            <summary>
                Scrolls the chart by the X-axis to the specified date time.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:cAlgo.API.Chart.SetBarColor(System.Int64,cAlgo.API.Color)">
            <summary>
                Sets the color of the bar at the specified bar index. It will change the bar fill color and the outline color.
            </summary>
            <param name="barIndex"></param>
            <param name="color"></param>
        </member>
        <member name="M:cAlgo.API.Chart.SetBarFillColor(System.Int64,cAlgo.API.Color)">
            <summary>
                Sets the fill color of the bar at the specified bar index.
            </summary>
            <param name="barIndex"></param>
            <param name="color"></param>
        </member>
        <member name="M:cAlgo.API.Chart.SetBarOutlineColor(System.Int64,cAlgo.API.Color)">
            <summary>
                Sets the outline color of the bar at the specified bar index.
            </summary>
            <param name="barIndex"></param>
            <param name="color"></param>
        </member>
        <member name="M:cAlgo.API.Chart.SetTickVolumeColor(System.Int64,cAlgo.API.Color)">
            <summary>
                Sets the color of tick volume line at the specified bar index.
            </summary>
            <param name="barIndex"></param>
            <param name="color"></param>
        </member>
        <member name="M:cAlgo.API.Chart.ResetBarColor(System.Int64)">
            <summary>
                Resets the color of the bar to the default.
            </summary>
            <param name="barIndex"></param>
        </member>
        <member name="M:cAlgo.API.Chart.ResetBarColors">
            <summary>
                Resets the colors of all the bars.
            </summary>
        </member>
        <member name="M:cAlgo.API.Chart.ResetTickVolumeColor(System.Int64)">
            <summary>
                Resets the color of the tick volume line to the default at the specified bar index.
            </summary>
            <param name="barIndex"></param>
        </member>
        <member name="M:cAlgo.API.Chart.ResetTickVolumeColors">
            <summary>
                Resets the color of all the tick volume bars.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.IndicatorAreaAdded">
            <summary>
                Occurs when the indicator area is added.
            </summary>
        </member>
        <member name="E:cAlgo.API.Chart.IndicatorAreaRemoved">
            <summary>
                Occurs when the indicator area is removed.
            </summary>
        </member>
        <member name="M:cAlgo.API.Chart.TryChangeTimeFrame(cAlgo.API.TimeFrame)">
            <summary>
                Changes the time frame on the chart.
            </summary>
            <param name="timeFrame"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Chart.TryChangeTimeFrameAndSymbol(cAlgo.API.TimeFrame,System.String)">
            <summary>
                Changes the time frame and the symbol on the chart.
            </summary>
            <param name="timeFrame"></param>
            <param name="symbolName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.ChartArea">
            <summary>
            The Chart Area Interface.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.IsAlive">
            <summary>
            Checks whether the instance is still on the chart area.
            </summary>
        </member>
        <member name="M:cAlgo.API.ChartArea.AddControl(cAlgo.API.ControlBase)">
            <summary>
            Adds a chart control from the Control Base to the main chart area or to the indicator area.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:cAlgo.API.ChartArea.RemoveControl(cAlgo.API.ControlBase)">
            <summary>
            Remove a chart control from the chart area.
            </summary>
            <param name="control"></param>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseEnter">
            <summary>
            Occurs when the cursor hover over the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseLeave">
            <summary>
            Occurs when the cursor leaves the chart area
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseMove">
            <summary>
            Occurs when the cursor moves over the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseDown">
            <summary>
            Occurs when the left mouse button is pressed down.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseUp">
            <summary>
            Occurs when the left mouse button is released. 
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.MouseWheel">
            <summary>
            Occurs when the mouse wheel button is rotated.
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:cAlgo.API.ChartArea.DragStart">
            <summary>
            Occurs when MouseDown event is happening on a chart area and a mouse is captured for dragging. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:cAlgo.API.ChartArea.DragEnd">
            <summary>
            Occurs when mouse button is released while dragging a chart area or a chart area loses mouse capture. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:cAlgo.API.ChartArea.Drag">
            <summary>
            Occurs when dragging a chart area. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartArea.Width">
            <summary>
            Gets the width of the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.Height">
            <summary>
            Gets the hight of the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.BottomY">
            <summary>
            Gets the lowest visible Y-axis value.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.TopY">
            <summary>
            Gets the highest visible Y-axis value.
            </summary>
        </member>
        <member name="M:cAlgo.API.ChartArea.SetYRange(System.Double,System.Double)">
            <summary>
            Sets the Y-axis lowest and highest values range. Allows scrolling the chart by the Y-axis. If only one of the values is set, then the chart will be expanded regarding the lowest or highest value respectively.
            </summary>
            <param name="topY">The highest visible Y-axis value.</param>
            <param name="bottomY">The lowest visible Y-axis value.</param>
        </member>
        <member name="E:cAlgo.API.ChartArea.SizeChanged">
            <summary>
            Occurs when the chart area size has changed.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ScrollChanged">
            <summary>
            Occurs when the X-axis position value or the Y-axis position value changes while scrolling.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.Objects">
            <summary>
            Gets the chart objects collection.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartArea.SelectedObjects">
            <summary>
            Gets the list of currently selected objects if any.
            </summary>
        </member>
        <member name="M:cAlgo.API.ChartArea.FindAllObjects``1">
            <summary>
            Finds all the chart objects of the specified type. 
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T[].</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.FindAllObjects(cAlgo.API.ChartObjectType)">
            <summary>
            Finds all the chart objects of the specified type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>ChartObject[].</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.FindObject(System.String)">
            <summary>
            Finds the chart object of the specified name.
            </summary>
            <param name="objectName">The name of the object.</param>
            <returns>
            ChartObject.
            </returns>
            <example>
              <code>
             // Draw a horizontal line.
             Chart.DrawHorizontalLine("hLine", Symbol.Ask, Color.Red);
             
             // Find the line that was drawn.
             var obj = Chart.FindObject("hLine");
             Print("Found object with name {0}", obj.Name);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.ChartArea.RemoveObject(System.String)">
            <summary>
            Removes the chart object of the specified name.
            </summary>
            <param name="objectName">The name of the object.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.RemoveAllObjects">
            <summary>
            Removes all interactive and non-interactive objects available for the cBot or Indicator.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectAdded">
            <summary>
            Occurs when a chart object is added to the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectUpdated">
            <summary>Occurs when a chart object is updated - one or several properties of the chart object have changed.</summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectRemoved">
            <summary>
            Occurs when a chart object is removed from the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectsAdded">
            <summary>
            Occurs when one or several chart objects are added to the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectsUpdated">
            <summary>
            Occurs when one or several chart objects are updated.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectsRemoved">
            <summary>
            Occurs when one or several chart object are removed from the chart area.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectSelectionChanged">
            <summary>
            Occurs when a chart object is selected or deselected.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectsSelectionChanged">
            <summary>
            Occurs when chart objects are selected or deselected.
            </summary>
        </member>
        <member name="E:cAlgo.API.ChartArea.ObjectHoverChanged">
            <summary>
            Occurs when the cursor hovers over or leaves the object.
            </summary>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a horizontal line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once on a chart area. If duplicated, the chart object will be replaced with a new one of the
            same name.</param>
            <param name="y">The Y-axis value of the line location.</param>
            <param name="color">The line color.</param>
            <returns>ChartHorizontalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a horizontal line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="y">The Y-axis value of the line location.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <returns>ChartHorizontalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a horizontal line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="y">The Y-axis value of the line location.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <param name="lineStyle">The line style.</param>
            <returns>ChartHorizontalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Color)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time">The time value on the X-axis.</param>
            <param name="color">The line color.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time">The time value of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time">The time value of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <param name="lineStyle">The line style.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Color)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex">The bar index of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex">The bar index of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <returns>ChartVerticalLine.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a vertical line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex">The bar index of the line location on the X-axis.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
            <param name="lineStyle">The line style.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a trend line. 
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="time2">The time value of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="time2">The time value of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
            <param name="thickness">The thickness of the trend line.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="time2">The time value of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
            <param name="thickness">The thickness of the trend line.</param>
            <param name="lineStyle">The trend line style.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
            <param name="thickness">The thickness of the trend line.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a trend line.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the trend line start location.</param>
            <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the trend line end location.</param>
            <param name="color">The color of the trend line.</param>
            <param name="thickness">The thickness of the trend line.</param>
            <param name="lineStyle">The trend line style.</param>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="time2">The time value of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="time2">The time value of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <param name="thickness">The thickness of the equidistant channel lines.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="time2">The time value of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <param name="thickness">The thickness of the equidistant channel lines.</param>
            <param name="lineStyle">The equidistant channel lines style.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="barIndex2">The bar index of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="barIndex2">The bar index of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <param name="thickness">The thickness of the equidistant channel lines.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an equidistant channel.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the equidistant channel start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the equidistant channel start location.</param>
            <param name="barIndex2">The bar index of the equidistant channel end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the equidistant channel end location.</param>
            <param name="channelHeight">The equidistant channel hight in pips.</param>
            <param name="color">The color of the equidistant channel lines.</param>
            <param name="thickness">The thickness of the equidistant channel lines.</param>
            <param name="lineStyle">The equidistant channel lines style.</param>
            <returns>ChartEquidistantChannel.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawText(System.String,System.String,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws the text.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used
            once for a chart area. If duplicated, the chart object will be replaced with a
            new one of the same name.</param>
            <param name="text">The text content.</param>
            <param name="time">The time value of the text object location on the
            X-axis.</param>
            <param name="y">The Y-axis value of the text object location.</param>
            <param name="color">The color of the text.</param>
            <returns>
            ChartText.
            </returns>
            <example>
              <code>
            // Draw the text on the last bar high.
            var highPrice = MarketSeries.High.LastValue;
            var openTime = MarketSeries.OpenTime.LastValue;
            var text = Chart.DrawText("text1", "High is here", openTime, highPrice, Color.Red);
            text.VerticalAlignment = VerticalAlignment.Bottom;
            text.HorizontalAlignment = HorizontalAlignment.Center;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawText(System.String,System.String,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws the text.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="text">The text content.</param>
            <param name="barIndex">The bar index of the text object location on the X-axis.</param>
            <param name="y">The Y-axis value of the text object location.</param>
            <param name="color">The color of the text.</param>
            <returns>ChartText.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawStaticText(System.String,System.String,cAlgo.API.VerticalAlignment,cAlgo.API.HorizontalAlignment,cAlgo.API.Color)">
            <summary> 
            Draws the static text.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="text">The text content.</param>
            <param name="verticalAlignment">The vertical alignment.</param>
            <param name="horizontalAlignment">The horizontal alignment.</param>
            <param name="color">The color of the text.</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawIcon(System.String,cAlgo.API.ChartIconType,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an icon.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="iconType">The type of the icon.</param>
            <param name="time">The time value of the icon location on the X-axis.</param>
            <param name="y">The Y-axis value of the icon location.</param>
            <param name="color">The color of the icon.</param>
            <returns>ChartIcon.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawIcon(System.String,cAlgo.API.ChartIconType,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an icon.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used
            once for a chart area. If duplicated, the chart object will be replaced with a
            new one of the same name.</param>
            <param name="iconType">Type of the icon.</param>
            <param name="barIndex">The bar index of the icon location on the X-axis.</param>
            <param name="y">The Y-axis value of the icon location.</param>
            <param name="color">The color of the icon.</param>
            <returns>
            ChartIcon.
            </returns>
            <example>
              <code><![CDATA[
            // Draw an icon on the last bar high.
             
            ]]></code>
            </example>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="time2">The time value of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="time2">The time value of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <param name="thickness">The Fibonacci retracement lines thickness.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="time2">The time value of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <param name="thickness">The Fibonacci retracement lines thickness.</param>
            <param name="lineStyle">The Fibonacci retracement lines style.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <param name="thickness">The Fibonacci retracement lines thickness.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci retracement.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci retracement start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci retracement end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
            <param name="color">The Fibonacci retracement lines color.</param>
            <param name="thickness">The Fibonacci retracement lines thickness.</param>
            <param name="lineStyle">The Fibonacci retracement lines style.</param>
            <returns>ChartFibonacciRetracement.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="time2">The time value of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="time3">The time value of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="time2">The time value of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="time3">The time value of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <param name="thickness">The Fibonacci expansion lines thickness.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="time2">The time value of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="time3">The time value of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <param name="thickness">The Fibonacci expansion lines thickness.</param>
            <param name="lineStyle">The Fibonacci expansion lines style.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="barIndex3">The bar index of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="barIndex3">The bar index of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <param name="thickness">The Fibonacci expansion lines thickness.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci expansion.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci expansion start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
            <param name="barIndex2">The bar index of the Fibonacci expansion central point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
            <param name="barIndex3">The bar index of the Fibonacci expansion end point location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
            <param name="color">The Fibonacci expansion lines color.</param>
            <param name="thickness">The Fibonacci expansion lines thickness.</param>
            <param name="lineStyle">The Fibonacci expansion lines style.</param>
            <returns>ChartFibonacciExpansion.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="time2">The time value of the Fibonacci fan end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="time2">The time value of the Fibonacci fan end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <param name="thickness">The Fibonacci fan lines thickness.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="time2">The time value of the Fibonacci fan end point location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <param name="thickness">The Fibonacci fan lines thickness.</param>
            <param name="lineStyle">The Fibonacci fan lines style.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="barIndex2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="barIndex2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <param name="thickness">The Fibonacci fan lines thickness.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a Fibonacci fan.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Fibonacci fan start point location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
            <param name="barIndex2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
            <param name="color">The Fibonacci fan lines color.</param>
            <param name="thickness">The Fibonacci fan lines thickness.</param>
            <param name="lineStyle">The Fibonacci fan lines style.</param>
            <returns>ChartFibonacciFan.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="time2">The time value of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="time3">The time value of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="time2">The time value of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="time3">The time value of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <param name="thickness">The Andrew's pitchfork lines thickness.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="time2">The time value of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="time3">The time value of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <param name="thickness">The Andrew's pitchfork lines thickness.</param>
            <param name="lineStyle">The Andrew's pitchfork lines style.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="barIndex2">The bar index of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="barIndex3">The bar index of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an Andrews pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="barIndex2">The bar index of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="barIndex3">The bar index of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <param name="thickness">The Andrew's pitchfork lines thickness.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an Andrew's pitchfork.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the Andrew's pitchfork point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
            <param name="barIndex2">The bar index of the Andrew's pitchfork point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
            <param name="barIndex3">The bar index of the Andrew's pitchfork point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
            <param name="color">The Andrew's pitchfork lines color.</param>
            <param name="thickness">The Andrew's pitchfork lines thickness.</param>
            <param name="lineStyle">The Andrew's pitchfork lines style.</param>
            <returns>ChartAndrewsPitchfork.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="time2">The time value of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="time2">The time value of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <param name="thickness">The rectangle lines thickness.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="time2">The time value of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <param name="thickness">The rectangle lines thickness.</param>
            <param name="lineStyle">The rectangle lines style.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="barIndex2">The bar index of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="barIndex2">The bar index of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <param name="thickness">The rectangle lines thickness.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the rectangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
            <param name="barIndex2">The bar index of the rectangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
            <param name="color">The rectangle lines color.</param>
            <param name="thickness">The rectangle lines thickness.</param>
            <param name="lineStyle">The rectangle lines style.</param>
            <returns>ChartRectangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="time2">The time value of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="time2">The time value of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <param name="thickness">The ellipse line thickness.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="time2">The time value of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <param name="thickness">The ellipse line thickness.</param>
            <param name="lineStyle">The ellipse line style.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="barIndex2">The bar index of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="barIndex2">The bar index of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <param name="thickness">The ellipse line thickness.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the ellipse point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
            <param name="barIndex2">The bar index of the ellipse point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
            <param name="color">The ellipse line color.</param>
            <param name="thickness">The ellipse line thickness.</param>
            <param name="lineStyle">The ellipse line style.</param>
            <returns>ChartEllipse.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="time2">The time value of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="time3">The time value of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="time2">The time value of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="time3">The time value of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <param name="thickness">The triangle line thickness.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="time1">The time value of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="time2">The time value of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="time3">The time value of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <param name="thickness">The triangle line thickness.</param>
            <param name="lineStyle">The triangle line style.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="barIndex2">The bar index of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="barIndex3">The bar index of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="barIndex2">The bar index of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="barIndex3">The bar index of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <param name="thickness">The triangle line thickness.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="name">The chart object name - a unique name that can be only used once for a chart area. If duplicated, the chart object will be replaced with a new one of the same name.</param>
            <param name="barIndex1">The bar index of the triangle point 1 location on the X-axis.</param>
            <param name="y1">The Y-axis value of the triangle point 1 location.</param>
            <param name="barIndex2">The bar index of the triangle point 2 location on the X-axis.</param>
            <param name="y2">The Y-axis value of the triangle point 2 location.</param>
            <param name="barIndex3">The bar index of the triangle point 3 location on the X-axis.</param>
            <param name="y3">The Y-axis value of the triangle point 3 location.</param>
            <param name="color">The triangle line color.</param>
            <param name="thickness">The triangle line thickness.</param>
            <param name="lineStyle">The triangle line style.</param>
            <returns>ChartTriangle.</returns>
        </member>
        <member name="T:cAlgo.API.ChartColorSettings">
             <summary>
             Represents the charts Color Settings.
             </summary>
             <remarks>
             Use the Color classes toÂ set the chart Color Settings.
             </remarks>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This indicator allows you to change chart colors via chart controls
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartColorSettingsSample : Indicator
                 {
                     private TextBox _askPriceLineColorTextBox;
            
                     private TextBox _bidPriceLineColorTextBox;
            
                     private TextBox _backgroundColorTextBox;
            
                     protected override void Initialize()
                     {
                         var grid = new Grid(10, 2)
                         {
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6,
                             HorizontalAlignment = HorizontalAlignment.Left,
                             VerticalAlignment = VerticalAlignment.Bottom
                         };
            
                         var style = new Style();
            
                         style.Set(ControlProperty.Margin, 5);
                         style.Set(ControlProperty.FontWeight, FontWeight.ExtraBold);
                         style.Set(ControlProperty.ForegroundColor, Color.Red);
                         style.Set(ControlProperty.MinWidth, 100);
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Ask Price Line Color",
                             Style = style
                         }, 0, 0);
            
                         _askPriceLineColorTextBox = new TextBox
                         {
                             Text = Chart.ColorSettings.AskPriceLineColor.ToString(),
                             Style = style
                         };
            
                         grid.AddChild(_askPriceLineColorTextBox, 0, 1);
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Bid Price Line Color",
                             Style = style
                         }, 1, 0);
            
                         _bidPriceLineColorTextBox = new TextBox
                         {
                             Text = Chart.ColorSettings.BidPriceLineColor.ToString(),
                             Style = style
                         };
            
                         grid.AddChild(_bidPriceLineColorTextBox, 1, 1);
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Background Color",
                             Style = style
                         }, 2, 0);
            
                         _backgroundColorTextBox = new TextBox
                         {
                             Text = Chart.ColorSettings.BackgroundColor.ToString(),
                             Style = style
                         };
            
                         grid.AddChild(_backgroundColorTextBox, 2, 1);
            
                         var changeButton = new Button
                         {
                             Text = "Change",
                             Style = style
                         };
            
                         changeButton.Click += ChangeButton_Click;
            
                         grid.AddChild(changeButton, 9, 0);
            
                         Chart.AddControl(grid);
                     }
            
                     private void ChangeButton_Click(ButtonClickEventArgs obj)
                     {
                         Chart.ColorSettings.AskPriceLineColor = GetColor(_askPriceLineColorTextBox.Text);
                         Chart.ColorSettings.BidPriceLineColor = GetColor(_bidPriceLineColorTextBox.Text);
                         Chart.ColorSettings.BackgroundColor = GetColor(_backgroundColorTextBox.Text);
                     }
            
                     private Color GetColor(string colorString, int alpha = 255)
                     {
                         var color = colorString[0] == '#' ? Color.FromHex(colorString) : Color.FromName(colorString);
            
                         return Color.FromArgb(alpha, color);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BackgroundColor">
            <summary>
            Gets or sets the color of the chart background.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.ForegroundColor">
            <summary>
            Gets or sets the color of the chart foreground.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.GridLinesColor">
            <summary>
            Gets or sets the color of the grid lines.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.PeriodSeparatorColor">
            <summary>
            Gets or sets the color of the period separator.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BullOutlineColor">
            <summary>
            Gets or sets the color of the bull candle or bar outline.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BearOutlineColor">
            <summary>
            Gets or sets the color of the bear candle or bar outline.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BullFillColor">
            <summary>
            Gets or sets the color of the bull candle fill.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BearFillColor">
            <summary>
            Gets or sets the color of the bear candle fill.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.TickVolumeColor">
            <summary>
            Gets or sets the color of the tick volume.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.WinningDealColor">
            <summary>
            Gets or sets the color of the winning deal.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.LosingDealColor">
            <summary>
            Gets or sets the color of the losing deal.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.AskPriceLineColor">
            <summary>
            Gets or sets the color of the ask price line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BidPriceLineColor">
            <summary>
            Gets or sets the color of the bid price line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.BuyColor">
            <summary>
            Gets or sets the color of Buy positions and orders.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorSettings.SellColor">
            <summary>
            Gets or sets the color of Sell order positions and orders.
            </summary>
        </member>
        <member name="T:cAlgo.API.CharacterCasing">
             <summary>
             Specifies the case of characters typed manually into a TextBox control.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This indicator shows how to use CharacterCasing on text box controls
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class CharacterCasingSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6,
                             Width = 200
                         };
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Lower Character Casing",
                             Margin = new Thickness(10, 10, 10, 0),
                             ForegroundColor = Color.Red,
                             FontWeight = FontWeight.ExtraBold
                         });
            
                         stackPanel.AddChild(new TextBox
                         {
                             CharacterCasing = CharacterCasing.Lower,
                             Margin = 10
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Upper Character Casing",
                             Margin = new Thickness(10, 10, 10, 0),
                             ForegroundColor = Color.Red,
                             FontWeight = FontWeight.ExtraBold
                         });
            
                         stackPanel.AddChild(new TextBox
                         {
                             CharacterCasing = CharacterCasing.Upper,
                             Margin = 10
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Normal Character Casing",
                             Margin = new Thickness(10, 10, 10, 0),
                             ForegroundColor = Color.Red,
                             FontWeight = FontWeight.ExtraBold
                         });
            
                         stackPanel.AddChild(new TextBox
                         {
                             CharacterCasing = CharacterCasing.Normal,
                             Margin = 10
                         });
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.CharacterCasing.Normal">
            <summary>
            Characters typed into a TextBox are not converted.
            </summary>
        </member>
        <member name="F:cAlgo.API.CharacterCasing.Lower">
            <summary>
            Characters typed into a TextBox are converted to lowercase.
            </summary>
        </member>
        <member name="F:cAlgo.API.CharacterCasing.Upper">
            <summary>
            Characters typed into a TextBox are converted to uppercase.
            </summary>
        </member>
        <member name="T:cAlgo.API.ControlBase">
            <summary>
            Represents the base of chart controls.
            </summary>
        </member>
        <member name="M:cAlgo.API.ControlBase.#ctor">
            <summary>
            Initializes a new instance of the chart control.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.UniqueId">
            <summary>
            Gets the unique identifier of a chart control.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Style">
            <summary>
            Gets or sets the style of a chart control.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Left">
            <summary>
            Gets or sets the position of the chart control to the left side of the chart area. Works only when the control is inside the Canvas panel.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Top">
            <summary>
            Gets or sets the position of the chart control to the top of the chart area. Works only when the control is inside the Canvas panel.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Right">
            <summary>
            Gets or sets the position of the chart control to the rignt side of the chart area. Works only when the control is inside the Canvas panel.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Bottom">
            <summary>
            Gets or sets the position of the chart control to the bottom of the chart area. Works only when the control is inside the Canvas panel.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Width">
            <summary>
            Gets or sets the width of the chart control.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.Height">
            <summary>
            Gets or sets the hight of the chart control.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.MinWidth">
            <summary>
            Gets or sets the minimum width of the chart control.
            </summary>
            <value>The minimum width.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.MinHeight">
            <summary>
            Gets or sets the minimum height of the chart control.
            </summary>
            <value>The minimum height.</value>
        </member>
        <member name="P:cAlgo.API.ControlBase.MaxWidth">
            <summary>
            Gets or sets the maximum width of the chart control.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.MaxHeight">
            <summary>
            Gets or sets the maximum height of the chart control.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.IsEnabled">
            <summary>
            Gets or sets the value indicating whether this instance of the chart control is enabled.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.IsVisible">
            <summary>
            Gets or sets the value indicating whether this instance of the chart control instance is visible.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Opacity">
            <summary>
            Gets or sets the level of opacity of the chart control instance. Can be set from 0 (transparent) to 1 (opaque). Values higher than 1 will be set to 1, values below 0 will be set to 0.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Margin">
            <summary>
            Gets or sets the level of thickness of the margin of the chart control instance. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the chart control instance.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the chart control instance.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.Dock">
            <summary>
            Specifies the dock position of the chart control instance. Works only inside the DockPanel.
            </summary>
        </member>
        <member name="P:cAlgo.API.ControlBase.IsHitTestVisible">
            <summary>
            Gets or sets a value that declares if the chart control instance is visible for the mouse hit testing. If set to false, then the control will not handle any mouse events.
            </summary>
        </member>
        <member name="M:cAlgo.API.ControlBase.ResetProperty(cAlgo.API.ControlProperty)">
            <summary>
            Sets the property to the default value and removes its privelege over the style.
            </summary>
        </member>
        <member name="T:cAlgo.API.ControlProperty">
            <summary>
            Represents the Control property enumeration used in Style to get or set a style for a specific property.
            </summary>
            <seealso cref="T:cAlgo.API.Style" />
        </member>
        <member name="F:cAlgo.API.ControlProperty.BackgroundColor">
            <summary>
            The background color. Property value can be set using color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.ForegroundColor">
            <summary>
            The foreground color. Property value can be set using color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.Opacity">
            <summary>
            The opacity of the control. Can be set from 0 (transparent) to 1 (opaque). Values higher than 1 will be set to 1, values below 0 will be set to 0.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.MinWidth">
            <summary>
            The minimum width of the control.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.MaxWidth">
            <summary>
            The maximum width of the control.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.MinHeight">
            <summary>
            The minimum hight of the control.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.MaxHeight">
            <summary>
            The maximum hight of the control.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.Width">
            <summary>
            The width of the control.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.Height">
            <summary>
            The height of the control.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.Padding">
            <summary>
            The padding of the control. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.BorderThickness">
            <summary>
            The thickness of the border of the control. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.CornerRadius">
            <summary>
            The radius of the corner of the control. Property value can be set using CornerRadius, number, or a string: new CornerRadius(5), new CornerRadius(1, 2, 3, 4).
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.HorizontalContentAlignment">
            <summary>
            The horizontal content alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.VerticalContentAlignment">
            <summary>
            The vertical content alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.TextAlignment">
            <summary>
            The alignment of the content.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.Margin">
            <summary>
            The margin of the content. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.FontWeight">
            <summary>
            The content font weight. Property value can be set using the FontWeight enumerations: FontWeight.Bold, FontWeight.SemiBold, FontWeight.Light, FontWeight.Thin, etc.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.FontStyle">
            <summary>
            The content font style. Property value can be set using the FontStyle enumeration: FontWeight.Italic or FontWeight.Oblique.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.FontFamily">
            <summary>
            The font family.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.FontSize">
            <summary>
            The font size.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.BorderColor">
            <summary>
            The border color. Property value can be set using color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlProperty.CaretColor">
            <summary>
            The caret color. Property value can be set using color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
            </summary>
        </member>
        <member name="T:cAlgo.API.ControlState">
            <summary>
            Represents the chart control state.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.Hover">
            <summary>
            The hover.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.Pressed">
            <summary>
            The pressed.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.Disabled">
            <summary>
            The disabled.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.Checked">
            <summary>
            The checked.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.DarkTheme">
            <summary>
            The dark theme.
            </summary>
        </member>
        <member name="F:cAlgo.API.ControlState.LightTheme">
            <summary>
            The light theme.
            </summary>
        </member>
        <member name="T:cAlgo.API.Border">
             <summary>
             Represents the border.
             </summary>
             <seealso cref="T:cAlgo.API.ControlBase" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // A sample indicator that shows how to use Border chart control
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class BorderSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var border = new Border
                         {
                             BorderColor = Color.Yellow,
                             BorderThickness = 2,
                             Opacity = 0.5,
                             BackgroundColor = Color.Violet,
                             HorizontalAlignment = HorizontalAlignment.Right,
                             VerticalAlignment = VerticalAlignment.Bottom,
                             Width = 200,
                             Height = 100,
                             Margin = 10
                         };
            
                         var stackPanel = new StackPanel
                         {
                             Orientation = Orientation.Vertical
                         };
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Text",
                             Margin = 5,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             FontWeight = FontWeight.ExtraBold
                         });
            
                         stackPanel.AddChild(new Button
                         {
                             Text = "Button",
                             Margin = 5,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             FontWeight = FontWeight.ExtraBold
                         });
            
                         stackPanel.AddChild(new TextBox
                         {
                             Text = "Type text...",
                             Margin = 5,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             FontWeight = FontWeight.ExtraBold,
                             Width = 100
                         });
            
                         border.Child = stackPanel;
            
                         Chart.AddControl(border);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.Border._child">
            <summary>
            The border child object.
            </summary>
        </member>
        <member name="M:cAlgo.API.Border.#ctor">
            <summary>
            Initializes a new instance of the Border class.
            </summary>
        </member>
        <member name="P:cAlgo.API.Border.Child">
            <summary>
            Gets or sets the border child object.
            </summary>
        </member>
        <member name="P:cAlgo.API.Border.BorderThickness">
            <summary>
            Gets or sets the border thickness. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
            </summary>
        </member>
        <member name="P:cAlgo.API.Border.Padding">
            <summary>
            Gets or sets the border padding thickness. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
            </summary>
        </member>
        <member name="P:cAlgo.API.Border.CornerRadius">
            <summary>
            Gets or sets the border corner radius. Property value can be set using CornerRadius, number, or a string: new CornerRadius(5), new CornerRadius(1, 2, 3, 4).
            </summary>
        </member>
        <member name="P:cAlgo.API.Border.BorderColor">
            <summary>
            Gets or sets the border line color. Check the Color class for the ARGB (alpha, red, green, blue) color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
            </summary>
        </member>
        <member name="P:cAlgo.API.Border.BackgroundColor">
            <summary>
            Gets or sets the color of the border background. Check the Color class for the ARGB (alpha, red, green, blue) color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
            </summary>
        </member>
        <member name="T:cAlgo.API.Button">
             <summary>
             Represents the button.
             </summary>
             <seealso cref="T:cAlgo.API.Control" />
             <example>
             <code>
             using cAlgo.API;
             using System;
             using System.Linq;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use Button control and handle its clicked event
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ButtonSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.7
                         };
            
                         for (int i = 0; i &lt; 5; i++)
                         {
                             var button = new Button
                             {
                                 Text = "Button #" + i,
                                 Margin = 10
                             };
            
                             button.Click += Button_Click;
            
                             stackPanel.AddChild(button);
                         }
            
                         Chart.AddControl(stackPanel);
                     }
            
                     private void Button_Click(ButtonClickEventArgs obj)
                     {
                         var textSplit = obj.Button.Text.Split(' ').TakeWhile(text => !text.Equals("Clicked", StringComparison.OrdinalIgnoreCase)).ToArray();
            
                         obj.Button.Text = string.Join(" ", textSplit) + " Clicked";
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.Button._content">
            <summary>
            The text content of the button.
            </summary>
        </member>
        <member name="M:cAlgo.API.Button.#ctor">
            <summary>
            Initializes a new instance of the Button class.
            </summary>
        </member>
        <member name="P:cAlgo.API.Button.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.Button.CornerRadius">
            <summary>
            Gets or sets the border corner radius. Property value can be set using CornerRadius, number, or a string: new CornerRadius(5), new CornerRadius(1, 2, 3, 4).
            </summary>
        </member>
        <member name="P:cAlgo.API.Button.BorderColor">
            <summary>
            Gets or sets the border line color. Check the Color class for the ARGB (alpha, red, green, blue) color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
            </summary>
        </member>
        <member name="P:cAlgo.API.Button.BorderThickness">
            <summary>
            Gets or sets the border thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.Button.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="E:cAlgo.API.Button.Click">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="T:cAlgo.API.CheckBox">
             <summary>
             Represents the Checkbox.
             </summary>
             <seealso cref="T:cAlgo.API.Control" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use checkbox control and handle its checked/unchecked events
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class CheckBoxControlSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold
                         };
            
                         var checkBox = new CheckBox
                         {
                             Text = "Unchecked",
                             Margin = 10,
                             FontWeight = FontWeight.ExtraBold
                         };
            
                         checkBox.Checked += CheckBox_Checked;
                         checkBox.Unchecked += CheckBox_Unchecked;
            
                         stackPanel.AddChild(checkBox);
            
                         Chart.AddControl(stackPanel);
                     }
            
                     private void CheckBox_Unchecked(CheckBoxEventArgs obj)
                     {
                         obj.CheckBox.Text = "Unchecked";
                     }
            
                     private void CheckBox_Checked(CheckBoxEventArgs obj)
                     {
                         obj.CheckBox.Text = "Checked";
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the checkbox class.
            </summary>
        </member>
        <member name="P:cAlgo.API.CheckBox.IsThreeState">
            <summary>
            Checks if the checkbox may be of three states - checked, unchecked and indeterminate.
            </summary>
        </member>
        <member name="P:cAlgo.API.CheckBox.IsChecked">
            <summary>
            Gets or sets a value indicating whether the checkbox is checked.
            </summary>
        </member>
        <member name="P:cAlgo.API.CheckBox.Text">
            <summary>
            Gets or sets the checkbox text.
            </summary>
        </member>
        <member name="P:cAlgo.API.CheckBox.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="E:cAlgo.API.CheckBox.Click">
            <summary>
            Occurs when clicked.
            </summary>
        </member>
        <member name="E:cAlgo.API.CheckBox.Checked">
            <summary>
            Occurs when checked.
            </summary>
        </member>
        <member name="E:cAlgo.API.CheckBox.Unchecked">
            <summary>
            Occurs when unchecked.
            </summary>
        </member>
        <member name="E:cAlgo.API.CheckBox.Indeterminate">
            <summary>
            Occurs when indeterminate.
            </summary>
        </member>
        <member name="T:cAlgo.API.Control">
            <summary>
                Represents the Chart Control class.
            </summary>
            <seealso cref="T:cAlgo.API.ControlBase" />
        </member>
        <member name="M:cAlgo.API.Control.#ctor">
            <summary>
                Initializes a new instance of the chart control.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.ForegroundColor">
            <summary>
                Gets or sets the color of the chart control foreground. Check the Color class for the ARGB (alpha, red, green,
                blue) color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0),
                Color.FromHex("#ff0000"), "Red", "#ff0000".
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.BackgroundColor">
            <summary>
                Gets or sets the color of the chart control background.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.Padding">
            <summary>
                Gets or sets the chart control padding. Property value can be set using Thickness, number, or a string new
                Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.VerticalContentAlignment">
            <summary>
                Gets or sets the vertical content alignment.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.HorizontalContentAlignment">
            <summary>
                Gets or sets the horizontal content alignment.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.FontWeight">
            <summary>
                Gets or sets the font weight.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.FontStyle">
            <summary>
                Gets or sets the font style.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.FontFamily">
            <summary>
                Gets or sets the font family.
            </summary>
        </member>
        <member name="P:cAlgo.API.Control.FontSize">
            <summary>
                Gets or sets the font size.
            </summary>
        </member>
        <member name="T:cAlgo.API.Image">
             <summary>
             Represents the image chart control.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use image control to show images
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ImageSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var image = new Image
                         {
                             // Logo is an icon file inside project resources
                             Source = Properties.Resources.Logo,
                             Width = 200,
                             Height = 200,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                         };
            
                         Chart.AddControl(image);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Image.#ctor">
            <summary>
            Initializes a new instance of the Image class.
            </summary>
        </member>
        <member name="P:cAlgo.API.Image.Source">
            <summary>
            Gets or sets the source of the image.
            </summary>
        </member>
        <member name="P:cAlgo.API.Image.Stretch">
            <summary>
            Gets or sets a value that describes how an Image should be stretched to fill the destination rectangle.
            </summary>
        </member>
        <member name="P:cAlgo.API.Image.StretchDirection">
            <summary>
            Gets or sets a value that indicates how the image is scaled.
            </summary>
        </member>
        <member name="T:cAlgo.API.RadioButton">
             <summary>
             Reporesents the Radiobutton chart control type.
             </summary>
             <seealso cref="T:cAlgo.API.Control" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use the Radio button chart control
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class RadioButtonSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.7
                         };
            
                         var firstRadioButton = new RadioButton
                         {
                             Text = "Unchecked"
                         };
            
                         firstRadioButton.Checked += RadioButton_Checked;
                         firstRadioButton.Unchecked += RadioButton_Unchecked;
            
                         stackPanel.AddChild(firstRadioButton);
            
                         var secondRadioButton = new RadioButton
                         {
                             Text = "Unchecked"
                         };
            
                         secondRadioButton.Checked += RadioButton_Checked;
                         secondRadioButton.Unchecked += RadioButton_Unchecked;
            
                         stackPanel.AddChild(secondRadioButton);
            
                         Chart.AddControl(stackPanel);
                     }
            
                     private void RadioButton_Unchecked(RadioButtonEventArgs obj)
                     {
                         var radioButton = obj.RadioButton;
            
                         radioButton.Text = "Unchecked";
                     }
            
                     private void RadioButton_Checked(RadioButtonEventArgs obj)
                     {
                         var radioButton = obj.RadioButton;
            
                         radioButton.Text = "Checked";
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the Radiobutton class.
            </summary>
        </member>
        <member name="P:cAlgo.API.RadioButton.IsChecked">
            <summary>
            Defines if the radiobutton is checked.
            </summary>
        </member>
        <member name="P:cAlgo.API.RadioButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.RadioButton.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:cAlgo.API.RadioButton.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="E:cAlgo.API.RadioButton.Click">
            <summary>
            Occurs when clicked.
            </summary>
        </member>
        <member name="E:cAlgo.API.RadioButton.Checked">
            <summary>
            Occurs when checked.
            </summary>
        </member>
        <member name="E:cAlgo.API.RadioButton.Unchecked">
            <summary>
            Occurs when unchecked.
            </summary>
        </member>
        <member name="T:cAlgo.API.ScrollViewer">
             <summary>
             Represents a scrollable area that can contain other visible elements.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to create a scrollable chart controls container via ScrollViewer control
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ScrollViewerSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var scrollViewer = new ScrollViewer
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.7,
                             HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
                             VerticalScrollBarVisibility = ScrollBarVisibility.Visible,
                             Height = 100
                         };
            
                         var grid = new Grid(10, 2)
                         {
                             BackgroundColor = Color.Gold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                         };
            
                         scrollViewer.Content = grid;
            
                         for (int iRow = 0; iRow &lt; 10; iRow++)
                         {
                             grid.AddChild(new TextBlock
                             {
                                 Text = "Text",
                                 Margin = 5,
                                 ForegroundColor = Color.Black,
                                 FontWeight = FontWeight.ExtraBold
                             }, iRow, 0);
            
                             grid.AddChild(new Button
                             {
                                 Text = "Button",
                                 Margin = 5,
                                 ForegroundColor = Color.Black,
                                 FontWeight = FontWeight.ExtraBold
                             }, iRow, 1);
                         }
            
                         Chart.AddControl(scrollViewer);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the Scroll viewer class.
            </summary>
        </member>
        <member name="P:cAlgo.API.ScrollViewer.HorizontalScrollBarVisibility">
            <summary>
            Defines the horizontal scroll bar visibility.
            </summary>
        </member>
        <member name="P:cAlgo.API.ScrollViewer.VerticalScrollBarVisibility">
            <summary>
            Defines the vertical scroll bar visibility.
            </summary>
        </member>
        <member name="P:cAlgo.API.ScrollViewer.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="T:cAlgo.API.TextBlock">
             <summary>
             Represents the Text Block - the control to display a non-interactive text.
             </summary>
             <seealso cref="T:cAlgo.API.Control" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to add a text block control on your chart
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TextBlockSample : Indicator
                 {
                     [Parameter("Text", DefaultValue = "Sample text")]
                     public string Text { get; set; }
            
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             BackgroundColor = Color.Gold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Opacity = 0.6,
                             Width = 200
                         };
            
                         stackPanel.AddChild(new TextBlock { Text = Text, FontWeight = FontWeight.ExtraBold, ForegroundColor = Color.Blue });
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.TextBlock.#ctor">
            <summary>
            Initializes a new instance of the Text Block class.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBlock.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBlock.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBlock.LineHeight">
            <summary>
            Gets or sets the height of the line.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBlock.LineStackingStrategy">
            <summary>
            Gets or sets the mechanism by which a line box is determined for each line of text within the TextBlock.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBlock.TextWrapping">
            <summary>
            Gets or sets the way how the TextBlock should wrap the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBlock.TextTrimming">
            <summary>
            Gets or sets the text trimming behavior when the content overflows the content area.
            </summary>
        </member>
        <member name="T:cAlgo.API.TextBox">
             <summary>
             Represents the text box class.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to add a text box control on your chart
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TextBoxSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             BackgroundColor = Color.Gold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Opacity = 0.6,
                         };
            
                         var textBox = new TextBox
                         {
                             Text = "Enter text here...",
                             FontWeight = FontWeight.ExtraBold,
                             Margin = 5,
                             ForegroundColor = Color.White,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             Width = 150
                         };
            
                         textBox.TextChanged += TextBox_TextChanged;
            
                         stackPanel.AddChild(textBox);
            
                         Chart.AddControl(stackPanel);
                     }
            
                     private void TextBox_TextChanged(TextChangedEventArgs obj)
                     {
                         Print("Text box text changed to: ", obj.TextBox.Text);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.TextBox.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.TextBox" /> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.TextBox.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the current text box is read-only.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.AcceptsReturn">
            <summary>
            Gets or sets a value that indicates how the text editing control responds when the user presses the ENTER key.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.AcceptsTab">
            <summary>
            Gets or sets a value that indicates how the text editing control responds when the user presses the TAB key.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.MinLines">
            <summary>
            Gets or sets the minimum number of visible lines.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.MaxLines">
            <summary>
            Gets or sets the maximum number of visible lines.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.MaxLength">
            <summary>
            Gets or sets the maximum number of characters that can be manually entered into the text box.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.CaretColor">
            <summary>
            Gets or sets the color of the insertion caret.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.SelectionColor">
            <summary>
            Gets or sets the text color of the current text selection.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.BorderColor">
            <summary>
            Gets or sets the color of the text box border.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.SelectionOpacity">
            <summary>
            Gets or sets the opacity of the selected text.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.BorderThickness">
            <summary>
            Gets or sets the border thickness. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.IsReadOnlyCaretVisible">
            <summary>
            Gets or sets a value that indicates whether a read-only text box displays a caret.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.CharacterCasing">
            <summary>
            Gets or sets whether the TextBox control modifies the case of characters as they are typed.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.TextAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.TextWrapping">
            <summary>
            Gets or sets how the text box should wrap text.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.HorizontalScrollBarVisibility">
            <summary>
            Defines the horizontal scroll bar visibility.
            </summary>
        </member>
        <member name="P:cAlgo.API.TextBox.VerticalScrollBarVisibility">
            <summary>
            Defines the vertical scroll bar visibility.
            </summary>
        </member>
        <member name="E:cAlgo.API.TextBox.TextChanged">
            <summary>
            Occurs when the text has changed.
            </summary>
        </member>
        <member name="T:cAlgo.API.ToggleButton">
             <summary>
             Represents the Toggle button.
             </summary>
             <seealso cref="T:cAlgo.API.Control" />
             <example>
             <code>
             using cAlgo.API;
             using System;
             using System.Linq;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use ToggleButton control and handle its checked/unchecked events
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ToggleButtonSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.7
                         };
            
                         for (int i = 0; i &lt; 5; i++)
                         {
                             var toggleButton = new ToggleButton
                             {
                                 Text = "Toggle Button #" + i + " Unchecked",
                                 Margin = 10
                             };
            
                             toggleButton.Checked += ToggleButton_Checked;
                             toggleButton.Unchecked += ToggleButton_Unchecked;
            
                             stackPanel.AddChild(toggleButton);
                         }
            
                         Chart.AddControl(stackPanel);
                     }
            
                     private void ToggleButton_Checked(ToggleButtonEventArgs obj)
                     {
                         var textSplit = obj.ToggleButton.Text.Split(' ').TakeWhile(text => !text.Equals("Unchecked", StringComparison.OrdinalIgnoreCase)).ToArray();
            
                         obj.ToggleButton.Text = string.Join(" ", textSplit) + " Checked";
                     }
            
                     private void ToggleButton_Unchecked(ToggleButtonEventArgs obj)
                     {
                         var textSplit = obj.ToggleButton.Text.Split(' ').TakeWhile(text => !text.Equals("Checked", StringComparison.OrdinalIgnoreCase)).ToArray();
            
                         obj.ToggleButton.Text = string.Join(" ", textSplit) + " Unchecked";
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the Toggle button class.
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButton.IsChecked">
            <summary>
            Defines whether the Toggle button is checked.
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButton.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButton.CornerRadius">
            <summary>
            Gets or sets the border corner radius. Property value can be set using CornerRadius, number, or a string: new CornerRadius(5), new CornerRadius(1, 2, 3, 4).
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButton.BorderColor">
            <summary>
            Gets or sets the border line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ToggleButton.BorderThickness">
            <summary>
            Gets or sets the border thickness. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
            </summary>
        </member>
        <member name="E:cAlgo.API.ToggleButton.Click">
            <summary>
            Occurs when clicked.
            </summary>
        </member>
        <member name="E:cAlgo.API.ToggleButton.Checked">
            <summary>
            Occurs when checked.
            </summary>
        </member>
        <member name="E:cAlgo.API.ToggleButton.Unchecked">
            <summary>
            Occurs when unchecked.
            </summary>
        </member>
        <member name="T:cAlgo.API.CornerRadius">
             <summary>
             Represents the radii of a rectangle's corners.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use the rectangle corner radius to create a round corner rectangle
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class RectangleCornerRadiusSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var rectangle = new Rectangle
                         {
                             RadiusX = 20,
                             RadiusY = 20,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Width = 200,
                             Height = 150,
                             FillColor = Color.FromArgb(100, Color.Red),
                             StrokeColor = Color.Yellow
                         };
            
                         Chart.AddControl(rectangle);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.CornerRadius.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.CornerRadius" /> structure.
            </summary>
            <param name="topLeft"></param>
            <param name="topRight"></param>
            <param name="bottomRight"></param>
            <param name="bottomLeft"></param>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.CornerRadius.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.CornerRadius" /> structure.
            </summary>
            <param name="uniformRadius"></param>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.CornerRadius.TopLeft">
            <summary>
            Gets or sets the radius of the top-left corner.
            </summary>
        </member>
        <member name="P:cAlgo.API.CornerRadius.TopRight">
            <summary>
            Gets or sets the radius of the top-right corner.
            </summary>
        </member>
        <member name="P:cAlgo.API.CornerRadius.BottomRight">
            <summary>
            Gets or sets the radius of the bottom-right corner.
            </summary>
        </member>
        <member name="P:cAlgo.API.CornerRadius.BottomLeft">
            <summary>
            Gets or sets the radius of the bottom-left corner.
            </summary>
        </member>
        <member name="M:cAlgo.API.CornerRadius.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.CornerRadius.Equals(System.Object)">
            <summary>
            Defines whether the specified object is equal to this instance.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.CornerRadius.op_Implicit(System.Double)~cAlgo.API.CornerRadius">
            <summary>
            Initializes a new instance of the CornerRadius class with a specified uniform radius value for every corner or the rectangle.
            </summary>
            <param name="uniform"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.CornerRadius.op_Implicit(System.String)~cAlgo.API.CornerRadius">
            <summary>
            Initializes a new instance of the CornerRadius class with a specified uniform radius value for every corner or the rectangle.
            </summary>
            <param name="cornerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.CornerRadius.op_Equality(cAlgo.API.CornerRadius,cAlgo.API.CornerRadius)">
            <summary>Compares the value of two <see cref="T:cAlgo.API.CornerRadius" /> structures for equality.</summary>
            <param name="cr1">The first structure to compare.</param>
            <param name="cr2">The other structure to compare.</param>
            <returns>
            <see langword="true" /> if the two instances of <see cref="T:cAlgo.API.CornerRadius" /> are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:cAlgo.API.CornerRadius.op_Inequality(cAlgo.API.CornerRadius,cAlgo.API.CornerRadius)">
            <summary>Compares two <see cref="T:cAlgo.API.CornerRadius" /> structures for inequality. </summary>
            <param name="cr1">The first structure to compare.</param>
            <param name="cr2">The other structure to compare.</param>
            <returns>
            <see langword="true" /> if the two instances of <see cref="T:cAlgo.API.CornerRadius" /> are not equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:cAlgo.API.CustomControl">
             <summary>
             Represents the custom control to create reusable controls with customized look and behavior.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using System.Collections.Generic;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use Chart Custom controls to create your own controls
                 // by combining multiple built-in controls, the combobox control is not a fully functioning combobox, its just for learning purpose
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class CustomControlSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var comboBox = new ComboBox
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center
                         };
            
                         comboBox.AddItem("Item 1");
                         comboBox.AddItem("Item 2");
                         comboBox.AddItem("Item 3");
                         comboBox.AddItem("Item 4");
                         comboBox.AddItem("Item 5");
            
                         Chart.AddControl(comboBox);
                     }
            
                     public override void Calculate(int index)
                     {
                         // Calculate value at specified index
                         // Result[index] = ...
                     }
                 }
            
                 public class ComboBox : CustomControl
                 {
                     private TextBox _textBox;
            
                     private Button _button;
            
                     private Grid _itemsGrid;
            
                     private StackPanel _panel;
            
                     private readonly List&lt;object&gt; _items = new List&lt;object&gt;();
            
                     private bool _isExpanded;
            
                     public ComboBox()
                     {
                         _textBox = new TextBox
                         {
                             Width = 100,
                             IsReadOnly = true,
                             IsReadOnlyCaretVisible = false
                         };
            
                         _button = new Button
                         {
                             Text = "â–¼"
                         };
            
                         _button.Click += Button_Click;
            
                         var stackPanel = new StackPanel
                         {
                             Orientation = Orientation.Horizontal
                         };
            
                         stackPanel.AddChild(_textBox);
                         stackPanel.AddChild(_button);
            
                         _panel = new StackPanel
                         {
                             Orientation = Orientation.Vertical
                         };
            
                         _panel.AddChild(stackPanel);
            
                         AddChild(_panel);
                     }
            
                     public void AddItem(object item)
                     {
                         _items.Add(item);
                     }
            
                     public bool RemoveItem(object item)
                     {
                         return _items.Remove(item);
                     }
            
                     private void Button_Click(ButtonClickEventArgs obj)
                     {
                         if (_itemsGrid != null)
                             _panel.RemoveChild(_itemsGrid);
            
                         if (_isExpanded)
                         {
                             _isExpanded = false;
            
                             return;
                         }
            
                         _isExpanded = true;
            
                         _itemsGrid = new Grid(_items.Count, 1);
            
                         for (int i = 0; i &lt; _items.Count; i++)
                         {
                             var item = _items[i];
            
                             _itemsGrid.AddChild(new TextBlock
                             {
                                 Text = item.ToString()
                             }, i, 0);
                         }
            
                         _panel.AddChild(_itemsGrid);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.CustomControl.AddChild(cAlgo.API.ControlBase)">
            <summary>
            Adds a child control.
            </summary>
            <param name="childControl"></param>
        </member>
        <member name="T:cAlgo.API.DefaultStyles">
            <summary>
            Represent the list of default styles for the built-in controls.
            </summary>
            <seealso cref="T:cAlgo.API.Style" />
        </member>
        <member name="P:cAlgo.API.DefaultStyles.TextBlockStyle">
            <summary>
            Gets the Text Block default style.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.DefaultStyles.TextBoxStyle">
            <summary>
            Gets the Text Box default style.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.DefaultStyles.ButtonStyle">
            <summary>
            Gets the Button default style.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.DefaultStyles.ToggleButtonStyle">
            <summary>
            Gets the Toggle Button default style.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.DefaultStyles.CheckBoxStyle">
            <summary>
            Gets the Checkbox default style.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.DefaultStyles.RadioButtonStyle">
            <summary>
            Gets the Radio Button default stile.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.DefaultStyles.ScrollViewerStyle">
            <summary>
            Gets the Scroll Viewer default style.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Dock">
            <summary>
            Specifies where a chart control will be docked inside the DockPanel.
            </summary>
            <seealso cref="T:cAlgo.API.DockPanel" />
        </member>
        <member name="F:cAlgo.API.Dock.Left">
            <summary>
            Dock to the left side of the DockPanel.
            </summary>
        </member>
        <member name="F:cAlgo.API.Dock.Top">
            <summary>
            Dock to the top of the DockPanel.
            </summary>
        </member>
        <member name="F:cAlgo.API.Dock.Right">
            <summary>
            Dock to the right side of the DockPanel.
            </summary>
        </member>
        <member name="F:cAlgo.API.Dock.Bottom">
            <summary>
            Dock to the bottom of the DockPanel.
            </summary>
        </member>
        <member name="T:cAlgo.API.FontStyle">
             <summary>
             Specifies style information applied to text.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use a chart control font properties to set font size, style, and family
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class FontSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6
                         };
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Thin Weight Size 10 FontStyle Normal Font Default",
                             FontSize = 10,
                             FontWeight = FontWeight.Thin,
                             FontStyle = FontStyle.Normal,
                             ForegroundColor = Color.Black,
                             Margin = 10
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Thin Weight Size 10 FontStyle Italic Font Default",
                             FontSize = 10,
                             FontWeight = FontWeight.Thin,
                             FontStyle = FontStyle.Italic,
                             ForegroundColor = Color.Black,
                             Margin = 10
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Thin Weight Size 10 FontStyle Oblique Font Default",
                             FontSize = 10,
                             FontWeight = FontWeight.Thin,
                             FontStyle = FontStyle.Oblique,
                             ForegroundColor = Color.Black,
                             Margin = 10
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Black Weight Size 10 FontStyle Normal Font Default",
                             FontSize = 10,
                             FontWeight = FontWeight.Black,
                             FontStyle = FontStyle.Normal,
                             ForegroundColor = Color.Black,
                             Margin = 10
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Bold Weight Size 10 FontStyle Normal Font Default",
                             FontSize = 10,
                             FontWeight = FontWeight.Bold,
                             FontStyle = FontStyle.Normal,
                             ForegroundColor = Color.Black,
                             Margin = 10
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Heavy Weight Size 10 FontStyle Normal Font Default",
                             FontSize = 10,
                             FontWeight = FontWeight.Heavy,
                             FontStyle = FontStyle.Normal,
                             ForegroundColor = Color.Black,
                             Margin = 10
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Bold Weight Size 12 FontStyle Normal Font Default",
                             FontSize = 12,
                             FontWeight = FontWeight.Bold,
                             FontStyle = FontStyle.Normal,
                             ForegroundColor = Color.Black,
                             Margin = 10
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = "Thin Weight Size 12 FontStyle Normal Font Calibri Light Italic",
                             FontSize = 12,
                             FontWeight = FontWeight.Thin,
                             FontStyle = FontStyle.Normal,
                             ForegroundColor = Color.Black,
                             FontFamily = "Calibri Light Italic",
                             Margin = 10
                         });
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.FontStyle.Normal">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontStyle.Oblique">
            <summary>
            Oblique text.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="T:cAlgo.API.FontWeight">
            <summary>
            Specifies the weight or thickness of the font.
            </summary>
            <seealso cref="T:cAlgo.API.FontStyle" />
        </member>
        <member name="F:cAlgo.API.FontWeight.Thin">
            <summary>
            The thin font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.ExtraLight">
            <summary>
            The extra light font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.UltraLight">
            <summary>
            The ultra light font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.Light">
            <summary>
            The light font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.Normal">
            <summary>
            The normal font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.Regular">
            <summary>
            The regular font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.Medium">
            <summary>
            The medium font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.DemiBold">
            <summary>
            The demibold font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.SemiBold">
            <summary>
            The semibold font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.Bold">
            <summary>
            The bold font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.ExtraBold">
            <summary>
            The extra bold font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.UltraBold">
            <summary>
            The ultra bold font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.Black">
            <summary>
            The black font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.Heavy">
            <summary>
            The Heavy font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.ExtraBlack">
            <summary>
            The Extra black font.
            </summary>
        </member>
        <member name="F:cAlgo.API.FontWeight.UltraBlack">
            <summary>
            The ultra black font.
            </summary>
        </member>
        <member name="T:cAlgo.API.LineStackingStrategy">
             <summary>
             Describes a mechanism by which a line box is determined for each line.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using System.Text;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use different Line Stacking Strategies on a TextBlock
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class LineStackingStrategySample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             Orientation = Orientation.Vertical,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center
                         };
            
                         var stringBuilder = new StringBuilder();
            
                         stringBuilder.AppendLine("First line of text");
                         stringBuilder.AppendLine("Second line of text");
                         stringBuilder.AppendLine("Third line of text");
                         stringBuilder.AppendLine("Fourth line of text");
                         stringBuilder.AppendLine("Fifth line of text");
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Margin = 5,
                             Text = "LineStackingStrategy = BlockLineHeight:\n" + stringBuilder.ToString(),
                             LineStackingStrategy = LineStackingStrategy.BlockLineHeight,
                             FontWeight = FontWeight.Bold,
                             ForegroundColor = Color.Black
                         });
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Margin = 5,
                             Text = "LineStackingStrategy = MaxHeight:\n" + stringBuilder.ToString(),
                             LineStackingStrategy = LineStackingStrategy.MaxHeight,
                             FontWeight = FontWeight.Bold,
                             ForegroundColor = Color.Black
                         });
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.LineStackingStrategy.BlockLineHeight">
            <summary>
            The stack height is determined by the block element line-height property value.
            </summary>
        </member>
        <member name="F:cAlgo.API.LineStackingStrategy.MaxHeight">
            <summary>
            The stack height is the smallest value that containing all the inline elements on that line when those elements are properly aligned.
            </summary>
        </member>
        <member name="T:cAlgo.API.Orientation">
             <summary>
             Defines the different orientations that panel layout can have.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to set stack and wrap panels orientation
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class OrientationSample : Indicator
                 {
                     [Parameter("Orientation", DefaultValue = Orientation.Vertical)]
                     public Orientation Orientation { get; set; }
            
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             Orientation = Orientation,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.7,
                         };
            
                         stackPanel.AddChild(new TextBlock { Text = "First TextBlock", FontWeight = FontWeight.ExtraBold, Margin = 5, ForegroundColor = Color.Black });
                         stackPanel.AddChild(new TextBlock { Text = "Second TextBlock", FontWeight = FontWeight.ExtraBold, Margin = 5, ForegroundColor = Color.Black });
                         stackPanel.AddChild(new TextBlock { Text = "Third TextBlock", FontWeight = FontWeight.ExtraBold, Margin = 5, ForegroundColor = Color.Black });
                         stackPanel.AddChild(new TextBlock { Text = "Fourth TextBlock", FontWeight = FontWeight.ExtraBold, Margin = 5, ForegroundColor = Color.Black });
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.Orientation.Horizontal">
            <summary>
            Elements in the panel layout should be horizontally oriented.
            </summary>
        </member>
        <member name="F:cAlgo.API.Orientation.Vertical">
            <summary>
            Elements in the panel layout should be vertically oriented.
            </summary>
        </member>
        <member name="T:cAlgo.API.Canvas">
             <summary>
             Defines an area to position child elements by coordinates relative to the Canvas area.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use the Canvas panel
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class CanvasSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var canvas = new Canvas
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Width = 300,
                             Height = 200,
                             BackgroundColor = Color.Red,
                             Opacity = 0.5
                         };
            
                         canvas.AddChild(new Button
                         {
                             Top = 20,
                             Left = 80,
                             Margin = 5,
                             Text = "Button Inside Canvas"
                         });
            
                         canvas.AddChild(new Image
                         {
                             Source = Properties.Resources.stock,
                             Margin = 5,
                             Width = 128,
                             Height = 128,
                             Top = 45,
                             Left = 80
                         });
            
                         Chart.AddControl(canvas);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Canvas.#ctor">
            <summary>
            Initializes a new instance of the Canvas class.
            </summary>
        </member>
        <member name="M:cAlgo.API.Canvas.Accept(cAlgo.API.Internals.ChartControls.IChartControlVisitor)">
            <param name="visitor">The visitor.</param>
        </member>
        <member name="T:cAlgo.API.DockPanel">
             <summary>
             Defines the area where you can arrange child elemens either horizontally or vertically, relative to each other.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use DockPanel
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class DockPanelSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var dockPanel = new DockPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.8
                         };
            
                         dockPanel.AddChild(new TextBlock
                         {
                             Text = "Enter Your Name",
                             Margin = 5,
                             Dock = Dock.Top,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             ForegroundColor = Color.Black,
                             FontWeight = FontWeight.ExtraBold
                         });
            
                         dockPanel.AddChild(new TextBox
                         {
                             Dock = Dock.Bottom,
                             Margin = 5,
                             Width = 100
                         });
            
                         Chart.AddControl(dockPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.DockPanel.#ctor">
            <summary>
            Initializes a new instance of the DockPanel class.
            </summary>
        </member>
        <member name="P:cAlgo.API.DockPanel.LastChildFill">
            <summary>
            Indicates whether the last child element within a DockPanel stretches to fill the remaining available space.
            </summary>
        </member>
        <member name="T:cAlgo.API.Grid">
             <summary>
             Represents the Grid class.
             </summary>
             <seealso cref="T:cAlgo.API.Panel" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use Grid panel control
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class GridSample : Indicator
                 {
                     [Parameter("Grid Rows #", DefaultValue = 10)]
                     public int GridRowsNumber { get; set; }
            
                     [Parameter("Grid Columns #", DefaultValue = 2)]
                     public int GridColumnsNumber { get; set; }
            
                     [Parameter("Grid Row Length", DefaultValue = 2)]
                     public int GridRowLength { get; set; }
            
                     [Parameter("Grid Row Length Unit Type", DefaultValue = GridUnitType.Auto)]
                     public GridUnitType GridRowLengthUnitType { get; set; }
            
                     [Parameter("Grid Column Length", DefaultValue = 2)]
                     public int GridColumnLength { get; set; }
            
                     [Parameter("Grid Column Length Unit Type", DefaultValue = GridUnitType.Auto)]
                     public GridUnitType GridColumnLengthUnitType { get; set; }
            
                     protected override void Initialize()
                     {
                         var grid = new Grid(GridRowsNumber, GridColumnsNumber)
                         {
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             ShowGridLines = true,
                         };
            
                         for (int iRow = 0; iRow &lt; GridRowsNumber; iRow++)
                         {
                             var row = grid.Rows[iRow];
            
                             SetGridRowLength(row);
            
                             for (int iColumn = 0; iColumn &lt; GridColumnsNumber; iColumn++)
                             {
                                 var column = grid.Columns[iColumn];
            
                                 SetGridColumnLength(column);
            
                                 grid.AddChild(new TextBlock
                                 {
                                     Text = string.Format("Row {0} and Column {1}", iRow, iColumn),
                                     Margin = 5,
                                     ForegroundColor = Color.Black,
                                     FontWeight = FontWeight.ExtraBold
                                 }, iRow, iColumn);
                             }
                         }
            
                         Chart.AddControl(grid);
                     }
            
                     private void SetGridRowLength(GridRow row)
                     {
                         switch (GridRowLengthUnitType)
                         {
                             case GridUnitType.Auto:
                                 row.SetHeightToAuto();
                                 break;
            
                             case GridUnitType.Pixel:
                                 row.SetHeightInPixels(GridRowLength);
                                 break;
            
                             case GridUnitType.Star:
                                 row.SetHeightInStars(GridRowLength);
                                 break;
                         }
                     }
            
                     private void SetGridColumnLength(GridColumn column)
                     {
                         switch (GridColumnLengthUnitType)
                         {
                             case GridUnitType.Auto:
                                 column.SetWidthToAuto();
                                 break;
            
                             case GridUnitType.Pixel:
                                 column.SetWidthInPixels(GridColumnLength);
                                 break;
            
                             case GridUnitType.Star:
                                 column.SetWidthInStars(GridColumnLength);
                                 break;
                         }
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Grid.#ctor">
            <summary>
            Initializes a new grid on the chart.
            </summary>
        </member>
        <member name="M:cAlgo.API.Grid.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new grid on the chart.
            </summary>
            <param name="rowsCount">The rows count.</param>
            <param name="columnsCount">The columns count.</param>
        </member>
        <member name="P:cAlgo.API.Grid.Rows">
            <summary>
            Gets the read only list of the grid rows.
            </summary>
        </member>
        <member name="P:cAlgo.API.Grid.Columns">
            <summary>
            Gets the read only list of the grid columns.
            </summary>
        </member>
        <member name="P:cAlgo.API.Grid.ShowGridLines">
            <summary>
            Defines if the grid lines are visible.
            </summary>
        </member>
        <member name="M:cAlgo.API.Grid.AddChild(cAlgo.API.ControlBase,System.Int32,System.Int32)">
            <summary>
            Adds a child element.
            </summary>
            <param name="child">The child.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:cAlgo.API.Grid.AddChild(cAlgo.API.ControlBase,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="rowSpan">The row span.</param>
            <param name="columnSpan">The column span.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:cAlgo.API.Grid.AddRow">
            <summary>
            Adds a row.
            </summary>
            <returns>GridRow.</returns>
        </member>
        <member name="M:cAlgo.API.Grid.AddColumn">
            <summary>
            Adds a column.
            </summary>
            <returns>GridColumn.</returns>
        </member>
        <member name="M:cAlgo.API.Grid.AddRows(System.Int32)">
            <summary>
            Adds a rows.
            </summary>
            <param name="count">The count.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:cAlgo.API.Grid.AddColumns(System.Int32)">
            <summary>
            Adds columns.
            </summary>
            <param name="count">The count.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:cAlgo.API.Grid.RemoveRowAt(System.Int32)">
            <summary>
            Removes the row.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:cAlgo.API.Grid.RemoveColumnAt(System.Int32)">
            <summary>
            Removes a column.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:cAlgo.API.Grid.CreateGridRow">
            <summary>
            Creates a grid row.
            </summary>
            <returns>SmallGridRow.</returns>
        </member>
        <member name="T:cAlgo.API.GridColumn">
            <summary>
            Represents the column of the grid.
            </summary>
            <seealso cref="T:cAlgo.API.Grid" />
        </member>
        <member name="P:cAlgo.API.GridColumn.Index">
            <summary>
            Gets the grid column index.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridColumn.Width">
            <summary>
            Gets the grid column width.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridColumn.MinWidth">
            <summary>
            Defines the grid column minimum width.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridColumn.MaxWidth">
            <summary>
            Defines the grid column maximum width.
            </summary>
        </member>
        <member name="M:cAlgo.API.GridColumn.SetWidthInPixels(System.Double)">
            <summary>
            Sets the grid column width in pixels.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:cAlgo.API.GridColumn.SetWidthInStars(System.Double)">
            <summary>
            Sets the grid column width in stars.
            </summary>
            <param name="stars">The stars.</param>
        </member>
        <member name="M:cAlgo.API.GridColumn.SetWidthToAuto">
            <summary>
            Sets the grid column width to automatic.
            </summary>
        </member>
        <member name="T:cAlgo.API.GridLength">
            <summary>
            Represents the length of the grid.
            </summary>
            <seealso cref="T:cAlgo.API.Grid" />
        </member>
        <member name="P:cAlgo.API.GridLength.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridLength.UnitType">
            <summary>
            Gets or sets the type of the unit.
            </summary>
        </member>
        <member name="T:cAlgo.API.GridRow">
            <summary>
            Represents the row of the grid.
            </summary>
            <seealso cref="T:cAlgo.API.Grid" />
        </member>
        <member name="P:cAlgo.API.GridRow.Index">
            <summary>
            Gets the grid row index.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridRow.Height">
            <summary>
            Gets the height of the grid row.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridRow.MinHeight">
            <summary>
            Gets or sets the minimum height of the grid row.
            </summary>
        </member>
        <member name="P:cAlgo.API.GridRow.MaxHeight">
            <summary>
            Gets or sets the maximum height of the grid row.
            </summary>
        </member>
        <member name="M:cAlgo.API.GridRow.SetHeightInPixels(System.Double)">
            <summary>
            Sets the height of the grid row in pixels.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:cAlgo.API.GridRow.SetHeightInStars(System.Double)">
            <summary>
            Sets the height of the grid row in stars.
            </summary>
            <param name="stars">The stars.</param>
        </member>
        <member name="M:cAlgo.API.GridRow.SetHeightToAuto">
            <summary>
            Sets the height of the grid row to automatic.
            </summary>
        </member>
        <member name="T:cAlgo.API.GridUnitType">
            <summary>
            Represents the type of the grid unit.
            </summary>
            <seealso cref="T:cAlgo.API.Grid" />
        </member>
        <member name="F:cAlgo.API.GridUnitType.Auto">
            <summary>
            The automatic definition of units for the grid.
            </summary>
        </member>
        <member name="F:cAlgo.API.GridUnitType.Pixel">
            <summary>
            Calculate grid size in pixels.
            </summary>
        </member>
        <member name="F:cAlgo.API.GridUnitType.Star">
            <summary>
            Calculate grid size in stars.
            </summary>
        </member>
        <member name="T:cAlgo.API.Panel">
            <summary>
            Provides a base class for all Panel elements. Use Panel elements to position and arrange child objects.
            </summary>
        </member>
        <member name="M:cAlgo.API.Panel.#ctor">
            <summary>
            Initializes a new instance of the Panel class.
            </summary>
        </member>
        <member name="P:cAlgo.API.Panel.BackgroundColor">
            <summary>
            Gets or sets the color of the panel background.
            </summary>
        </member>
        <member name="P:cAlgo.API.Panel.Children">
            <summary>
            Gets a child elements of this Panel.
            </summary>
            <value>The children.</value>
        </member>
        <member name="M:cAlgo.API.Panel.AddChild(cAlgo.API.ControlBase)">
            <summary>
            Adds the child element.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:cAlgo.API.Panel.RemoveChild(cAlgo.API.ControlBase)">
            <summary>
            Removes the child element.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="T:cAlgo.API.StackPanel">
             <summary>
             Arranges the child element into a single line that can be oriented horizontally or vertically.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use the StackPanel
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class StackPanelSample : Indicator
                 {
                     [Parameter("Panel Orientation", DefaultValue = Orientation.Vertical)]
                     public Orientation PanelOrientation { get; set; }
            
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             BackgroundColor = Color.Gold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Orientation = PanelOrientation
                         };
            
                         for (int i = 0; i &lt; 10; i++)
                         {
                             stackPanel.AddChild(new TextBlock
                             {
                                 Text = "Text",
                                 Margin = 5,
                                 ForegroundColor = Color.Black,
                                 FontWeight = FontWeight.ExtraBold
                             });
                         }
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the StackPanel class.
            </summary>
        </member>
        <member name="P:cAlgo.API.StackPanel.Orientation">
            <summary>
            Gets or sets the StackPanel orientation.
            </summary>
        </member>
        <member name="T:cAlgo.API.WrapPanel">
             <summary>
             Positions the child elements in sequential position from left to right, breaking content to the next line at the end of the containing box, from top to bottom, or from right to left.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use the WrapPanel
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class WrapPanelSample : Indicator
                 {
                     [Parameter("Panel Orientation", DefaultValue = Orientation.Vertical)]
                     public Orientation PanelOrientation { get; set; }
            
                     protected override void Initialize()
                     {
                         var wrapPanel = new WrapPanel
                         {
                             BackgroundColor = Color.Gold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Orientation = PanelOrientation,
                             Width = 150,
                             Height = 150
                         };
            
                         for (int i = 0; i &lt; 10; i++)
                         {
                             wrapPanel.AddChild(new TextBlock
                             {
                                 Text = "Text",
                                 Margin = 5,
                                 ForegroundColor = Color.Black,
                                 FontWeight = FontWeight.ExtraBold
                             });
                         }
            
                         Chart.AddControl(wrapPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the WrapPanel class.
            </summary>
        </member>
        <member name="P:cAlgo.API.WrapPanel.Orientation">
            <summary>
            Gets or sets the orientation of the child element.
            </summary>
        </member>
        <member name="P:cAlgo.API.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of the item.
            </summary>
        </member>
        <member name="P:cAlgo.API.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of the item.
            </summary>
        </member>
        <member name="T:cAlgo.API.ScrollBarVisibility">
            <summary>
            Specifies the visibility of a ScrollBar for scrollable content.
            </summary>
            <seealso cref="T:cAlgo.API.ScrollViewer"/>
        </member>
        <member name="F:cAlgo.API.ScrollBarVisibility.Disabled">
            <summary>
            A ScrollBar does not appear even when the viewport cannot display all of the content.
            </summary>
        </member>
        <member name="F:cAlgo.API.ScrollBarVisibility.Auto">
            <summary>
            A ScrollBar appears and the dimension of the ScrollViewer is applied to the content when the viewport cannot display all of the content.
            </summary>
        </member>
        <member name="F:cAlgo.API.ScrollBarVisibility.Hidden">
            <summary>
            A ScrollBar does not appear even when the viewport cannot display all of the content. The dimension of the ScrollViewer is not applied to the content.
            </summary>
        </member>
        <member name="F:cAlgo.API.ScrollBarVisibility.Visible">
            <summary>
            A ScrollBar always appears. The dimension of the ScrollViewer is applied to the content.
            </summary>
        </member>
        <member name="T:cAlgo.API.Ellipse">
             <summary>
             Represents the ellipse shape.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to draw an ellipse shape on your chart
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class EllipseShapeSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var ellipse = new Ellipse
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Margin = 5,
                             Width = 100,
                             Height = 200,
                             StrokeColor = Color.Black,
                             FillColor = Color.Aqua,
                             StrokeThickness = 2,
                             StrokeStartLineCap = PenLineCap.Square,
                             Left = 100,
                             Top = 50
                         };
            
                         var canvas = new Canvas
                         {
                             BackgroundColor = Color.Gold,
                             Opacity = 0.5
                         };
            
                         canvas.AddChild(ellipse);
            
                         Chart.AddControl(canvas);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.Ellipse" /> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.FillRule">
             <summary>
             Specifies how the intersecting areas of PathFigure objects contained in a Geometry are combined to form the area of the Geometry.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows the use of FillRule
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class FillRuleSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanelNonzero = new StackPanel()
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6,
                         };
            
                         stackPanelNonzero.AddChild(new TextBlock { Text = "Nonzero", ForegroundColor = Color.Black, HorizontalAlignment = HorizontalAlignment.Center, Margin = 10 });
            
                         stackPanelNonzero.AddChild(new Polygon
                         {
                             FillColor = Color.Red,
                             Width = 200,
                             Height = 100,
                             FillRule = FillRule.Nonzero,
                             Margin = 10,
                             Points = new Point[]
                             {
                                 new Point(1, 200),
                                 new Point(50, 30),
                                 new Point(100, 1),
                                 new Point(150, 1),
                                 new Point(100, 10),
                                 new Point(50, 1),
                                 new Point(200, 70),
                                 new Point(300, 90),
                             }
                         });
            
                         stackPanelNonzero.AddChild(new TextBlock { Text = "EvenOdd", ForegroundColor = Color.Black, HorizontalAlignment = HorizontalAlignment.Center, Margin = 10 });
            
                         stackPanelNonzero.AddChild(new Polygon
                         {
                             FillColor = Color.Red,
                             Width = 200,
                             Height = 100,
                             FillRule = FillRule.EvenOdd,
                             Margin = 10,
                             Points = new Point[]
                             {
                                 new Point(1, 200),
                                 new Point(50, 30),
                                 new Point(100, 1),
                                 new Point(150, 1),
                                 new Point(100, 10),
                                 new Point(50, 1),
                                 new Point(200, 70),
                                 new Point(300, 90),
                             }
                         });
            
                         Chart.AddControl(stackPanelNonzero);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.FillRule.EvenOdd">
            <summary>
            Rule that determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction and counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:cAlgo.API.FillRule.Nonzero">
            <summary>
            Rule that determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Line">
             <summary>
             Represents the line shape.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to draw a line shape on your chart
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class LineShapeSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var xCenter = Chart.Width / 2;
                         var yCenter = Chart.Height / 2;
            
                         var line = new Line
                         {
                             X1 = xCenter,
                             X2 = xCenter + 100,
                             Y1 = yCenter,
                             Y2 = yCenter + 100,
                             StrokeColor = Color.Red,
                             StrokeThickness = 2
                         };
            
                         Chart.AddControl(line);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Line.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.Line" /> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Line.X1">
            <summary>
            Gets or sets x-axis point 1 data.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Line.Y1">
            <summary>
            Gets or sets the y-axis point 2 data.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Line.X2">
            <summary>
            Gets or sets the x-axis point 2 data.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Line.Y2">
            <summary>
            Gets or sets the y-axis point 2 data.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.PenLineCap">
             <summary>
             Describes the shape at the end of a line or segment.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use the PenLineCap properties of shapes
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PenLineCapSample : Indicator
                 {
                     [Parameter("Stroke Start Line Cap", DefaultValue = PenLineCap.Flat)]
                     public PenLineCap StrokeStartLineCap { get; set; }
            
                     [Parameter("Stroke End Line Cap", DefaultValue = PenLineCap.Flat)]
                     public PenLineCap StrokeEndLineCap { get; set; }
            
                     [Parameter("Stroke Dash Cap", DefaultValue = PenLineCap.Flat)]
                     public PenLineCap StrokeDashCap { get; set; }
            
                     protected override void Initialize()
                     {
                         var rectangle = new Rectangle
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             StrokeStartLineCap = StrokeStartLineCap,
                             StrokeEndLineCap = StrokeEndLineCap,
                             StrokeDashCap = StrokeDashCap,
                             StrokeColor = Color.Red,
                             StrokeThickness = 4,
                             Width = 200,
                             Height = 100,
                         };
            
                         Chart.AddControl(rectangle);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.PenLineCap.Flat">
            <summary>
            A cap that does not extend past the last point of the line. Comparable to no line cap.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:cAlgo.API.PenLineCap.Square">
            <summary>
            A rectangle that has a height equal to the line thickness and a length equal to half the line thickness.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:cAlgo.API.PenLineCap.Round">
            <summary>
            A semicircle that has a diameter equal to the line thickness.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:cAlgo.API.PenLineCap.Triangle">
            <summary>
            An isosceles right triangle whose base length is equal to the thickness of the line.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.PenLineJoin">
             <summary>
             Describes the shape that joins two lines or segments.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use a shape Stroke Line Join
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PenLineJoinSample : Indicator
                 {
                     [Parameter("Stroke Line Join", DefaultValue = PenLineJoin.Miter)]
                     public PenLineJoin StrokeLineJoin { get; set; }
            
                     protected override void Initialize()
                     {
                         var rectangle = new Rectangle
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             StrokeLineJoin = StrokeLineJoin,
                             StrokeColor = Color.Red,
                             StrokeThickness = 4,
                             Width = 200,
                             Height = 100,
                         };
            
                         Chart.AddControl(rectangle);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.PenLineJoin.Miter">
            <summary>
            Regular angular vertices.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:cAlgo.API.PenLineJoin.Bevel">
            <summary>
            Beveled vertices.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:cAlgo.API.PenLineJoin.Round">
            <summary>
            Rounded vertices.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Point">
            <summary>
            Represents an x- and y-coordinate pair in two-dimensional space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.Point" /> class. 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Point.X">
            <summary>
            Gets or sets the x-coordinate of this Point.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Point.Y">
            <summary>
             Gets or sets the y-coordinate of this Point.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Point.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Point.op_Equality(cAlgo.API.Point,cAlgo.API.Point)">
            <summary>
            Tests whether two specified <see cref='T:cAlgo.API.Point' /> objects are equivalent.
            </summary>
        </member>
        <member name="M:cAlgo.API.Point.op_Inequality(cAlgo.API.Point,cAlgo.API.Point)">
            <summary>
            Tests whether two specified <see cref='T:cAlgo.API.Point' /> objects are equivalent.
            </summary>
        </member>
        <member name="T:cAlgo.API.Polygon">
             <summary>
             Draws a polygon, which is a connected series of lines that form a closed shape.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to draw a Polygon
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PolygonSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         Chart.AddControl(new Polygon
                         {
                             FillColor = Color.Red,
                             Width = 200,
                             Height = 100,
                             Margin = 10,
                             Points = new Point[]
                             {
                                 new Point(100, 100),
                                 new Point(200, 50),
                                 new Point(300, 100),
                                 new Point(100, 100),
                             }
                         });
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.Polygon" /> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Polygon.Points">
            <summary>
            Gets or sets a collection that contains the vertex points of the polygon.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Polygon.FillRule">
            <summary>
            Gets or sets a FillRule enumeration that specifies how the interior fill of the shape is determined.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Polyline">
             <summary>
             Draws a series of connected straight lines.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use Polyline to draw connected lines
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PolylineSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         Chart.AddControl(new Polyline
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             StrokeColor = Color.Red,
                             StrokeThickness = 1,
                             Points = new[]
                             {
                                 new Point(10, 10),
                                 new Point(100,200),
                                 new Point(10, 100),
                                 new Point(10, 10),
                             }
                         });
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.Polyline" /> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Polyline.Points">
            <summary>
            Gets or sets a collection that contains the vertex points of the Polyline.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Polyline.FillRule">
            <summary>
            Gets or sets a FillRule enumeration that specifies how the interior fill of the shape is determined.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Rectangle">
             <summary>
             Represents the rectangle.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use the Rectangle shape which is a chart control
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class RectangleShapeSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6
                         };
            
                         var rectangle = new Rectangle
                         {
                             StrokeColor = Color.Blue,
                             FillColor = Color.Red,
                             StrokeThickness = 2,
                             Margin = 10,
                             Width = 300,
                             Height = 100
                         };
            
                         stackPanel.AddChild(rectangle);
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Rectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.Rectangle" /> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Rectangle.RadiusX">
            <summary>
            Gets or sets the x-axis radius of the ellipse that is used to round the corners of the rectangle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Rectangle.RadiusY">
            <summary>
            Gets or sets the y-axis radius of the ellipse that is used to round the corners of the rectangle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Shape">
            <summary>
            Provides the base class for shape elements, such as  <see cref="T:cAlgo.API.Ellipse"  />,  <see cref="T:cAlgo.API.Polygon"  />, and  <see cref="T:cAlgo.API.Rectangle"  />.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Shape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.Shape" /> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.StrokeColor">
            <summary>
            Gets or sets the stroke color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.FillColor">
            <summary>
            Gets or sets the fill color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.Stretch">
            <summary>
            Gets or sets the stretch value.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.StrokeEndLineCap">
            <summary>
            Gets or sets the shape at the end of a line.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.StrokeStartLineCap">
            <summary>
            Gets or sets the shape at the beginning of a line.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.StrokeLineJoin">
            <summary>
            Gets or sets the shape that joins two lines.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.StrokeMiterLimit">
            <summary>
            Gets or sets a limit on the ratio of the miter length to half the StrokeThickness of a Shape element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.StrokeDashArray">
            <summary>
            Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that is used to outline shapes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.StrokeDashOffset">
            <summary>
            Gets or sets a Double that specifies the distance within the dash pattern where a dash begins.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Shape.StrokeDashCap">
            <summary>
            Gets or sets a PenLineCap enumeration value that specifies how the ends of a dash are drawn.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Stretch">
             <summary>
             Describes how content is resized to fill its allocated space.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use shapes stretch property
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class StretchSample : Indicator
                 {
                     [Parameter("Stretch", DefaultValue = Stretch.Uniform)]
                     public Stretch Stretch { get; set; }
            
                     protected override void Initialize()
                     {
                         var rectangle = new Rectangle
                         {
                             Stretch = Stretch,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Height = 100,
                             Width = 200,
                             FillColor = Color.Blue,
                             StrokeColor = Color.Red,
                             Opacity = 0.7,
                         };
            
                         Chart.AddControl(rectangle);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.Stretch.None">
            <summary>
            The content preserves its original size.
            </summary>
        </member>
        <member name="F:cAlgo.API.Stretch.Fill">
            <summary>
            The content is resized to fill the destination dimensions. The aspect ratio is not preserved.
            </summary>
        </member>
        <member name="F:cAlgo.API.Stretch.Uniform">
            <summary>
            The content is resized to fit in the destination dimensions while it preserves its native aspect ratio.
            </summary>
        </member>
        <member name="F:cAlgo.API.Stretch.UniformToFill">
            <summary>
            The content is resized to fill the destination dimensions while it preserves its native aspect ratio. If the aspect ratio of the destination rectangle differs from the source, the source content is clipped to fit in the destination dimensions.
            </summary>
        </member>
        <member name="T:cAlgo.API.StretchDirection">
             <summary>
             Describes how scaling applies to content and restricts scaling to named axis types.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use the StretchDirection
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class StretchDirectionSample : Indicator
                 {
                     [Parameter("Stretch Direction", DefaultValue = StretchDirection.UpOnly)]
                     public StretchDirection StretchDirection { get; set; }
            
                     protected override void Initialize()
                     {
                         var image = new Image
                         {
                             Source = Properties.Resources.ctrader_logo,
                             Width = 200,
                             Height = 200,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             StretchDirection = StretchDirection
                         };
            
                         Chart.AddControl(image);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.StretchDirection.UpOnly">
            <summary>
            The content scales upward only when it is smaller than the parent. If the content is larger, no scaling downward is performed.
            </summary>
        </member>
        <member name="F:cAlgo.API.StretchDirection.DownOnly">
            <summary>
            The content scales downward only when it is larger than the parent. If the content is smaller, no scaling upward is performed.
            </summary>
        </member>
        <member name="F:cAlgo.API.StretchDirection.Both">
            <summary>
            The content stretches to fit the parent according to the Stretch mode.
            </summary>
        </member>
        <member name="T:cAlgo.API.Style">
             <summary>
             Represents the style of a chart control.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use control style to change a group of controls style instead of setting each control properties separatly
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class StyleSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var style = new Style();
            
                         style.Set(ControlProperty.Margin, 5);
                         style.Set(ControlProperty.ForegroundColor, Color.Blue);
                         style.Set(ControlProperty.FontSize, 14);
                         style.Set(ControlProperty.Width, 100);
            
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Orientation = Orientation.Vertical
                         };
            
                         for (var i = 0; i &lt; 10; i++)
                         {
                             stackPanel.AddChild(new TextBlock
                             {
                                 Text = "Textr Block #" + i,
                                 Style = style
                             });
                         }
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Style.#ctor">
            <summary>
            Initializes a new instance of Style class.
            </summary>
        </member>
        <member name="M:cAlgo.API.Style.#ctor(cAlgo.API.Style)">
            <summary>
            Represents the parent style to be inherited by a desired style.
            </summary>
            <param name="parentStyle"></param>
        </member>
        <member name="M:cAlgo.API.Style.Set(cAlgo.API.ControlProperty,System.Object,cAlgo.API.ControlState)">
            <summary>
            Provides data for the chart control Style for the specified ControlProperty and the ControlState.
            </summary>
            <param name="state"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:cAlgo.API.Style.Set(cAlgo.API.ControlProperty,System.Object)">
            <summary>
            Sets the chart control Style for the specified ControlProperty.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:cAlgo.API.Style.Get(cAlgo.API.ControlProperty)">
            <summary>
            Gets the chart object style for the specified ControlProperty.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Style.Get(cAlgo.API.ControlProperty,cAlgo.API.ControlState)">
            <summary>
            Gets the chart control style for the specified ControlProperty and ControlState.
            </summary>
            <param name="state"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:cAlgo.API.TextAlignment">
             <summary>
             The text alignment regarding the anchor point.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use TextAlignment property to align the text
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TextAlignmentSample : Indicator
                 {
                     [Parameter("Text Alignment", DefaultValue = TextAlignment.Center)]
                     public TextAlignment TextAlignment { get; set; }
            
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             BackgroundColor = Color.Gold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Opacity = 0.6,
                             Width = 200
                         };
            
                         stackPanel.AddChild(new TextBlock { Text = "Sample text", TextAlignment = TextAlignment });
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.TextAlignment.Left">
            <summary>
            Align the text left.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextAlignment.Right">
            <summary>
            Align the text right.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextAlignment.Center">
            <summary>
            Center the text vertically.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextAlignment.Justify">
            <summary>
            Justify the text.
            </summary>
        </member>
        <member name="T:cAlgo.API.TextTrimming">
             <summary>
             Describes how text is trimmed when it overflows the edge of its containing box.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use TextTrimming property to manage the text trim
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TextTrimmingSample : Indicator
                 {
                     [Parameter("Text", DefaultValue = "very long texttttttttttttttttttttt")]
                     public string Text { get; set; }
            
                     [Parameter("Trimming", DefaultValue = TextTrimming.CharacterEllipsis)]
                     public TextTrimming TextTrimming { get; set; }
            
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             BackgroundColor = Color.Gold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Opacity = 0.6,
                             Width = 100
                         };
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = Text,
                             FontWeight = FontWeight.ExtraBold,
                             ForegroundColor = Color.Blue,
                             TextTrimming = TextTrimming
                         });
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.TextTrimming.None">
            <summary>
            Text is not trimmed.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextTrimming.CharacterEllipsis">
            <summary>
            Text is trimmed at a character boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextTrimming.WordEllipsis">
            <summary>
            Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="T:cAlgo.API.TextWrapping">
             <summary>
             Specifies whether text wraps when it reaches the edge of the containing box.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use TextWrapping property to manage the text wrap
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TextWrappingSample : Indicator
                 {
                     [Parameter("Text", DefaultValue = "very long texttttttttttttttttttttt")]
                     public string Text { get; set; }
            
                     [Parameter("Wrapping", DefaultValue = TextWrapping.NoWrap)]
                     public TextWrapping TextWrapping { get; set; }
            
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             BackgroundColor = Color.Gold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             Opacity = 0.6,
                             Width = 100
                         };
            
                         stackPanel.AddChild(new TextBlock
                         {
                             Text = Text,
                             FontWeight = FontWeight.ExtraBold,
                             ForegroundColor = Color.Blue,
                             TextWrapping = TextWrapping
                         });
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.TextWrapping.WrapWithOverflow">
            <summary>
            Line-breaking occurs if the line overflows beyond the available block width. However, a line may overflow beyond the block width if the line breaking algorithm cannot determine a line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextWrapping.NoWrap">
            <summary>
            No line wrapping is performed.
            </summary>
        </member>
        <member name="F:cAlgo.API.TextWrapping.Wrap">
            <summary>
            Line-breaking occurs if the line overflows beyond the available block width, even if the standard line breaking algorithm cannot determine any line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed.
            </summary>
        </member>
        <member name="T:cAlgo.API.Thickness">
             <summary>
             Defines the thickness of the frame around the rectangle.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use Thickness for defining a chart control margin
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ThicknessSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6
                         };
            
                         var rectangle = new Rectangle
                         {
                             StrokeColor = Color.Blue,
                             FillColor = Color.Red,
                             StrokeThickness = 2,
                             Margin = new Thickness(10, 5, 10, 5),
                             Width = 300,
                             Height = 100,
                         };
            
                         stackPanel.AddChild(rectangle);
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.Thickness" /> structure.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Thickness.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:cAlgo.API.Thickness" /> structure.
            </summary>
            <param name="uniformLength"></param>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Thickness.Top">
            <summary>
            Gets or sets the thickness of the top side of the retangle.
            </summary>
        </member>
        <member name="P:cAlgo.API.Thickness.Left">
            <summary>
            Gets or sets the thickness of the left side of the retangle.
            </summary>
        </member>
        <member name="P:cAlgo.API.Thickness.Bottom">
            <summary>
            Gets or sets the thickness of the bottom side of the retangle.
            </summary>
        </member>
        <member name="P:cAlgo.API.Thickness.Right">
            <summary>
            Gets or sets the thickness of the right side of the retangle.
            </summary>
        </member>
        <member name="M:cAlgo.API.Thickness.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.Thickness.Equals(System.Object)">
            <summary>
            Defines whether the specified object is equal to this instance.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.Thickness.op_Implicit(System.Double)~cAlgo.API.Thickness">
            <summary>
            Initializes a new instance of the Thickness structure that has the specified uniform on each side.
            </summary>
            <param name="uniform"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Thickness.op_Implicit(System.String)~cAlgo.API.Thickness">
            <summary>
            Returns the string representation of the Thickness structure.
            </summary>
            <param name="thickness"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Thickness.op_Equality(cAlgo.API.Thickness,cAlgo.API.Thickness)">
            <summary>Compares the value of two <see cref="T:cAlgo.API.Thickness" /> structures for equality.</summary>
            <param name="t1">The first structure to compare.</param>
            <param name="t2">The other structure to compare.</param>
            <returns>
            <see langword="true" /> if the two instances of <see cref="T:cAlgo.API.Thickness" /> are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:cAlgo.API.Thickness.op_Inequality(cAlgo.API.Thickness,cAlgo.API.Thickness)">
            <summary>Compares two <see cref="T:cAlgo.API.Thickness" /> structures for inequality. </summary>
            <param name="t1">The first structure to compare.</param>
            <param name="t2">The other structure to compare.</param>
            <returns>
            <see langword="true" /> if the two instances of <see cref="T:cAlgo.API.Thickness" /> are not equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:cAlgo.API.ChartDisplaySettings">
             <summary>
             Represents the chart display settings.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // You can use this sample indicator to change some of the chart display settings via chart controls
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartDisplaySettingsSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stackPanel = new StackPanel
                         {
                             HorizontalAlignment = HorizontalAlignment.Left,
                             VerticalAlignment = VerticalAlignment.Bottom,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.7,
                             Margin = 5,
                             Orientation = Orientation.Vertical
                         };
            
                         var askPriceLineCheckBox = new CheckBox
                         {
                             Text = "Ask Price Line",
                             Margin = 5,
                             IsChecked = Chart.DisplaySettings.AskPriceLine
                         };
            
                         askPriceLineCheckBox.Click += args => Chart.DisplaySettings.AskPriceLine = args.CheckBox.IsChecked.Value;
            
                         stackPanel.AddChild(askPriceLineCheckBox);
            
                         var bidPriceLineCheckBox = new CheckBox
                         {
                             Text = "Bid Price Line",
                             Margin = 5,
                             IsChecked = Chart.DisplaySettings.BidPriceLine
                         };
            
                         bidPriceLineCheckBox.Click += args => Chart.DisplaySettings.BidPriceLine = args.CheckBox.IsChecked.Value;
            
                         stackPanel.AddChild(bidPriceLineCheckBox);
            
                         var chartScaleCheckBox = new CheckBox
                         {
                             Text = "Chart Scale",
                             Margin = 5,
                             IsChecked = Chart.DisplaySettings.ChartScale
                         };
            
                         chartScaleCheckBox.Click += args => Chart.DisplaySettings.ChartScale = args.CheckBox.IsChecked.Value;
            
                         stackPanel.AddChild(chartScaleCheckBox);
            
                         var dealMapCheckBox = new CheckBox
                         {
                             Text = "Deal Map",
                             Margin = 5,
                             IsChecked = Chart.DisplaySettings.DealMap
                         };
            
                         dealMapCheckBox.Click += args => Chart.DisplaySettings.DealMap = args.CheckBox.IsChecked.Value;
            
                         stackPanel.AddChild(dealMapCheckBox);
            
                         var gridCheckBox = new CheckBox
                         {
                             Text = "Grid",
                             Margin = 5,
                             IsChecked = Chart.DisplaySettings.Grid
                         };
            
                         gridCheckBox.Click += args => Chart.DisplaySettings.Grid = args.CheckBox.IsChecked.Value;
            
                         stackPanel.AddChild(gridCheckBox);
            
                         var volumeCheckBox = new CheckBox
                         {
                             Text = "Volume",
                             Margin = 5,
                             IsChecked = Chart.DisplaySettings.TickVolume
                         };
            
                         volumeCheckBox.Click += args => Chart.DisplaySettings.TickVolume = args.CheckBox.IsChecked.Value;
            
                         stackPanel.AddChild(volumeCheckBox);
            
                         Chart.AddControl(stackPanel);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.Positions">
            <summary>
            Defines if the Positions are displayed on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.Orders">
            <summary>
            Defines if the Orders are displayed on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.BidPriceLine">
            <summary>
            Defines if the Bid Price Line is displayed on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.AskPriceLine">
            <summary>
            Defines if the Ask Price Line is displayed on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.Grid">
            <summary>
            Defines if the Grid is displayed on the chart background.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.PeriodSeparators">
            <summary>
            Defines if the Period Separators are displayed on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.TickVolume">
            <summary>
            Defines if the Tick Volume is displayed on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.DealMap">
            <summary>
            Defines if the Deal Map is displayed on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.ChartScale">
            <summary>
            Defines if the Chart Scale is displayed on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.PriceAxisOverlayButtons">
            <summary>
            Defines if the price axis overlays buttons are visible on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.PriceAlerts">
            <summary>
            Defines if the Price Alerts are visible on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.MarketSentiment">
            <summary>
            Defines if the Market Sentiment is visible on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.Targets">
            <summary>
            Defines if the Target is visible on the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettings.QuickTradeButtons">
            <summary>
            Defines if the QuickTrade buttons are visible on the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartAndrewsPitchfork">
             <summary>
             Represents the Andrew's Pitchfork chart object. A tool that helps to identify possible support and resistance levels with the three parallel lines.
             </summary>
             <seealso cref="T:cAlgo.API.ChartObject" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This indicator shows how to draw an Andrews Pitchfork by using Chart.DrawAndrewsPitchfork method
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class AndrewsPitchforkSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var barIndex1 = Chart.FirstVisibleBarIndex;
                         var barIndex2 = Chart.FirstVisibleBarIndex + ((Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex) / 5);
                         var barIndex3 = Chart.FirstVisibleBarIndex + ((Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex) / 2);
            
                         var y1 = Bars.ClosePrices[barIndex1];
                         var y2 = Bars.ClosePrices[barIndex2];
                         var y3 = Bars.ClosePrices[barIndex3];
            
                         var andrewsPitchfork = Chart.DrawAndrewsPitchfork("AndrewsPitchfork", barIndex1, y1, barIndex2, y2, barIndex3, y3, Color.Red);
            
                         andrewsPitchfork.IsInteractive = true;
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Time1">
            <summary>
            Gets or sets the time value for the Andrew's Pitchfork point 1.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Time2">
            <summary>
            Gets or sets the time value for the Andrew's Pitchfork point 2.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Time3">
            <summary>
            Gets or sets the time value for the Andrew's Pitchfork point 3.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Y1">
            <summary>
            Gets or sets the Y-axis value for the Andrew's Pitchfork point 1.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Y2">
            <summary>
            Gets or sets the Y-axis value for the Andrew's Pitchfork point 2.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Y3">
            <summary>
            Gets or sets the Y-axis value for the Andrew's Pitchfork point 3.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Thickness">
            <summary>
            Gets or sets the chart object lines thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.Color">
            <summary>
            Gets or sets the chart object lines color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartAndrewsPitchfork.LineStyle">
            <summary>
            Gets or sets the chart object lines style.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartDrawing">
            <summary>
            Represents the Drawing chart object.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartEllipse">
             <summary>
             Represent the Ellipse chart object.
             </summary>
             <seealso cref="T:cAlgo.API.ChartShape" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator draw an ellipse on chart
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartEllipseSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         Draw();
                     }
            
                     public override void Calculate(int index)
                     {
                         Draw();
                     }
            
                     private void Draw()
                     {
                         var y1 = Bars.HighPrices[Chart.FirstVisibleBarIndex] &gt; Bars.HighPrices[Chart.LastVisibleBarIndex] ? Bars.HighPrices[Chart.FirstVisibleBarIndex] : Bars.HighPrices[Chart.LastVisibleBarIndex];
            
                         var y2 = Bars.LowPrices[Chart.FirstVisibleBarIndex] &lt; Bars.LowPrices[Chart.LastVisibleBarIndex] ? Bars.LowPrices[Chart.FirstVisibleBarIndex] : Bars.LowPrices[Chart.LastVisibleBarIndex];
            
                         var ellipse = Chart.DrawEllipse("ellipse", Chart.FirstVisibleBarIndex, y1, Chart.LastVisibleBarIndex, y2, Color.FromArgb(50, Color.Red.R, Color.Red.G, Color.Red.B));
            
                         ellipse.IsFilled = true;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartEllipse.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEllipse.Time2">
             <summary>
            Gets or sets the value 2 on the Time line.
             </summary>
        </member>
        <member name="P:cAlgo.API.ChartEllipse.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEllipse.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartEquidistantChannel">
             <summary>
             Represents the Equidistant Channel chart object. The tool that allows drawing two precisely parallel lines in any direction on the chart.
             </summary>
             <seealso cref="T:cAlgo.API.ChartObject" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // A sample indicator for showing how to use Chart.DrawEquidistantChannel method
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class EquidistantChannelSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var channel = Chart.DrawEquidistantChannel("EquidistantChannel", Chart.FirstVisibleBarIndex, Bars.LowPrices[Chart.FirstVisibleBarIndex], Chart.LastVisibleBarIndex, Bars.HighPrices[Chart.LastVisibleBarIndex], 20 * Symbol.PipSize, Color.Red);
            
                         channel.IsInteractive = true;
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.ChannelHeight">
            <summary>
            Gets or sets the height of the Equidistant Channel.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Thickness">
            <summary>
            Gets or sets the Equidistant Channel line thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.LineStyle">
            <summary>
            Gets or sets the Equidistant channel line style.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.Color">
            <summary>
            Gets or sets the Equidistant Channel line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.ShowAngle">
            <summary>
            Gets or sets the Equidistant Channel angle.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartEquidistantChannel.ExtendToInfinity">
            <summary>
            Defines if the Equidistant channel extends to infinity.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartFibonacciBase">
            <summary>
            Represents the Fibonacci tools options.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.FibonacciLevels">
            <summary>
            Gets the Fibonacci levels.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.DisplayPrices">
            <summary>
            Defines if the Fibonacci levels display the prices
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.Thickness">
            <summary>
            Gets or sets the lines thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.Color">
            <summary>
            Gets or sets the lines color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciBase.LineStyle">
            <summary>
            Gets or sets the lines style.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartFibonacciExpansion">
             <summary>
             Represents the Fibonacci Expansion chart object.
             </summary>
             <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // A sample indicator for showing how to use the Chart.DrawFibonacciExpansion method
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class FibonacciExpansionSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var period = Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex;
            
                         var fibonacciExpansion = Chart.DrawFibonacciExpansion("fibonacciExpansion", Chart.FirstVisibleBarIndex, Bars.LowPrices[Chart.FirstVisibleBarIndex], Chart.FirstVisibleBarIndex, Bars.LowPrices.Minimum(period), Chart.LastVisibleBarIndex, Bars.HighPrices.Maximum(period), Color.Red);
            
                         fibonacciExpansion.IsInteractive = true;
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Time3">
            <summary>
            Gets or sets the value 3 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciExpansion.Y3">
            <summary>
            Gets or sets the value 3 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartFibonacciFan">
             <summary>
             Represents the Fibonacci Fan chart object.
             </summary>
             <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use Chart.DrawFibonacciFan method to draw a Fibonacci Fan
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class FibonacciFanSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         Chart.DrawFibonacciFan("Fan", Chart.FirstVisibleBarIndex, Bars.ClosePrices[Chart.FirstVisibleBarIndex], Chart.LastVisibleBarIndex, Bars.ClosePrices[Chart.LastVisibleBarIndex], Color.Red);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciFan.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciFan.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciFan.Y1">
            <summary>
             Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciFan.Y2">
            <summary>
             Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartFibonacciRetracement">
             <summary>
             Represents the Fibonacci Retracement chart object.
             </summary>
             <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This indicator shows how to use the Chart.DrawFibonacciRetracement method to draw a Fibonacci Retracement
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class FibonacciRetracementSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var period = Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex;
            
                         var max = Bars.HighPrices.Maximum(period);
                         var min = Bars.LowPrices.Minimum(period);
            
                         Chart.DrawFibonacciRetracement("FibonacciRetracement", Chart.FirstVisibleBarIndex, max, Chart.LastVisibleBarIndex, min, Color.Red);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciRetracement.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciRetracement.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciRetracement.Y1">
            <summary>
             Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartFibonacciRetracement.Y2">
            <summary>
             Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartHorizontalLine">
             <summary>
             Represents the Horizontal Line chart object. Used to mark a certain value on the Y-axis throughout the whole chart.
             </summary>
             <seealso cref="T:cAlgo.API.ChartObject" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use Chart.DrawHorizontalLine method to draw an horizontal line
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class HorizontalLineSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         Chart.DrawHorizontalLine("horizontalLine", Bars.ClosePrices.LastValue, Color.Red);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartHorizontalLine.Y">
            <summary>
            Gets or sets the Y-axis value of the line location.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartHorizontalLine.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartHorizontalLine.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartHorizontalLine.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartIcon">
             <summary>
             Represents the Icon chart object.
             </summary>
             <seealso cref="T:cAlgo.API.ChartObject" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use Chart.DrawIcon method to draw icons
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartIconSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         for (int i = Chart.FirstVisibleBarIndex; i &lt;= Chart.LastVisibleBarIndex; i++)
                         {
                             var iconName = string.Format("Icon_{0}", i);
            
                             if (Bars.ClosePrices[i] > Bars.OpenPrices[i])
                             {
                                 Chart.DrawIcon(iconName, ChartIconType.UpArrow, i, Bars.LowPrices[i], Color.Green);
                             }
                             else
                             {
                                 Chart.DrawIcon(iconName, ChartIconType.DownArrow, i, Bars.HighPrices[i], Color.Red);
                             }
                         }
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartIcon.IconType">
            <summary>
            Gets or sets the type of the icon.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartIcon.Time">
            <summary>
            Gets or sets the Time value of the icon location.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartIcon.Y">
            <summary>
            Gets or sets the Y-axis value of the icon location.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartIcon.Color">
            <summary>
            Gets or sets the color of the icon.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartIconType">
            <summary>
            Represents the type of the Icon.
            </summary>
            <seealso cref="T:cAlgo.API.ChartIcon" />
        </member>
        <member name="F:cAlgo.API.ChartIconType.UpArrow">
            <summary>
            The Up Arrow icon.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.DownArrow">
            <summary>
            The Down Arrow icon.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.Circle">
            <summary>
            The Circle icon.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.Square">
            <summary>
            The Square icon.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.Diamond">
            <summary>
            The Diamond icon.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.Star">
            <summary>
            The Star icon.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.UpTriangle">
            <summary>
            The Up Triangle icon.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartIconType.DownTriangle">
            <summary>
            The Down Triangle icon.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObject">
            <summary>
            Represents the chart object.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.Name">
            <summary>
            Gets the chart object name - the unique identifier for the object in the current chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.Comment">
            <summary>
            Gets or sets the comment for the chart object.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:cAlgo.API.ChartObject.ObjectType">
            <summary>
            Gets the chart object type.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.IsInteractive">
            <summary>
            Defines whether the instance is interactive. The non-interactive chart objects cannot be selected, have no hover effect and cannot be searched. Available only for the current cBot or Indicator and will be removed when the cBot/Indicator stops.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.ZIndex">
            <summary>
            Gets or sets the location of a chart object on the Z-axis in respect to the other chart objects.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObject.IsAlive">
            <summary>
            Defines if the chart object still exists on the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectType">
            <summary>
            The chart object types.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.HorizontalLine">
            <summary>
            The horizontal line. The line parallel to the X-axis that can be set on any Y-axis value.  
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.VerticalLine">
            <summary>
            The vertical line. The line parallel to the Y-axis that can be set on any X-axis value. used to mark certain time event or chart bar on the chart.TBD
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.TrendLine">
            <summary>
            The trend line. The line with the start and end points that can be drawn in any direction on the chart.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Text">
            <summary>
            The text that can be placed directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.StaticText">
            <summary>
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Icon">
            <summary>
            The icon. The collection of icons that can be placed directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.FibonacciRetracement">
            <summary>
            The Fibonacci Retracement that can be placed directly in the chart, bound to X-Y axises. - a charting technique that uses the Fibonacci ratios to indicate the areas of support or resistance.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.FibonacciExpansion">
            <summary>
            The Fibonacci Expansion that can be placed directly in the chart, bound to X-Y axises. - a charting technique used to plot possible levels of support and resistance by tracking not only the primary trend but also the retracement.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.FibonacciFan">
            <summary>
            The Fibonacci Fan that can be placed directly in the chart, bound to X-Y axises. a charting technique used to estimate support and resistance levels by drawing the new trend lines based on the Fibonacci Retracement levels.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.AndrewsPitchfork">
            <summary>
            The Andrews Pitchfork that can be placed directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Rectangle">
            <summary>
            The rectangle of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Ellipse">
            <summary>
            The ellipse of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Triangle">
            <summary>
            The triangle of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.EquidistantChannel">
            <summary>
            The equidistant channel that can be placed directly in the chart, bound to X-Y axises.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartObjectType.Drawing">
            <summary>
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartRectangle">
             <summary>
             Represents the Rectangle chart object. A rectangle of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
             </summary>
             <seealso cref="T:cAlgo.API.ChartShape" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use Chart.DrawRectangle method to draw a rectangle
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartRectangleSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var period = Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex;
            
                         var rectangle = Chart.DrawRectangle("rectangle_sample", Chart.FirstVisibleBarIndex, Bars.LowPrices.Minimum(period), Chart.LastVisibleBarIndex, Bars.HighPrices.Maximum(period), Color.FromArgb(100, Color.Red));
            
                         rectangle.IsFilled = true;
                         rectangle.IsInteractive = true;
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartRectangle.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartRectangle.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartRectangle.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartRectangle.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartShape">
            <summary>
            Represents the Shape chart object. Allows drawing a Rectangle, a Triangle, and an Ellipse on the chart.
            </summary>
            <seealso cref="T:cAlgo.API.ChartObject" />
        </member>
        <member name="P:cAlgo.API.ChartShape.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartShape.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartShape.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartShape.IsFilled">
            <summary>
            Defines if the shape is filled.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartStaticText">
             <summary>
             Represents the chart static text.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using System.Text;
            
             namespace cAlgo
             {
                 // This sample shows how to use Chart.DrawStaticText method to draw static locked text on chart
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartStaticTextSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var stringBuilder = new StringBuilder();
            
                         stringBuilder.AppendLine("Symbol: " + SymbolName);
                         stringBuilder.AppendLine("TimeFrame: " + TimeFrame);
                         stringBuilder.AppendLine("Chart Type: " + Chart.ChartType);
            
                         Chart.DrawStaticText("Static_Sample", stringBuilder.ToString(), VerticalAlignment.Bottom, HorizontalAlignment.Left, Color.Red);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartStaticText.Color">
            <summary>
            Gets or sets the chart static text color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartStaticText.Text">
            <summary>
            Gets or sets the chart static text content.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartStaticText.VerticalAlignment">
            <summary>
            Gets or sets the chart static text vertical alignment.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartStaticText.HorizontalAlignment">
            <summary>
            Gets or sets the chart static text horizontal alignment.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartText">
             <summary>
             Represents the Text chart object. Allows place the text anywhere on the chart, bound to the chart.
             </summary>
             <seealso cref="T:cAlgo.API.ChartObject" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use Chart.DrawText method to draw text
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartTextSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         for (int iBarIndex = Chart.FirstVisibleBarIndex; iBarIndex &lt;= Chart.LastVisibleBarIndex; iBarIndex++)
                         {
                             string text;
            
                             double y;
            
                             Color color;
            
                             if (Bars.ClosePrices[iBarIndex] > Bars.OpenPrices[iBarIndex])
                             {
                                 text = "U";
                                 y = Bars.LowPrices[iBarIndex];
                                 color = Color.Green;
                             }
                             else
                             {
                                 text = "D";
                                 y = Bars.HighPrices[iBarIndex];
                                 color = Color.Red;
                             }
            
                             Chart.DrawText("Text_" + iBarIndex, text, iBarIndex, y, color);
                         }
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartText.Time">
            <summary>
            Gets or sets the Time line value.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.Y">
            <summary>
            Gets or sets the Y-axis value.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.Color">
            <summary>
            Gets or sets the text color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.Text">
            <summary>
            Gets or sets the text content.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text regarding the anchor point.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartText.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text regarding the anchor point.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartTrendLine">
             <summary>
             Represents the Trend Line chart object. A straight line that can be drawn from point 1 to the point 2 in any direction to mark the trends on the chart.
             </summary>
             <seealso cref="T:cAlgo.API.ChartObject" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use Chart.DrawTrendLine to draw a trend line on chart
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartTrendLineSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var trendLine = Chart.DrawTrendLine("trendLine", Chart.FirstVisibleBarIndex, Bars.LowPrices[Chart.FirstVisibleBarIndex], Chart.LastVisibleBarIndex, Bars.HighPrices[Chart.LastVisibleBarIndex], Color.Red, 2, LineStyle.Dots);
            
                         trendLine.IsInteractive = true;
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Color">
            <summary>
            Gets or sets the color of the Trend Line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.Thickness">
            <summary>
            Gets or sets the thickness of the Trend Line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.LineStyle">
            <summary>
            Gets or sets the Trend Line style.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.ShowAngle">
            <summary>
            Defines the trend line angle.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTrendLine.ExtendToInfinity">
            <summary>
            Defines if the Trend Line extends to infinity.
            </summary>
        </member>
        <member name="M:cAlgo.API.ChartTrendLine.CalculateY(System.Int32)">
            <summary>
            Calculates Y-axis value corresponding the specified bar index.
            </summary>
            <param name="barIndex">Index of the bar.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:cAlgo.API.ChartTrendLine.CalculateY(System.DateTime)">
            <summary>
            Calculates Y-axis value corresponding the specified time value.
            </summary>
            <param name="time">The time.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:cAlgo.API.ChartTriangle">
             <summary>
             Represents the Triangle chart object.
             </summary>
             <seealso cref="T:cAlgo.API.ChartShape" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to draw a triangle on chart with Chart.DrawTriangle method
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartTriangleSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var x1 = Chart.FirstVisibleBarIndex;
                         var x2 = Chart.FirstVisibleBarIndex + ((Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex) / 2);
                         var x3 = Chart.LastVisibleBarIndex;
            
                         var y1 = Bars.LowPrices[x1];
                         var y2 = Bars.LowPrices.Minimum(Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex);
                         var y3 = Bars.HighPrices[x3];
            
                         var triangle = Chart.DrawTriangle("triangle_sample", x1, y1, x2, y2, x3, y3, Color.FromArgb(100, Color.Red), 2, LineStyle.Dots);
            
                         triangle.IsInteractive = true;
                         triangle.IsFilled = true;
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Time1">
            <summary>
            Gets or sets the value 1 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Time2">
            <summary>
            Gets or sets the value 2 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Time3">
            <summary>
            Gets or sets the value 3 on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Y1">
            <summary>
            Gets or sets the value 1 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Y2">
            <summary>
            Gets or sets the value 2 on the Y-axis.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartTriangle.Y3">
            <summary>
            Gets or sets the value 3 on the Y-axis.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartVerticalLine">
             <summary>
             Represents the Vertical Line chart object. The line parallel to the Y-axis that can be set on a certain time value on the X-axis.
             </summary>
             <seealso cref="T:cAlgo.API.ChartObject" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to draw a vertical line on chart by using Chart.DrawVertical line method
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChartVerticalLineSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var verticalLine = Chart.DrawVerticalLine("vertical_line", Chart.LastVisibleBarIndex, Color.Red, 2, LineStyle.DotsRare);
            
                         verticalLine.IsInteractive = true;
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.ChartVerticalLine.Time">
            <summary>
            Gets or sets the value on the Time line.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartVerticalLine.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartVerticalLine.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartVerticalLine.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="T:cAlgo.API.FibonacciLevel">
             <summary>
             Represents the Fibonacci Level.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use a chart Fibonacci Retracement levels property to modify the fibonacci levels
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class FibonacciLevelSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var period = Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex;
            
                         var max = Bars.HighPrices.Maximum(period);
                         var min = Bars.LowPrices.Minimum(period);
            
                         var fibonacciRetracement = Chart.DrawFibonacciRetracement("FibonacciRetracement", Chart.FirstVisibleBarIndex, max, Chart.LastVisibleBarIndex, min, Color.Red);
            
                         foreach (var level in fibonacciRetracement.FibonacciLevels)
                         {
                             Print(level.PercentLevel);
            
                             if (level.PercentLevel > 62) level.IsVisible = false;
                         }
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.FibonacciLevel.PercentLevel">
            <summary>
            Gets or sets the percent level.
            </summary>
        </member>
        <member name="P:cAlgo.API.FibonacciLevel.IsVisible">
            <summary>
            Defines if the level is visible.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartType">
            <summary>
            Represents the predefined chart types.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="F:cAlgo.API.ChartType.Bars">
            <summary>
            The Bar chart.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartType.Candlesticks">
            <summary>
            The Candlestick chart.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartType.Line">
            <summary>
            The Line chart.
            </summary>
        </member>
        <member name="F:cAlgo.API.ChartType.Dots">
            <summary>
            The Dots chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.Color">
             <summary>
             Represents an ARGB (alpha, red, green, blue) color.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to parse a string to color and use it in your code
                 // You can use both Hex color codes and color names for Color Code parameter
                 [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ColorSample : Indicator
                 {
                     [Parameter("Color Code", DefaultValue = "#168565")]
                     public string ColorCodeParameter { get; set; }
            
                     [Parameter("Color Alpha", DefaultValue = 100, MinValue = 0, MaxValue = 255)]
                     public int ColorAlphaParameter { get; set; }
            
                     protected override void Initialize()
                     {
                         Chart.ColorSettings.BackgroundColor = ParseColor(ColorCodeParameter, ColorAlphaParameter);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
            
                     private Color ParseColor(string colorString, int alpha = 255)
                     {
                         var color = colorString[0] == '#' ? Color.FromHex(colorString) : Color.FromName(colorString);
            
                         return Color.FromArgb(alpha, color);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Color.A">
            <summary>
            Gets the alpha component value of the color.
            </summary>
            <returns>The alpha component value of this color.</returns>
        </member>
        <member name="P:cAlgo.API.Color.R">
            <summary>
            Gets the red component value of the color.
            </summary>
            <returns>The red component value of this color.</returns>
        </member>
        <member name="P:cAlgo.API.Color.G">
            <summary>
            Gets the green component value of the color.
            </summary>
            <returns>The green component value of this color.</returns>
        </member>
        <member name="P:cAlgo.API.Color.B">
            <summary>
                Gets the blue component value of the color.
            </summary>
            <returns>The blue component value of this color.</returns>
        </member>
        <member name="M:cAlgo.API.Color.ToArgb">
            <summary>
                Get the 32-bit ARGB color value.
            </summary>
            <returns>The 32-bit ARGB color value.</returns>
        </member>
        <member name="M:cAlgo.API.Color.ToHexString">
            <summary>
                Get the hex string representation of the color.
            </summary>
            <returns>The hex string representation of the color.</returns>
        </member>
        <member name="M:cAlgo.API.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.Color.Equals(System.Object)">
            <summary>
            Defines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.Color.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a color from alpha, red, green and blue components.
            </summary>
            <param name="alpha">Alpha value from 0 to 255</param>
            <param name="red">Red value from 0 to 255</param>
            <param name="green">Green value from 0 to 255</param>
            <param name="blue">Blue value from 0 to 255</param>
            <example>
                <code>
            var greenColor = Color.FromArgb(255, 0, 255, 0);
            </code>
            </example>
            <returns>The Color for specified parameters.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromArgb(System.Int32,cAlgo.API.Color)">
            <summary>
                Creates a color from existing color, but with new specified alpha value.
            </summary>
            <param name="alpha">New alpha value from 0 to 255</param>
            <param name="baseColor">Base color from which red, green and blue values will be copied to a new color</param>
            <example>
                <code>
            var transparentBlue = Color.FromArgb(128, Color.Blue);
            </code>
            </example>
            <returns>The Color for specified parameters.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromArgb(System.Int32)">
            <summary>
                Creates a color from a 32-bit ARGB value.
            </summary>
            <returns>The Color for specified parameter.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a color from red, green and blue values. The alpha value is implicitly 255 (fully opaque).
            </summary>
            <param name="red">Red value from 0 to 255</param>
            <param name="green">Green value from 0 to 255</param>
            <param name="blue">Blue value from 0 to 255</param>
            <example>
                <code>
            var greenColor = Color.FromArgb(0, 255, 0);
            </code>
            </example>
            <returns>The Color for specified parameters.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromHex(System.String)">
            <summary>
                Attempts to convert a hex string to a Color.
            </summary>
            <param name="hex">Hex string to convert to a Color</param>
            <example>
                <code>
            var color = Color.FromHex("#808080");
            </code>
            </example>
            <returns>A Color that represents the converted hex string.</returns>
        </member>
        <member name="M:cAlgo.API.Color.FromName(System.String)">
            <summary>
                Creates a color from the specified name of a predefined color.
            </summary>
            <param name="name">Name of predefined color</param>
            <example>
                <code>
            var greenColor = Color.FromName("Green");
            </code>
            </example>
            <returns>A Color for specified name or color with value #00000000 if the name was not found.</returns>
        </member>
        <member name="M:cAlgo.API.Color.op_Equality(cAlgo.API.Color,cAlgo.API.Color)">
            <summary>
                Tests whether two specified <see cref='T:cAlgo.API.Color' /> objects are equivalent.
            </summary>
        </member>
        <member name="M:cAlgo.API.Color.op_Inequality(cAlgo.API.Color,cAlgo.API.Color)">
            <summary>
                Tests whether two specified <see cref='T:cAlgo.API.Color' /> objects are equivalent.
            </summary>
        </member>
        <member name="M:cAlgo.API.Color.op_Implicit(System.Int32)~cAlgo.API.Color">
            <summary>
                Creates a color from a 32-bit ARGB value.
            </summary>
            <returns>The Color for specified parameter.</returns>
        </member>
        <member name="M:cAlgo.API.Color.op_Implicit(System.String)~cAlgo.API.Color">
            <summary>
                Creates a color from the specified name or hex string.
            </summary>
            <returns>A Color for specified name or hex string.</returns>
        </member>
        <member name="F:cAlgo.API.Color.Empty">
            <summary>
                Represents empty color.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Transparent">
            <summary>
                Gets a system-defined color that has an ARGB value of #00FFFFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.AliceBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0F8FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.AntiqueWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAEBD7.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Aqua">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Aquamarine">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7FFFD4.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Azure">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0FFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Beige">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5F5DC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Bisque">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4C4.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Black">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF000000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.BlanchedAlmond">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFEBCD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Blue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF0000FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.BlueViolet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8A2BE2.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Brown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA52A2A.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.BurlyWood">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDEB887.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.CadetBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF5F9EA0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Chartreuse">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7FFF00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Chocolate">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD2691E.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Coral">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF7F50.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.CornflowerBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6495ED.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Cornsilk">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF8DC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Crimson">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDC143C.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Cyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00008B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkCyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008B8B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkGoldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB8860B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA9A9A9.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF006400.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkKhaki">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBDB76B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkMagenta">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B008B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkOliveGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF556B2F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkOrange">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF8C00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkOrchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9932CC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B0000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkSalmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE9967A.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8FBC8F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkSlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF483D8B.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkSlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF2F4F4F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00CED1.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DarkViolet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9400D3.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DeepPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF1493.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DeepSkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00BFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DimGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF696969.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.DodgerBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF1E90FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Firebrick">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB22222.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.FloralWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFAF0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.ForestGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF228B22.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Fuchsia">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Gainsboro">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDCDCDC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.GhostWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF8F8FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Gold">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFD700.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Goldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDAA520.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Gray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF808080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Green">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.GreenYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFADFF2F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Honeydew">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0FFF0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.HotPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF69B4.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.IndianRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFCD5C5C.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Indigo">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4B0082.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Ivory">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFF0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Khaki">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF0E68C.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Lavender">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE6E6FA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LavenderBlush">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF0F5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LawnGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7CFC00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LemonChiffon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFACD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFADD8E6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightCoral">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF08080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightCyan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFE0FFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightGoldenrodYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAFAD2.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD3D3D3.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF90EE90.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightPink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFB6C1.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSalmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFA07A.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF20B2AA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF87CEFA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF778899.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightSteelBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB0C4DE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LightYellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFE0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Lime">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FF00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.LimeGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF32CD32.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Linen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFAF0E6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Magenta">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Maroon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF800000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumAquamarine">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF66CDAA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF0000CD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumOrchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBA55D3.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumPurple">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9370DB.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumSeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF3CB371.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumSlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF7B68EE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumSpringGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FA9A.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF48D1CC.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MediumVioletRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFC71585
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MidnightBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF191970.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MintCream">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5FFFA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.MistyRose">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4E1.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Moccasin">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFE4B5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.NavajoWhite">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFDEAD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Navy">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF000080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.OldLace">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFDF5E6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Olive">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF808000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.OliveDrab">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6B8E23.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Orange">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFA500.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.OrangeRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF4500.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Orchid">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDA70D6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PaleGoldenrod">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFEEE8AA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PaleGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF98FB98.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PaleTurquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFAFEEEE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PaleVioletRed">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDB7093.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PapayaWhip">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFEFD5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PeachPuff">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFDAB9.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Peru">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFCD853F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Pink">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFC0CB.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Plum">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFDDA0DD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.PowderBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFB0E0E6.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Purple">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF800080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Red">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF0000.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.RosyBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFBC8F8F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.RoyalBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4169E1.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SaddleBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF8B4513.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Salmon">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFA8072.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SandyBrown">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF4A460.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SeaGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF2E8B57.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SeaShell">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFF5EE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Sienna">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFA0522D.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Silver">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFC0C0C0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SkyBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF87CEEB.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SlateBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF6A5ACD.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SlateGray">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF708090.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Snow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFAFA.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SpringGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF00FF7F.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.SteelBlue">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF4682B4.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Tan">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD2B48C.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Teal">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF008080.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Thistle">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFD8BFD8.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Tomato">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFF6347.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Turquoise">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF40E0D0.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Violet">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFEE82EE.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Wheat">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5DEB3.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.White">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFFFF.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.WhiteSmoke">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFF5F5F5.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.Yellow">
            <summary>
                Gets a system-defined color that has an ARGB value of #FFFFFF00.
            </summary>
        </member>
        <member name="P:cAlgo.API.Color.YellowGreen">
            <summary>
                Gets a system-defined color that has an ARGB value of #FF9ACD32.
            </summary>
        </member>
        <member name="T:cAlgo.API.Colors">
            <summary>
            A predefined color palette. Use these colors in indicators and other chart objects. Same as System.Drawing.Color. 
            </summary>
            <example>
            <code>
            [Output("Result1", Color = Colors.Blue)]
            public IndicatorDataSeries Result1 { get; set; }
            
            [Output("Result2", Color = Colors.Red)]
            public IndicatorDataSeries Result2 { get; set; }
            
            [Output("Result3", Color = Colors.Lime)]
            public IndicatorDataSeries Result3 { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.Colors.AliceBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF0F8FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.AntiqueWhite">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFAEBD7.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Aqua">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Aquamarine">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF7FFFD4.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Azure">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF0FFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Beige">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF5F5DC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Bisque">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4C4.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Black">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF000000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.BlanchedAlmond">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFEBCD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Blue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF0000FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.BlueViolet">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8A2BE2.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Brown">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFA52A2A.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.BurlyWood">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDEB887.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.CadetBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF5F9EA0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Chartreuse">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF7FFF00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Chocolate">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFD2691E.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Coral">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF7F50.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.CornflowerBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF6495ED.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Cornsilk">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF8DC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Crimson">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDC143C.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Cyan">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00008B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkCyan">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF008B8B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkGoldenrod">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFB8860B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFA9A9A9.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF006400.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkKhaki">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFBDB76B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkMagenta">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8B008B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkOliveGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF556B2F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkOrange">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF8C00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkOrchid">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF9932CC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8B0000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkSalmon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFE9967A.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkSeaGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8FBC8F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkSlateBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF483D8B.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkSlateGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF2F4F4F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkTurquoise">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00CED1.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DarkViolet">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF9400D3.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DeepPink">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF1493.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DeepSkyBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00BFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DimGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF696969.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.DodgerBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF1E90FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Firebrick">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFB22222.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.FloralWhite">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFAF0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.ForestGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF228B22.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Fuchsia">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Gainsboro">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDCDCDC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.GhostWhite">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF8F8FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Gold">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFD700.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Goldenrod">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDAA520.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Gray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF808080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Green">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF008000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.GreenYellow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFADFF2F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Honeydew">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF0FFF0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.HotPink">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF69B4.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.IndianRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFCD5C5C.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Indigo">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF4B0082.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Ivory">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFF0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Khaki">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF0E68C.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Lavender">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFE6E6FA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LavenderBlush">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF0F5.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LawnGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF7CFC00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LemonChiffon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFACD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFADD8E6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightCoral">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF08080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightCyan">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFE0FFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightGoldenrodYellow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFAFAD2.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFD3D3D3.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF90EE90.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightPink">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFB6C1.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSalmon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFA07A.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSeaGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF20B2AA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSkyBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF87CEFA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSlateGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF778899.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightSteelBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFB0C4DE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LightYellow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFE0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Lime">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FF00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.LimeGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF32CD32.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Linen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFAF0E6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Magenta">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Maroon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF800000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumAquamarine">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF66CDAA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF0000CD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumOrchid">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFBA55D3.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumPurple">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF9370DB.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumSeaGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF3CB371.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumSlateBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF7B68EE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumSpringGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FA9A.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumTurquoise">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF48D1CC.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MediumVioletRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFC71585
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MidnightBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF191970.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MintCream">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF5FFFA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.MistyRose">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4E1.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Moccasin">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4B5.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.NavajoWhite">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFDEAD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Navy">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF000080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.OldLace">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFDF5E6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Olive">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF808000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.OliveDrab">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF6B8E23.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Orange">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFA500.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.OrangeRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF4500.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Orchid">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDA70D6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PaleGoldenrod">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFEEE8AA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PaleGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF98FB98.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PaleTurquoise">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFAFEEEE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PaleVioletRed">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDB7093.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PapayaWhip">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFEFD5.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PeachPuff">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFDAB9.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Peru">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFCD853F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Pink">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFC0CB.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Plum">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFDDA0DD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.PowderBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFB0E0E6.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Purple">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF800080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Red">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF0000.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.RosyBrown">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFBC8F8F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.RoyalBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF4169E1.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SaddleBrown">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF8B4513.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Salmon">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFA8072.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SandyBrown">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF4A460.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SeaGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF2E8B57.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SeaShell">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF5EE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Sienna">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFA0522D.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Silver">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFC0C0C0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SkyBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF87CEEB.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SlateBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF6A5ACD.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SlateGray">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF708090.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Snow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFAFA.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SpringGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF00FF7F.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.SteelBlue">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF4682B4.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Tan">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFD2B48C.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Teal">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF008080.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Thistle">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFD8BFD8.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Tomato">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFF6347.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Turquoise">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF40E0D0.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Violet">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFEE82EE.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Wheat">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF5DEB3.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.White">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFFF.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.WhiteSmoke">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFF5F5F5.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.Yellow">
            <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFF00.
            </summary>
        </member>
        <member name="F:cAlgo.API.Colors.YellowGreen">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF9ACD32.
            </summary>
        </member>
        <member name="T:cAlgo.API.StaticPosition">
            <summary>
            An Enumeration of the chart window positions
            </summary>
        </member>
        <member name="F:cAlgo.API.StaticPosition.TopLeft">
            <summary>
            Represents the top left position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.TopLeft, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.TopRight">
            <summary>
            Represents the top right position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.TopRight, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.TopCenter">
            <summary>
            Represents the top center position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.TopCenter, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.Left">
            <summary>
            Represents the left position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.Left, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.Right">
            <summary>
            Represents the right position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.Right, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.Center">
            <summary>
            Represents the top center position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.Center, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.BottomLeft">
            <summary>
            Represents the bottom left position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.BottomLeft, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.BottomRight">
            <summary>
            Represents the bottom right position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.BottomRight, Colors.Green);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.StaticPosition.BottomCenter">
            <summary>
            Represents the bottom center position of the chart window
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("myObject", "myText",StaticPosition.BottomCenter, Colors.Green);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.IndicatorArea">
             <summary>
             Represents the area where the Indicator is placed.
             </summary>
             <seealso cref="T:cAlgo.API.ChartArea" />
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use IndicatorArea
                 [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class IndicatorAreaSample : Indicator
                 {
                     private TextBlock _indicatorAreaNumberTextBlock;
            
                     protected override void Initialize()
                     {
                         var grid = new Grid(1, 2)
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.7,
                             Width = 200
                         };
            
                         grid.AddChild(new TextBlock { Text = "Indicator Area #", Margin = 5, FontWeight = FontWeight.ExtraBold, ForegroundColor = Color.Black }, 0, 0);
            
                         _indicatorAreaNumberTextBlock = new TextBlock
                         {
                             Margin = 5,
                             Text = Chart.IndicatorAreas.Count.ToString(),
                             FontWeight = FontWeight.ExtraBold,
                             ForegroundColor = Color.Black
                         };
            
                         grid.AddChild(_indicatorAreaNumberTextBlock, 0, 1);
            
                         IndicatorArea.AddControl(grid);
            
                         Chart.IndicatorAreaAdded += Chart_IndicatorAreaAdded;
                         Chart.IndicatorAreaRemoved += Chart_IndicatorAreaRemoved;
                     }
            
                     private void Chart_IndicatorAreaRemoved(IndicatorAreaRemovedEventArgs obj)
                     {
                         _indicatorAreaNumberTextBlock.Text = Chart.IndicatorAreas.Count.ToString();
                     }
            
                     private void Chart_IndicatorAreaAdded(IndicatorAreaAddedEventArgs obj)
                     {
                         _indicatorAreaNumberTextBlock.Text = Chart.IndicatorAreas.Count.ToString();
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Collections.IReadonlyList`1">
            <summary>
            Represents a read only collection of a specified type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:cAlgo.API.Collections.IReadonlyList`1.Count">
            <summary>
            The total number of elements contained in the collection
            </summary>
        </member>
        <member name="P:cAlgo.API.Collections.IReadonlyList`1.Item(System.Int32)">
            <summary>
            Represents the item contained in the collection at a specific index
            </summary>
            <param name="index">The position in the collection where the item is contained</param>
            <returns></returns>
        </member>
        <member name="T:cAlgo.API.ColorTheme">
             <summary>
             Represents the color theme.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use ColorTheme Enum which is the color of platform theme on your indicators/cBots
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ColorThemeSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         ChangeChartBackgroundColorBasedOnTheme(Application.ColorTheme);
            
                         Application.ColorThemeChanged += Application_ColorThemeChanged;
                     }
            
                     private void Application_ColorThemeChanged(ColorThemeChangeEventArgs obj)
                     {
                         ChangeChartBackgroundColorBasedOnTheme(obj.ColorTheme);
                     }
            
                     private void ChangeChartBackgroundColorBasedOnTheme(ColorTheme colorTheme)
                     {
                         if (colorTheme == ColorTheme.Dark)
                         {
                             Chart.ColorSettings.BackgroundColor = Color.White;
                         }
                         else if (colorTheme == ColorTheme.Light)
                         {
                             Chart.ColorSettings.BackgroundColor = Color.Black;
                         }
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.ColorTheme.Dark">
            <summary>
            The dark color theme.
            </summary>
        </member>
        <member name="F:cAlgo.API.ColorTheme.Light">
            <summary>
            The light color theme.
             </summary>
        </member>
        <member name="T:cAlgo.API.DataSeries">
             <summary>
             Represents a read only list of values, typically used to represent market price series.
             The values are accessed with an array-like [] operator.
             </summary>
             <example>
             <code>
             [Parameter]
             public DataSeries Source { get; set; }
             //...
             [Output("Main")]
             public IndicatorDataSeries Result{ get; set; }
             //...
             Result[index] = Source[index] * exp + previousValue * (1 - exp);
             //...
             Result[index] = (MarketSeries.Close[index] + MarketSeries.Open[index]) / 2;
             //...
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to work with data series
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class DataSeriesSample : Indicator
                 {
                     private TextBlock _lastValueTextBlock;
                     private TextBlock _lastClosedValueTextBlock;
                     private TextBlock _countTextBlock;
            
                     [Parameter()]
                     public DataSeries Source { get; set; }
            
                     protected override void Initialize()
                     {
                         var grid = new Grid(3, 2)
                         {
                             BackgroundColor = Color.DarkGoldenrod,
                             HorizontalAlignment = HorizontalAlignment.Left,
                             VerticalAlignment = VerticalAlignment.Bottom,
                             Opacity = 0.5
                         };
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Last Value",
                             Margin = 5
                         }, 0, 0);
            
                         _lastValueTextBlock = new TextBlock
                         {
                             Text = Source.LastValue.ToString(),
                             Margin = 5
                         };
            
                         grid.AddChild(_lastValueTextBlock, 0, 1);
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Last Closed Value",
                             Margin = 5
                         }, 1, 0);
            
                         _lastClosedValueTextBlock = new TextBlock
                         {
                             Text = Source.Last(1).ToString(),
                             Margin = 5
                         };
            
                         grid.AddChild(_lastClosedValueTextBlock, 1, 1);
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Values Count",
                             Margin = 5
                         }, 2, 0);
            
                         _countTextBlock = new TextBlock
                         {
                             Text = Source.Count.ToString(),
                             Margin = 5
                         };
            
                         grid.AddChild(_countTextBlock, 2, 1);
            
                         Chart.AddControl(grid);
                     }
            
                     public override void Calculate(int index)
                     {
                         // You can also use "LastValue" property if you don't have index
                         _lastValueTextBlock.Text = Source[index].ToString();
            
                         // You can also use "Last(1)" property if you don't have index
                         _lastClosedValueTextBlock.Text = Source[index - 1].ToString();
            
                         _countTextBlock.Text = Source.Count.ToString();
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.DataSeries.Item(System.Int32)">
            <summary>
            Gets the value in the dataseries at the specified position.
            </summary>
            <example>
            <code>
            //...
            [Parameter("Data Source")]
            public DataSeries Source { get; set; }
            //...
            [Output("Main")]
            public IndicatorDataSeries Result{ get; set; }
            //...
            public override void Calculate(int index)
            {
                // This is the simple moving average calculation.
                double sum = 0.0;
                for (int i = 0; i &#60;= Periods-1; i++)
                {
                    // Source[i] is the item contained in Source at position i
                    sum += Source[i];
                }
                Result[index] = sum / Periods;
            }
            //...
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.DataSeries.LastValue">
             <summary>
             Gets the last value of this DataSeries.
             </summary>
             <remarks>
             The last value may represent one of the values of the last bar of the market series, e.g. Open, High, Low and Close.
             Therefore, take into consideration that on each tick, except the Open price, the rest of the values will most probably change.
             </remarks>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
             protected override void OnTick()
             {
                 double lastValue = MarketSeries.Close.LastValue;
            	    Print("The last value of MarketSeries.Close Series is: {0}", MarketSeries.Close.LastValue);
            
                 // Property LastValue has an accessor but no setter, i.e. LastValue can be retrieved but not set.
                 // The following code will produce an error
                 MarketSeries.Close.LastValue = 100;
             }
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.DataSeries.Last(System.Int32)">
            <summary>
            Access a value in the dataseries certain bars ago
            </summary>
            <param name="index">Number of bars ago</param>
            <example>
            <code>
            double value = MarketSeries.Close.Last(5);
            Print("The close price 5 bars ago was: {0}", value);
            </code>
            </example>
            <example>
            <code>
            double previousOpen = MarketSeries.Open.Last(1);
            double previousClose = MarketSeries.Close.Last(1);
            Print("Open: {0}, Close: {1}", previousOpen, previousClose);
            </code>
            </example>
            <example>
            <code>
            double currentClose = MarketSeries.Close.Last(0);
            Print("Current Close: {0}", currentClose);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.DataSeries.Count">
             <summary>
             Gets the total number of elements contained in the DataSeries.
             </summary>
             <example>
             <code>
             protected override void OnTick()
             {
                 int total = MarketSeries.Close.Count;
                 Print("The total elements contained in the MarketSeries.Close Series is: {0}", total);
            
                 int lastIndex = total - 1;
                 double lastCloseValue = MarketSeries.Close[lastIndex];
            
            	    //Print the last value of the series
                 Print("The last value of Close Series is: {0}", lastCloseValue);
            
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Error">
            <summary>
            Encapsulates an error code.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                // Print the error code
                Print("{0}", error.Code);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Error.Code">
            <summary>
            The encapsulated error code.
            </summary>
            <example>
            <code> 
            protected override void OnError(Error error)
            {
                // stop the robot if there is a volume error
                if (error.Code == ErrorCode.BadVolume)
                    Stop();
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Error.TradeResult">
            <summary>
            The result of the trade that produced the error
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                var result = error.TradeResult;
                Print(result);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.ErrorCode">
            <summary>
            Enumeration of standard error codes.
            </summary>
            <remarks>
            Error codes are readable descriptions of the responses returned by the server.
            </remarks>
            <example>
            <code>
            
                protected override void OnError(Error error)
                {
                    //  Print the error to the log
                    switch (error.Code)
                    {
                            case ErrorCode.BadVolume: Print("Bad Volume");
                            break;
                            case ErrorCode.TechnicalError:Print("Technical Error");
                            break;
                            case ErrorCode.NoMoney: Print("No Money");
                            break;
                            case ErrorCode.Disconnected: Print("Disconnected");
                            break;
                            case ErrorCode.MarketClosed: Print("Market Closed");
                            break;
                    }
                }
            
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.TechnicalError">
            <summary>
            A generic technical error with a trade request.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.TechnicalError)
                {
                    Print("Error. Confirm that the trade command parameters are valid");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.BadVolume">
            <summary>
            The volume value is not valid
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.BadVolume)
                {
                    Print("Invalid Volume amount");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.NoMoney">
            <summary>
            There are not enough money in the account to trade with.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.NoMoney)
                {
                    Print("Not enough money to trade.");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.MarketClosed">
            <summary>
            The market is closed.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.MarketClosed)
                {
                    Print("The market is closed.");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.Disconnected">
            <summary>
            The server is disconnected.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.Disconnected)
                {
                    Print("The server is disconnected.");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.EntityNotFound">
            <summary>
            Position does not exist. 
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.EntityNotFound)
                {
                    Print("Position not found");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.Timeout">
            <summary>
            Operation timed out.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.Timeout)
                {
                    Print("Operation timed out");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.UnknownSymbol">
            <summary>
            Unknown symbol.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.UnknownSymbol)
                {
                    Print("Unknown symbol.");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.InvalidStopLossTakeProfit">
            <summary>
            The invalid Stop Loss or Take Profit.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.InvalidStopLossTakeProfit)
                {
                    Print("The invalid Stop Loss or Take Profit.");
                }
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.ErrorCode.InvalidRequest">
            <summary>
            The invalid request.
            </summary>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                if (error.Code == ErrorCode.InvalidRequest)
                {
                    Print("The invalid request.");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.BarOpenedEventArgs">
            <summary>
            Provides data for the event when a new bar opened on the chart.
            </summary>
            <seealso cref="T:cAlgo.API.Bars" />
        </member>
        <member name="P:cAlgo.API.BarOpenedEventArgs.Bars">
            <summary>
            Gets the bar data.
            </summary>
        </member>
        <member name="T:cAlgo.API.BarsHistoryLoadedEventArgs">
            <summary>
            Provides data for the history loaded event.
            </summary>
            <seealso cref="T:cAlgo.API.Bars" />
        </member>
        <member name="P:cAlgo.API.BarsHistoryLoadedEventArgs.Bars">
            <summary>
            Gets the bar objects data.
            </summary>
        </member>
        <member name="P:cAlgo.API.BarsHistoryLoadedEventArgs.Count">
            <summary>
            Gets the number of bars.
            </summary>
        </member>
        <member name="T:cAlgo.API.BarsTickEventArgs">
            <summary>
            Provides data for the tick bar event.
            </summary>
            <seealso cref="T:cAlgo.API.Bars" />
        </member>
        <member name="P:cAlgo.API.BarsTickEventArgs.Bars">
            <summary>
            Gets the Bar objects data.
            </summary>
        </member>
        <member name="P:cAlgo.API.BarsTickEventArgs.IsBarOpened">
            <summary>
            Defines if current tick is the first tick of a new bar.
            </summary>
        </member>
        <member name="T:cAlgo.API.ButtonClickEventArgs">
            <summary>
            Represents the button click event data.
            </summary>
            <seealso cref="T:cAlgo.API.Button" />
        </member>
        <member name="P:cAlgo.API.ButtonClickEventArgs.Button">
            <summary>
            Gets the button data.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartColorEventArgs">
            <summary>
            Provides data for the chart color event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartColorEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartDisplaySettingsEventArgs">
            <summary>
            Provides data for the chart display settings event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartDisplaySettingsEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartDragEventArgs">
            <summary>
            Provides data for the chart dragging event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="T:cAlgo.API.ChartMouseEventArgs">
            <summary>
            Provides data for the mouse related routed events.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.ChartArea">
            <summary>
            Gets the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.MouseX">
            <summary>
            Gets the X-axis value of the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.MouseY">
            <summary>
            Gets the Y-axis value of the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.TimeValue">
            <summary>
            Gets the time value on the X-axis where the mouse event occurs.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.BarIndex">
            <summary>
            Gets the exact bar index of the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.YValue">
            <summary>
            Gets the Y-axis value of the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.CtrlKey">
            <summary>
            Defines whether the Ctrl key is pressed during the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.ShiftKey">
            <summary>
            Defines whether the Shift key is pressed during the mouse event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartMouseEventArgs.AltKey">
            <summary>
            Defines whether the Alt key is pressed during the mouse event.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartMouseWheelEventArgs">
            <summary>
            Provides data for the mouse wheel scroll event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="P:cAlgo.API.ChartMouseWheelEventArgs.Delta">
            <summary>
            Gets the number of detents the mouse wheel has rotated. A detent is one notch of the mouse wheel.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectAddedEventArgs">
            <summary>
            Provides data for adding the chart object event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.ChartObjectEventArgs">
            <summary>
            Provides data for the chart object change event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="P:cAlgo.API.ChartObjectEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectEventArgs.Area">
            <summary>
            Gets the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectEventArgs.ChartObject">
            <summary>
            Gets the chart object.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectHoverChangedEventArgs">
            <summary>
            Provides data for the mouse hover over a chart object event.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectHoverChangedEventArgs.IsObjectHovered">
            <summary>
            Defines if the mouse is hovered over the chart object.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectRemovedEventArgs">
            <summary>
            Provides data for the removing chart object event.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectsAddedEventArgs">
            <summary>
            Provides data for the adding chart objects event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="T:cAlgo.API.ChartObjectSelectionChangedEventArgs">
            <summary>
            Provides data for the chart object selecting or deselecting event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartObjectSelectionChangedEventArgs.IsObjectSelected">
             <summary>
            Defines whether the chart object is selected or deselected.
             </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectsEventArgs">
            <summary>
            Provides data for the chart objects change event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="P:cAlgo.API.ChartObjectsEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectsEventArgs.Area">
            <summary>
            Gets the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectsEventArgs.ChartObjects">
            <summary>
            Gets chart objects.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectsRemovedEventArgs">
            <summary>
            Provides data for the removing chart objects event.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectsSelectionChangedEventArgs">
            <summary>
                Provides data for the chart objects selecting or deselecting event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartObjectsSelectionChangedEventArgs.Chart">
            <summary>
                A chart where event occured
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectsSelectionChangedEventArgs.Area">
            <summary>
                A chart area where event occured
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectsSelectionChangedEventArgs.ObjectsAddedToSelection">
            <summary>
                A list of objects that were added to selection
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartObjectsSelectionChangedEventArgs.ObjectsRemovedFromSelection">
            <summary>
                A list of objects that were removed from selection
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectsUpdatedEventArgs">
            <summary>
            Provides data for the chart objects update event.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartObjectUpdatedEventArgs">
            <summary>
            Provides data for the chart object update event.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartScrollEventArgs">
            <summary>
            Provides data for the chart scrolling event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.ChartArea">
            <summary>
            Gets the chart area.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.BarsDelta">
            <summary>
            Gets a value that indicates the amount of bars that the chart was scrolled for
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.BottomYDelta">
            <summary>
            Gets the lowest value of the bars delta.
            </summary>
            <value>The bottom y delta.</value>
        </member>
        <member name="P:cAlgo.API.ChartScrollEventArgs.TopYDelta">
            <summary>
            Gets the highest value of the bars delta.
            </summary>
            <value>The top y delta.</value>
        </member>
        <member name="T:cAlgo.API.ChartSizeEventArgs">
            <summary>
            Provides data for the chart size change event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.ChartSizeEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.ChartSizeEventArgs.Area">
            <summary>
            Gets the chart area.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartTypeEventArgs">
            <summary>
            Provides data for the chart type chage event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="P:cAlgo.API.ChartTypeEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.ChartZoomEventArgs">
            <summary>
            Provides data for the chart type change event.
            </summary>
            <seealso cref = "T:cAlgo.API.Chart" />
        </member>
        <member name="P:cAlgo.API.ChartZoomEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="T:cAlgo.API.CheckBoxEventArgs">
            <summary>
            Provides data for the checkbox event.
            </summary>
            <seealso cref = "T:cAlgo.API.CheckBox" />
        </member>
        <member name="P:cAlgo.API.CheckBoxEventArgs.CheckBox">
            <summary>
            Gets the checkbox data.
            </summary>
        </member>
        <member name="T:cAlgo.API.ColorThemeChangeEventArgs">
            <summary>
            Provides data for the color theme change event.
             </summary>
            <seealso cref="T:cAlgo.API.ColorTheme" />
        </member>
        <member name="P:cAlgo.API.ColorThemeChangeEventArgs.ColorTheme">
            <summary>
            Gets the color theme.
             </summary>
        </member>
        <member name="T:cAlgo.API.IndicatorAreaAddedEventArgs">
            <summary>
            Provides data for the indicator area adding event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="T:cAlgo.API.IndicatorAreaEventArgs">
            <summary>
            The arguments for the indicator area event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="P:cAlgo.API.IndicatorAreaEventArgs.Chart">
            <summary>
            Gets the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.IndicatorAreaEventArgs.Area">
            <summary>
            Gets the area.
            </summary>
        </member>
        <member name="T:cAlgo.API.IndicatorAreaRemovedEventArgs">
            <summary>
            Provides data for the indicator area removing event.
            </summary>
            <seealso cref="T:cAlgo.API.Chart" />
        </member>
        <member name="T:cAlgo.API.PendingOrderCancelledEventArgs">
            <summary>
            Provides data for the pending order cancellation event.
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Cancelled += PendingOrdersOnCancelled;
                var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
                CancelPendingOrder(result.PendingOrder);
            }
            private void PendingOrdersOnCancelled(PendingOrderCancelledEventArgs args)
            {
               Print("Pending order with id {0} was cancelled. Reason: {1}", args.PendingOrder.Id, args.Reason);
            }
            </code>
            </example>
            <seealso cref="T:cAlgo.API.PendingOrder"/>
        </member>
        <member name="P:cAlgo.API.PendingOrderCancelledEventArgs.PendingOrder">
            <summary>
            Gets the pending order that was cancelled.
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrderCancelledEventArgs.Reason">
            <summary>
            Gets the reason for the pending order cancellation.
            </summary>
        </member>
        <member name="T:cAlgo.API.PendingOrderCreatedEventArgs">
            <summary>
            Provides data for the pending order creation events.
            </summary>
            <seealso cref="T:cAlgo.API.PendingOrder"/>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Created+= PendingOrdersOnCreated;
                PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize)
            }
            private void PendingOrdersOnCreated(PendingOrderCreatedEventArgsargs)
            {
                Print("Pending order with id {0} was created", args.PendingOrder.Id);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrderCreatedEventArgs.PendingOrder">
            <summary>
            Gets the pending order that was created.
            </summary>
        </member>
        <member name="T:cAlgo.API.PendingOrderFilledEventArgs">
            <summary>
            Provides data for the pending order fill event.
            </summary>
            <seealso cref="T:cAlgo.API.PendingOrder"/>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Filled += PendingOrdersOnFilled;
                PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            }
            private void PendingOrdersOnFilled(PendingOrderFilledEventArgs args)
            {
                Print("Pending order with id {0} was filled, position id  is {1}", args.PendingOrder.Id, args.Position.Id);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrderFilledEventArgs.PendingOrder">
            <summary>
            Gets the pending order that was filled.
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrderFilledEventArgs.Position">
            <summary>
            Gets the position that was filled from the pending order.
            </summary>
        </member>
        <member name="T:cAlgo.API.PendingOrderModifiedEventArgs">
            <summary>
            Provides data for the pending order modification event.
            </summary>
            <seealso cref="T:cAlgo.API.PendingOrder"/>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Modified += PendingOrdersOnModified;
                var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
                ModifyPendingOrder(result.PendingOrder, Symbol.Ask + 20 * Symbol.PipSize ,null, null, null);
            }
            private void PendingOrdersOnModified(PendingOrderModifiedEventArgs args)
            {
                Print("Pending order with id {0} was modifed", args.PendingOrder.Id);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrderModifiedEventArgs.PendingOrder">
            <summary>
            Gets the pending order that was modified.
            </summary>
        </member>
        <member name="T:cAlgo.API.PositionClosedEventArgs">
            <summary>
            Provides data for the position closing event.
            </summary>
            <seealso cref="T:cAlgo.API.Position"/>
            <example>
            <code>
            protected override void OnStart()
            {
                Positions.Closed += PositionsClosed;
            }
            private void PositionsOnClosed(PositionClosedEventArgs args)
            {
                var position = args.Position;
                Print("Position closed with {0} profit", position.GrossProfit);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.PositionClosedEventArgs.#ctor(cAlgo.API.Position,cAlgo.API.PositionCloseReason)">
            <summary>
            Provides data for the closing positions event.
            </summary>
            <param name="position"></param>
            <param name="reason"></param>
        </member>
        <member name="P:cAlgo.API.PositionClosedEventArgs.Position">
             <summary>
             Gets the position being closed.
             </summary>
             <example>
             <code>
             protected override void OnStart()
             {
                 ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel");
                 Positions.Closed += PositionsClosed;
             }
             private void PositionsClosed(PositionClosedEventArgs args)
             {
                 var position = args.Position;
                 if(position.Label == "myLabel")
                 {
                     var tradeType = position.TradeType;
                     var symbol = MarketData.GetSymbol(position.SymbolCode);
                     var volume = position.Volume;
                     var label = position.Label;
            
                     if(position.GrossProfit > 0)
                         ExecuteMarketOrder(tradeType, symbol, volume, label);
                     else
                     {
                         var oppositeTrade = tradeType == TradeType.Buy
                                     ? TradeType.Sell
                                     : TradeType.Buy;
                         ExecuteMarketOrder(oppositeTrade, symbol, volume, label);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.PositionClosedEventArgs.Reason">
            <summary>
            Gets the reason of the position being closed.
            </summary>
        </member>
        <member name="T:cAlgo.API.PositionModifiedEventArgs">
            <summary>
            Provides data for the position modification event.
            </summary>
            <seealso cref="T:cAlgo.API.Position"/>
        </member>
        <member name="P:cAlgo.API.PositionModifiedEventArgs.Position">
            <summary>
            Gets or sets the modified position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.PositionOpenedEventArgs">
            <summary>
            Provides data for the position opening event.
            </summary>
            <seealso cref="T:cAlgo.API.Position"/>
            <example>
            <code>
            public class SampleRobot : Robot
            {
                protected override void OnStart()
                {
                    Positions.Opened += Positions_Opened;
                    ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel");
                }
                private void Positions_Opened(PositionOpenedEventArgs args)
                {
                    var position = args.Position;
                    if(position.Label == "myLabel")
                        Print("Position opened by SampleRobot");
                }
                //...
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PositionOpenedEventArgs.Position">
            <summary>
            Gets or sets the position being opened.
            </summary>
            <example>
            <code>
            private void PositionsOnOpened(PositionOpenedEventArgs args)
            {
                var position = args.Position;
                Print("Position opened at {0}", position.EntryPrice);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.RadioButtonEventArgs">
            <summary>
            Represents the radio button actions.
            </summary>
            <seealso cref="T:cAlgo.API.RadioButton"/>
        </member>
        <member name="P:cAlgo.API.RadioButtonEventArgs.RadioButton">
            <summary>
            Gets the radiobutton data.
            </summary>
        </member>
        <member name="T:cAlgo.API.SymbolTickEventArgs">
            <summary>
            Provides data for the symbol tick event.
            </summary>
            <seealso cref="T:cAlgo.API.Internals.Symbol"/>
        </member>
        <member name="P:cAlgo.API.SymbolTickEventArgs.SymbolName">
            <summary>
            Gets the symbol name.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolTickEventArgs.Bid">
            <summary>
            Gets the bid price.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.SymbolTickEventArgs.Ask">
            <summary>
            Gets the ask price.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.SymbolTickEventArgs.Symbol">
            <summary>
            Gets the symbol.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.TextChangedEventArgs">
            <summary>
            Provides data for the TextChanged event.
            </summary>
            <seealso cref="T:cAlgo.API.TextBox"/>
        </member>
        <member name="P:cAlgo.API.TextChangedEventArgs.TextBox">
            <summary>
            Gets the texbox.
            </summary>
        </member>
        <member name="T:cAlgo.API.TicksHistoryLoadedEventArgs">
            <summary>
            Provides data for the tick history loaded event.
            </summary>
            <seealso cref="T:cAlgo.API.Ticks"/>
        </member>
        <member name="P:cAlgo.API.TicksHistoryLoadedEventArgs.Ticks">
            <summary>
            Gets the tick data.
            </summary>
        </member>
        <member name="P:cAlgo.API.TicksHistoryLoadedEventArgs.Count">
            <summary>
            Gets the number of the ticks.
            </summary>
        </member>
        <member name="T:cAlgo.API.TicksTickEventArgs">
            <summary>
            Provides data for the tick event.
            </summary>
            <seealso cref="T:cAlgo.API.Ticks"/>
        </member>
        <member name="P:cAlgo.API.TicksTickEventArgs.Ticks">
            <summary>
            Gets the Ticks data.
            </summary>
        </member>
        <member name="T:cAlgo.API.ToggleButtonEventArgs">
            <summary>
            Represents the toggle button event class.
            </summary>
            <seealso cref="T:cAlgo.API.ToggleButton"/>
        </member>
        <member name="P:cAlgo.API.ToggleButtonEventArgs.ToggleButton">
            <summary>
            Gets the toggle button data.
            </summary>
        </member>
        <member name="T:cAlgo.API.UserTimeOffsetChangedEventArgs">
            <summary>
            Represents the user time offset change event data.
            </summary>
            <seealso cref="T:cAlgo.API.Application"/>
        </member>
        <member name="P:cAlgo.API.UserTimeOffsetChangedEventArgs.UserTimeOffset">
            <summary>
            Gets the user time offset.
            </summary>
        </member>
        <member name="T:cAlgo.API.WatchlistAddedEventArgs">
            <summary>
            Occures when a new watchlist is added.
            </summary>
            <seealso cref="T:cAlgo.API.Watchlist"/>
        </member>
        <member name="P:cAlgo.API.WatchlistAddedEventArgs.Watchlist">
            <summary>
            Gets the watchlist.
            </summary>
        </member>
        <member name="T:cAlgo.API.WatchlistRemovedEventArgs">
            <summary>
            Occurs when a watchlist is removed from the marketwatch.
            </summary>
            <seealso cref="T:cAlgo.API.Watchlist"/>
        </member>
        <member name="P:cAlgo.API.WatchlistRemovedEventArgs.Watchlist">
            <summary>
            Gets the watchlist.
            </summary>
        </member>
        <member name="T:cAlgo.API.WatchlistRenamedEventArgs">
            <summary>
            Occurs when the watchlist is renamed.
            </summary>
            <seealso cref="T:cAlgo.API.Watchlist"/>
        </member>
        <member name="P:cAlgo.API.WatchlistRenamedEventArgs.Watchlist">
            <summary>
            Gets the watchlist.
            </summary>
        </member>
        <member name="T:cAlgo.API.WatchlistSymbolAddedEventArgs">
            <summary>
            Occurs when a new symbol is added to the watchlist.
            </summary>
            <seealso cref="T:cAlgo.API.Watchlist"/>
        </member>
        <member name="P:cAlgo.API.WatchlistSymbolAddedEventArgs.Watchlist">
            <summary>
            Gets the watchlist.
            </summary>
        </member>
        <member name="P:cAlgo.API.WatchlistSymbolAddedEventArgs.SymbolName">
            <summary>
            Gets the symbol name.
            </summary>
        </member>
        <member name="T:cAlgo.API.WatchlistSymbolRemovedEventArgs">
            <summary>
            Occurs when the symbol is removed from the watchlist.
            </summary>
            <seealso cref="T:cAlgo.API.Watchlist"/>
        </member>
        <member name="P:cAlgo.API.WatchlistSymbolRemovedEventArgs.Watchlist">
            <summary>
            Gets the watchlist.
            </summary>
        </member>
        <member name="P:cAlgo.API.WatchlistSymbolRemovedEventArgs.SymbolName">
            <summary>
            Gets the symbol name.
            </summary>
        </member>
        <member name="T:cAlgo.API.MarketDataLoadException">
            <summary>
            
            </summary>
        </member>
        <member name="M:cAlgo.API.MarketDataLoadException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:cAlgo.API.MarketDataLoadException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:cAlgo.API.MarketDataLoadException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:cAlgo.API.MarketDataLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:cAlgo.API.Functions">
             <summary>
             This class contains valuable functions that apply to DataSeries.
             </summary>
             <example>
             <code>
            
             //...
            
             SimpleMovingAverage sma;
            
             protected override void Initialize()
             {
                 sma = Indicators.SimpleMovingAverage(source, period);
             }
            
             public override void Calculate(int index)
             {
                 // IsRising returns true if the current value is greater
                 // than the previous value in the data series
                 if (Functions.IsRising(sma.Result))
                 {
                     //Do something
                 }
                 // IsFalling returns true if the current value is less
                 // than the previous value in the data series
                 else if(Functions.IsFalling(sma.Result))
                 {
                     // Do something else
                 }
                 else // sma is level
                 {
                     Do something else
                 }
            
                 //...
            
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo
             {
                 // This sample shows how to use the data series functions
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class DataSeriesFunctionsSample : Indicator
                 {
                     private SimpleMovingAverage _smaFast, _smaSlow;
            
                     protected override void Initialize()
                     {
                         _smaFast = Indicators.SimpleMovingAverage(Bars.ClosePrices, 9);
                         _smaSlow = Indicators.SimpleMovingAverage(Bars.ClosePrices, 20);
                     }
            
                     public override void Calculate(int index)
                     {
                         if (_smaFast.Result.HasCrossedAbove(_smaSlow.Result, 1))
                         {
                             // Fast MA crossed above slow MA
                         }
            
                         if (_smaFast.Result.HasCrossedBelow(_smaSlow.Result, 1))
                         {
                             // Fast MA crossed below slow MA
                         }
            
                         if (_smaFast.Result.Maximum(10) &gt; _smaSlow.Result.Maximum(10))
                         {
                             // Fast MA last 10 values maximum is larger than slow MA last 10 values
                         }
            
                         if (_smaFast.Result.Minimum(10) &lt; _smaSlow.Result.Minimum(10))
                         {
                             // Fast MA last 10 values minimum is smaller than slow MA last 10 values
                         }
            
                         if (_smaFast.Result.IsFalling() &amp;&amp; _smaSlow.Result.IsRising())
                         {
                             // Fast MA is falling and slow MA is raising
                             // IsFalling and IsRising compares last two values of the data series
                         }
            
                         if (_smaFast.Result.Sum(10) &gt; _smaSlow.Result.Sum(10))
                         {
                             // Fast MA last 10 values sum is larger than slow MA last 109 values sum
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Functions.IsRising(cAlgo.API.DataSeries)">
            <summary>
            Checks if the last value in a dataseries is greater than the previous.
            </summary>
            <param name="series">Input dataseries</param>
            <returns>True if the last value of a dataseries is greater than the previous, false otherwise</returns>
            <example>
            <code>
            SimpleMovingAverage sma;
            //...
            public override void Calculate(int index)
            {
                if (Functions.IsRising(sma.Result))
                {
                    //Do something
                }
                //May be invoked as an extension method
                if (sma.Result.IsRising())
                {
                    //Do something
                }
            }
            //...
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.IsFalling(cAlgo.API.DataSeries)">
            <summary>
            Checks if the last value in a dataseries is less than the previous
            </summary>
            <param name="series">Input dataseries</param>
            <returns>True if the last value in a dataseries is less than the previous, false otherwise</returns>
            <example>
            <code>
            SimpleMovingAverage sma;
            //...
            public override void Calculate(int index)
            {
                if (Functions.IsFalling(sma.Result))
                {
                    //Do something
                }
                // May also be invoked as an extension method
                if (sma.Result.IsFalling())
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.Maximum(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             Finds the maximum value in a dataseries for a given period.
             </summary>
             <param name="series">Input dataseries</param>
             <param name="period">Input period</param>
             <returns>The maximum value in the dataseries in this period</returns>
             <example>
             <code>
             public override void Calculate(int index)
             {
                 if(Functions.Maximum(sma.Result,20) > MarketSeries.Close[index])
                 {
                     //Do something
                 }
            
                 // May be invoked as an extension method
            
                 if (sma.Result.Maximum(20) > MarketSeries.Close[index])
                 {
                     //Do something
                 }
             }
             </code>
             </example>
             <example>
             <code>
             var maxHigh = MarketSeries.High.Maximum(periods);
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Functions.Minimum(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             Finds the minimum of a dataseries for a given period.
             </summary>
             <param name="series">Input dataseries</param>
             <param name="period">Input period</param>
             <returns>The minimum value in the dataseries in this period</returns>
             <example>
             <code>
             public override void Calculate(int index)
             {
                 if(Functions.Minimum(sma.Result, 20) > MarketSeries.Close[index])
                 {
                     //Do something
                 }
            
                 // May be invoked as an extension method
            
                 if (sma.Result.Minimum(20) > MarketSeries.Close[index])
                 {
                     //Do something
                 }
             }
             </code>
             </example>
             <example>
             <code>
             var minLow = MarketSeries.Low.Minimum(periods);
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Functions.HasCrossedAbove(cAlgo.API.DataSeries,cAlgo.API.DataSeries,System.Int32)">
             <summary>
             Returns true, if dataseries1 has crossed above dataseries2, over the specified Period.
             </summary>
             <param name="crossingSeries">Crossing dataseries</param>
             <param name="crossedSeries">Crossed dataseries</param>
             <param name="period">Period for which to check for crossing</param>
             <remarks>
             HasCrossedAbove will compare the crossing dataseries to the crossed dataseries starting from the
             current value of the series going back the specified period.
             If period is zero only the current bar values will be compared.
             If period is one the current bar values will be compared as well as the previous.
            
             e.g. Functions.HasCrossedAbove(sma.Result, MarketSeries.Close, 0)
             will only compare the current values which are not completed until the close of the bar.
             It is not uncommon that the function will return true and by the end of the bar the two
             series will uncross.
             </remarks>
             <example>
             <code>
            
             public override void Calculate(int index)
             {
                 if(Functions.HasCrossedAbove(sma.Result, MarketSeries.Close, 0))
                 {
                     //Do something
                 }
            
                 // May be invoked as an extension method as well
            
                 if(sma.Result.HasCrossedAbove(MarketSeries.Close, 0))
                 {
                     //Do something
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Functions.HasCrossedBelow(cAlgo.API.DataSeries,cAlgo.API.DataSeries,System.Int32)">
             <summary>
             Returns true, if dataseries1 has crossed below dataseries2, over the specified Period.
             </summary>
             <param name="crossingSeries">Crossing dataseries</param>
             <param name="crossedSeries">Crossed dataseries</param>
             <param name="period">Period for which to check for crossing</param>
             <remarks>
             HasCrossedBelow will compare the crossing dataseries to the crossed dataseries starting from the
             current value of the series going back the specified period.
             If period is zero only the current bar values will be compared.
             If period is one the current bar values will be compared as well as the previous.
            
             e.g. Functions.HasCrossedBelow(sma.Result, MarketSeries.Close, 0)
             will only compare the current values which are not completed until the close of the bar.
             It is not uncommon that the function will return true and by the end of the bar the two
             series will uncross.
             </remarks>
             <example>
             <code>
            
             public override void Calculate(int index)
             {
                 if(Functions.HasCrossedBelow(sma.Result, MarketSeries.Close,0)
                 {
                     //Do something
                 }
            
                 // May be invoked as an extension method
            
                 if(sma.Result.HasCrossedBelow(MarketSeries.Close, 0))
                 {
                     //Do something
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Functions.HasCrossedAbove(cAlgo.API.DataSeries,System.Double,System.Int32)">
             <summary>
             Checks if dataseries1 has crossed above value, sometime within the specified period.
             </summary>
             <param name="crossingSeries">Crossing dataseries</param>
             <param name="value">Price value to check if crossed</param>
             <param name="period">Period for which to check for crossing</param>
             <returns>true, if dataseries1 has crossed above value</returns>
             <remarks>
             HasCrossedAbove will compare the crossing dataseries to the crossed dataseries starting from the
             current value of the series going back the specified period.
             If period is zero only the current bar values will be compared.
             If period is one the current bar values will be compared as well as the previous.
             e.g. Functions.HasCrossedAbove(sma.Result, value, 0)
             will only compare the current simple moving average series value
             which is not completed until the close of the bar.
             It is not uncommon that the function will return true and by the end of the bar the series will uncross.
             </remarks>
             <example>
             <code>
            
             public override void Calculate(int index)
             {
                 var value = MarketSeries.Close[index - 1];
                 if(Functions.HasCrossedAbove(sma.Result, value, 1)
                 {
                     //Do something
                 }
            
                 // May be invoked as an extension method as well
            
                 if(sma.Result.HasCrossedAbove(MarketSeries.Close[index-1], 1))
                 {
                     //Do something
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Functions.HasCrossedBelow(cAlgo.API.DataSeries,System.Double,System.Int32)">
            <summary>
            Checks if dataseries1 has crossed below the value, sometime within the specified period.
            </summary>
            <param name="crossingSeries">Crossing DataDeries</param>
            <param name="value">Price value to check if crossed </param>
            <param name="period">Period for which to check for crossing</param>
            <returns>True if dataseries1 has crossed below value, false otherwise</returns>
            <remarks>
            HasCrossedBelow compares the crossing dataseries to the value starting from the
            current value of the series going back the specified period.
            If period is zero, only the current bar value will be examined.
            If period is one, the current and previous bar value will be examined.
            e.g. Functions.HasCrossedAbove(sma.Result, value, 0)
            will only compare the current simple moving average series value
            which is not completed until the close of the bar.
            It is not uncommon that the function will return true and by the end of the bar the series will uncross.
            </remarks>
            <example>
            <code>
            public override void Calculate(int index)
            {
                if(Functions.HasCrossedBelow(sma.Result, MarketSeries.Close[index], 0)
                {
                    //Do something
                }
                // May be invoked as an extension method as well
                if(sma.Result.HasCrossedBelow(MarketSeries.Close[index], 0))
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Functions.Sum(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            Calculates the sum of a dataseries, over the specified period.
            </summary>
            <param name="series">DataSeries of which values are summed</param>
            <param name="period">Period of values that are summed prior to current index</param>
            <returns>The sum of the series for the period</returns>
            <example>
            <code>
            SimpleMovingAverage sma;
            //...
            public override void Calculate(int index)
            {
                //The sum of the simple moving average series of the last 20 bars
                var sumSma = Functions.Sum(sma.Result, 20);
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.GetFitnessArgs">
             <summary>
             Represents the custom fitness calculation interface.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo.Robots
             {
                 // This sample shows how to use the GetFitnessArgs to change the default fitness metric of optimizer
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class GetFitnessArgsSample : Robot
                 {
                     protected override void OnStart()
                     {
                     }
            
                     protected override double GetFitness(GetFitnessArgs args)
                     {
                         // Here we are using the win rate as fitness
                         // You can use any other value by combining the values of GetFitnessArgs object properties
                         return args.WinningTrades / args.TotalTrades;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.History">
            <summary>
            Gets all the historical trades.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.Positions">
            <summary>
            Gets all open positions.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.PendingOrders">
            <summary>
            Gets all pending orders.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.Equity">
            <summary>
            Gets the equity of the account (balance plus unrealized profit and loss).
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.NetProfit">
            <summary>
            Gets the net profit of all trades.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.MaxBalanceDrawdownPercentages">
            <summary>
            Gets the maximum amount of balance drawdown (%).
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.MaxEquityDrawdownPercentages">
            <summary>
            Gets the maximum amount of equity drawdown (%).
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.MaxBalanceDrawdown">
            <summary>
            Gets the maximum amount of balance drawdown in deposit currency.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.MaxEquityDrawdown">
            <summary>
            Gets the maximum amount of equity drawdown in deposit currency.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.WinningTrades">
            <summary>
            Gets the total number of winning trades.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.LosingTrades">
            <summary>
            Gets total number of losing trades.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.TotalTrades">
            <summary>
            Gets the total number of trades taken.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.AverageTrade">
            <summary>
            Gets the average profit for all trades.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.ProfitFactor">
            <summary>
            Gets the Profit Factor - the ratio of Total Net Profit divided by the Total Net Loss.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.SharpeRatio">
            <summary>
            Gets the ratio to measure risk-adjusted performance. The higher the value, the better.
            </summary>
        </member>
        <member name="P:cAlgo.API.GetFitnessArgs.SortinoRatio">
            <summary>
            Gets the Sortino ratio is an alternative to the Sharpe ratio, using downward deviation in place of standard deviation. The higher the value, the better.
            </summary>
        </member>
        <member name="T:cAlgo.API.HistoricalTrade">
            <summary>
            Represents the historical trade interface.
            </summary>
            <seealso cref="T:cAlgo.API.History" />
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.ClosingDealId">
            <summary>
            Gets the unique closing deal identifier.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.PositionId">
            <summary>
            Gets the position unique identifier.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.SymbolCode">
            <summary>
            Symbol code of the Historical Trade.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.SymbolName">
            <summary>
            Gets the symbol name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.TradeType">
            <summary>
            The TradeType of the Opening Deal.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Volume">
            <summary>
            The Volume that was closed by the Closing Deal.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.VolumeInUnits">
            <summary>
            The Volume that was closed by the Closing Deal.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.EntryTime">
            <summary>
            Time of the Opening Deal, or the time of the first Opening deal that was closed.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.EntryPrice">
            <summary>
            The VWAP (Volume Weighted Average Price) of the Opening Deals that are closed.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.ClosingTime">
            <summary>
            Time of the Closing Deal.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.ClosingPrice">
            <summary>
            The execution price of the Closing Deal.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Label">
            <summary>
            The label.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Comment">
            <summary>
            The comment
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Commissions">
            <summary>
            Commission owed
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Swap">
            <summary>
            Swap is the overnight interest rate if any, accrued on the position.
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.NetProfit">
            <summary>
            Profit and loss including swaps and commissions
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.GrossProfit">
            <summary>
            Profit and loss before swaps and commission
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Balance">
            <summary>
            Account balance after the Deal was filled
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Pips">
            <summary>
            Represents the winning or loosing pips
            </summary>
        </member>
        <member name="P:cAlgo.API.HistoricalTrade.Quantity">
            <summary>
            The Quantity (in lots) that was closed by the Closing Deal
            </summary>
        </member>
        <member name="T:cAlgo.API.History">
             <summary>
             Provides access to methods of the historical trades collection
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using System.Linq;
            
             namespace cAlgo
             {
                 // A sample indicator that shows how to get historical trades and use the account history data
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class HistorySample : Indicator
                 {
                     private Style _textBlocksStyle;
            
                     private StackPanel _stackPanel;
            
                     private Grid _tradesGrid;
            
                     protected override void Initialize()
                     {
                         _stackPanel = new StackPanel
                         {
                             Orientation = Orientation.Vertical,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold
                         };
            
                         _textBlocksStyle = new Style();
            
                         _textBlocksStyle.Set(ControlProperty.Margin, 5);
            
                         _stackPanel.AddChild(new TextBox
                         {
                             Text = "Your Last 10 Trades",
                             FontWeight = FontWeight.ExtraBold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             Style = _textBlocksStyle
                         });
            
                         Chart.AddControl(_stackPanel);
            
                         UpdateLastTradeTextBlock();
            
                         Positions.Closed += args => UpdateLastTradeTextBlock();
                     }
            
                     public override void Calculate(int index)
                     {
                     }
            
                     private void UpdateLastTradeTextBlock()
                     {
                         if (_tradesGrid != null)
                             _stackPanel.RemoveChild(_tradesGrid);
            
                         _tradesGrid = new Grid(11, 6);
            
                         _tradesGrid.AddChild(new TextBlock
                         {
                             Text = "Symbol",
                             Style = _textBlocksStyle
                         }, 0, 0);
                         _tradesGrid.AddChild(new TextBlock
                         {
                             Text = "Direction",
                             Style = _textBlocksStyle
                         }, 0, 1);
                         _tradesGrid.AddChild(new TextBlock
                         {
                             Text = "Volume",
                             Style = _textBlocksStyle
                         }, 0, 2);
                         _tradesGrid.AddChild(new TextBlock
                         {
                             Text = "Open Time",
                             Style = _textBlocksStyle
                         }, 0, 3);
                         _tradesGrid.AddChild(new TextBlock
                         {
                             Text = "Close Time",
                             Style = _textBlocksStyle
                         }, 0, 4);
                         _tradesGrid.AddChild(new TextBlock
                         {
                             Text = "Net Profit",
                             Style = _textBlocksStyle
                         }, 0, 5);
            
                         var lastTenTrades = History.OrderByDescending(iTrade => iTrade.ClosingTime).Take(10).ToArray();
            
                         for (int iRowIndex = 1; iRowIndex &lt;= lastTenTrades.Length; iRowIndex++)
                         {
                             var trade = lastTenTrades[iRowIndex - 1];
            
                             _tradesGrid.AddChild(new TextBlock
                             {
                                 Text = trade.SymbolName,
                                 Style = _textBlocksStyle
                             }, iRowIndex, 0);
                             _tradesGrid.AddChild(new TextBlock
                             {
                                 Text = trade.TradeType.ToString(),
                                 Style = _textBlocksStyle
                             }, iRowIndex, 1);
                             _tradesGrid.AddChild(new TextBlock
                             {
                                 Text = trade.VolumeInUnits.ToString(),
                                 Style = _textBlocksStyle
                             }, iRowIndex, 2);
                             _tradesGrid.AddChild(new TextBlock
                             {
                                 Text = trade.EntryTime.ToString("g"),
                                 Style = _textBlocksStyle
                             }, iRowIndex, 3);
                             _tradesGrid.AddChild(new TextBlock
                             {
                                 Text = trade.ClosingTime.ToString("g"),
                                 Style = _textBlocksStyle
                             }, iRowIndex, 4);
                             _tradesGrid.AddChild(new TextBlock
                             {
                                 Text = trade.NetProfit.ToString(),
                                 Style = _textBlocksStyle
                             }, iRowIndex, 5);
                         }
            
                         _stackPanel.AddChild(_tradesGrid);
                     }
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.History.Item(System.Int32)">
            <summary>
            Find a historical trade by index
            </summary>
            <param name="index">the index in the list</param>
        </member>
        <member name="P:cAlgo.API.History.Count">
            <summary>
            Total number of historical trades
            </summary>
        </member>
        <member name="M:cAlgo.API.History.FindLast(System.String)">
            <summary>
            Find last historical trade by its label
            </summary>
            <param name="label">Label to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindLast(System.String,System.String)">
            <summary>
            Find last historical trade by its label, symbol name
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbolName">Symbol name to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindLast(System.String,System.String,cAlgo.API.TradeType)">
            <summary>
            Find last historical trade by its label, symbol name and trade type
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbolName">Symbol name to search by</param>
            <param name="tradeType">Trade type to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindAll(System.String)">
            <summary>
            Find all historical trades by the label
            </summary>
            <param name="label">Label to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindAll(System.String,System.String)">
            <summary>
            Find all historical trades by label, symbol name
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbolName">Symbol name to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindAll(System.String,System.String,cAlgo.API.TradeType)">
            <summary>
            Find all historical trades by label, symbol name and trade type
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbolName">Symbol name to search by</param>
            <param name="tradeType">Trade type to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindLast(System.String,cAlgo.API.Internals.Symbol)">
            <summary>
            Find last historical trade by its label, symbol
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindLast(System.String,cAlgo.API.Internals.Symbol,cAlgo.API.TradeType)">
            <summary>
            Find last historical trade by its label, symbol and trade type
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
            <param name="tradeType">Trade type to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindAll(System.String,cAlgo.API.Internals.Symbol)">
            <summary>
            Find all historical trades by label and symbol
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
        </member>
        <member name="M:cAlgo.API.History.FindAll(System.String,cAlgo.API.Internals.Symbol,cAlgo.API.TradeType)">
            <summary>
            Find all historical trades by label, symbol and trade type
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
            <param name="tradeType">Trade type to search by</param>
        </member>
        <member name="T:cAlgo.API.HorizontalAlignment">
             <summary>
             Describes horizontal position related to an anchor point or a parent element
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use Chart.DrawHorizontalLine method to draw an horizontal line
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class HorizontalLineSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         Chart.DrawHorizontalLine("horizontalLine", Bars.ClosePrices.LastValue, Color.Red);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.HorizontalAlignment.Center">
            <summary>
            Center horizontal alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.HorizontalAlignment.Left">
            <summary>
            Left horizontal alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.HorizontalAlignment.Right">
            <summary>
            Right horizontal alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.HorizontalAlignment.Stretch">
            <summary>
            Stretch horizontal alignment.
            </summary>
        </member>
        <member name="T:cAlgo.API.Indicator">
            <summary>
            Base class for Indicators.
            </summary>
            <remarks>
            Contains all necessary market information, provides access to built-in indicators and provides framework for 
            convenient indicators' creation.
            </remarks>
            <example>
            <code> 
            &#47;&#47;&#46;&#46;&#46;
            public override void Calculate(int index)
            {
                //This is where we place our indicator's calculation logic.
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            protected override void Initialize()
            {
            //Place your Initialization logic here
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
            <example>
            <code>
            private IndicatorDataSeries input;
            
            protected override void Initialize()
            {
                input = CreateDataSeries();
            }
            public override void Calculate(int index)
            {
                input[index] = (MarketSeries.Close[index] + MarketSeries.Open[index]) / 2;
            }
            </code>
            </example>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            public override void Calculate(int index)
            {
                if (IsRealTime)
                {
                    //Place the code-logic that you want to be calculated on incoming live data
                }
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Indicator.#ctor">
            <summary>
            Indicator class constructor
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicator.IsRealTime">
             <summary>
             Returns true, if the indicator is processing real time incoming data.
             </summary>
             <example>
             <code>
              public override void Calculate(int index)
             {
                 if (IsRealTime)
                 {
                     //Place the code-logic that you want to be calculated on incoming live data
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicator.IsLastBar">
             <summary>
             Returns true, if Calculate is invoked for the last bar
             </summary>
             <example>
             <code>
              public override void Calculate(int index)
             {
                 if (IsLastBar)
                 {
                     // this is the current (last) index
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicator.IndicatorArea">
            <summary>
            Defines the area where the indicator is placed.
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicator.Account">
            <summary>
            Contains information of the current account.
            </summary>
            <example>
            <code>
            if (Account.Balance &lt; 10000)
                Print(Account.Balance);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Indicator.Calculate(System.Int32)">
            <summary>
            Calculate the value(s) of indicator for the given index. 
            </summary>
            <param name="index">The index of calculated value.</param>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            
            public override void Calculate(int index)
            {
                //This is where we place our indicator's calculation logic.
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Indicator.Initialize">
            <summary>
            Custom initialization for the Indicator. This method is invoked when an indicator is launched.
            </summary>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            protected override void Initialize()
            {
                //Place your Initialization logic here
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Indicator.ToString">
            <summary>
            The name of the indicator derived class.
            </summary>
            <returns></returns>
            <example>
            <code>
                private SampleSMA sma;
                //...
                sma = Indicators.GetIndicator&lt;SampleSMA>(Source, Period);
                Print(sma.ToString());
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.IndicatorDataSeries">
             <summary>
             Represents a mutable array of values. An extension of DataSeries used to represent indicator values.
              </summary>
             <example>
             <code>
             //This will be the output result of your indicator
             [Output("Result", Color = Colors.Orange)]
             public IndicatorDataSeries Result { get; set; }
               </code>
             </example>
             <example>
             <code>
             //  The following example is the calculation of the simple moving average
             //  of the median price
             [Output("Result")]
             public IndicatorDataSeries Result { get; set; }
            
             private IndicatorDataSeries _dataSeries;
             private SimpleMovingAverage _simpleMovingAverage;
            
             protected override void Initialize()
             {
                 _dataSeries = CreateDataSeries();
                 _simpleMovingAverage = Indicators.SimpleMovingAverage(_dataSeries, 14);
             }
             public override void Calculate(int index)
             {
                 _dataSeries[index] = (MarketSeries.High[index] + MarketSeries.Low[index])/2;
                 Result[index] = _simpleMovingAverage.Result[index];
             }
             </code>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use an indicator data series
                 [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class IndicatorDataSeriesSample : Indicator
                 {
                     private IndicatorDataSeries _internalSeries;
            
                     [Output("Main", LineColor = "Yellow", PlotType = PlotType.Line, Thickness = 1)]
                     public IndicatorDataSeries Main { get; set; }
            
                     protected override void Initialize()
                     {
                         // If an indicator data series doesn't has the Output attribute then you must create it manually
                         _internalSeries = CreateDataSeries();
                     }
            
                     public override void Calculate(int index)
                     {
                         _internalSeries[index] = Bars.HighPrices[index];
            
                         Main[index] = _internalSeries[index] - Bars.LowPrices[index];
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.IndicatorDataSeries.Item(System.Int32)">
             <summary>
             Gets or sets the value at the specified index.
             </summary>
             <example>
             <code>
             //  The following example is the calculation of the median price
             [Output("Result")]
             public IndicatorDataSeries Result { get; set; }
            
             private IndicatorDataSeries _dataSeries;
            
             protected override void Initialize()
             {
                 _dataSeries = CreateDataSeries();
             }
             public override void Calculate(int index)
             {
            
                 _dataSeries[index] = (MarketSeries.High[index] + MarketSeries.Low[index])/2;
            
                 // Get the value of _dataSeries at index
                 // and set the value of Result at index
                 Result[index] = _dataSeries[index];
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.AcceleratorOscillator">
             <summary>
             Identifies possible trend reversals
             </summary>
             <example>
             <code>
             protected override void Initialize()
            	{
            	    acceleratorOscillator = Indicators.AcceleratorOscillator();
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use an Accelerator Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class AcceleratorOscillatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private AcceleratorOscillator _acceleratorOscillator;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _acceleratorOscillator = Indicators.AcceleratorOscillator();
                     }
            
                     protected override void OnBar()
                     {
                         foreach (var position in BotPositions)
                         {
                             if ((position.TradeType == TradeType.Buy &amp;&amp; _acceleratorOscillator.Result.Last(1) &lt; _acceleratorOscillator.Result.Last(2))
                                 || (position.TradeType == TradeType.Sell &amp;&amp; _acceleratorOscillator.Result.Last(1) &gt; _acceleratorOscillator.Result.Last(2)))
                             {
                                 ClosePosition(position);
                             }
                         }
            
                         if (_acceleratorOscillator.Result.Last(1) &amp; 0 &amp;&amp; _acceleratorOscillator.Result.Last(2) &lt;= 0)
                         {
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_acceleratorOscillator.Result.Last(1) &lt; 0 &amp;&amp; _acceleratorOscillator.Result.Last(2) &gt;= 0)
                         {
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.AcceleratorOscillator.Result">
            <summary>
            AcceleratorOscillator calculation result
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                var lastValue = acceleratorOscillator.Result.LastValue;
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.AccumulativeSwingIndex">
             <summary>
             A variation on Wilder's swing index which plots an accumulation of the swing index value of each candlestick or bar.
             </summary>
             <remarks>
             The accumulative swing index is used to gain a longer-term picture than the Wilder's swing index.
             When the accumulative swing index is positive, the long-term trend is up.
             When the accumulative swing index is negative, it signals a downwards long-term trend.
             </remarks>
             <example>
             <code>
            	using cAlgo.API;
            	using cAlgo.API.Indicators;
            
            	namespace cAlgo.Indicator
            	{
            	    [Indicator]
            	    public class AccumSwingIndexReferenceExample:Indicator
            	    {
            	        private AccumulativeSwingIndex _accumulativeSwingIndex;
            
            	        [Parameter("Limit Move", DefaultValue = 12)]
            	        public int LimitMove { get; set; }
            
            	        [Output("Main")]
            	        public IndicatorDataSeries Result { get; set; }
            
            	        protected override void Initialize()
            	        {
            	            _accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(LimitMove);
            	        }
            	        public override void Calculate(int index)
            	        {
                         // Display Result of Indicator
            	            Result[index] = _accumulativeSwingIndex.Result[index];
            	        }
            	    }
            	}
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use an Accumulative Swing Index indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class AccumulativeSwingIndexSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private AccumulativeSwingIndex _accumulativeSwingIndex;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(12);
                     }
            
                     protected override void OnBar()
                     {
                         foreach (var position in BotPositions)
                         {
                             if ((position.TradeType == TradeType.Buy &amp;&amp; _accumulativeSwingIndex.Result.Last(1) &lt; _accumulativeSwingIndex.Result.Last(2))
                                 || (position.TradeType == TradeType.Sell &amp;&amp; _accumulativeSwingIndex.Result.Last(1) &gt; _accumulativeSwingIndex.Result.Last(2)))
                             {
                                 ClosePosition(position);
                             }
                         }
            
                         if (_accumulativeSwingIndex.Result.Last(1) &gt; 0 &amp;&amp; _accumulativeSwingIndex.Result.Last(2) &lt;= 0)
                         {
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_accumulativeSwingIndex.Result.Last(1) &lt; 0 &amp;&amp; _accumulativeSwingIndex.Result.Last(2) &gt;= 0)
                         {
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.AccumulativeSwingIndex.Result">
             <summary>
             The time series of AccumulativeSwingIndex.
             </summary>
             <value>The Output Series of AccumulativeSwingIndex.</value>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             private AccumulativeSwingIndex _accumulativeSwingIndex;
            
             &#47;&#47;&#46;&#46;&#46;
            
             [Parameter("Limit Move", DefaultValue = 12)]
             public int LimitMove { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnStart()
             {
                 _accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(LimitMove);
             }
             protected override void OnBar()
             {
                 // Print to log
                 Print("The Current Accumulative Swing Index is: {0}", _accumulativeSwingIndex.Result.LastValue);
             }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.Alligator">
             <summary>
             Legendary trader Bill Williams, an early pioneer of market psychology, developed the trend-following Alligator indicator,
             which follows the premise that financial markets and individual securities trend just 15% to 30% of the time while grinding through sideways ranges the other 70% to 85% of the time.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Alligator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class AlligatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private Alligator _alligator;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _alligator = Indicators.Alligator(13, 18, 8, 5, 5, 3);
                     }
            
                     protected override void OnBar()
                     {
                         if (_alligator.Lips.Last(1) &gt; _alligator.Teeth.Last(1) &amp;&amp; _alligator.Lips.Last(2) &lt;= _alligator.Teeth.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_alligator.Lips.Last(1) &lt; _alligator.Teeth.Last(1) &amp;&amp; _alligator.Lips.Last(2) &gt;= _alligator.Teeth.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.Aroon">
             <summary>
             An indicator for identifying trends in a currency pair, as well as for gauging the probability of a trend reversal.
             </summary>
             <remarks>The indicator fluctuates between 0 and 100, with values above 80 signalling an upward trend, and values below 20 signalling a downward trend.
             </remarks>
             <example>
             <code>
            	using cAlgo.API;
            	using cAlgo.API.Indicators;
            
            	namespace cAlgo.Indicators
            	{
            	    [Indicator]
            	    public class AroonReferenceExample:Indicator
            	    {
            	        private Aroon _aroon;
            
            	        [Parameter("Periods", DefaultValue = 25)]
            	        public int Periods { get; set; }
            
            	        [Output("Up")]
            	        public IndicatorDataSeries ResultAroonUp { get; set; }
            
            	        [Output("Down")]
            	        public IndicatorDataSeries ResultAroonDown { get; set; }
            
            	        protected override void Initialize()
            	        {
            	            _aroon = Indicators.Aroon(Periods);
            	        }
            
            	        public override void Calculate(int index)
            	        {
            	            ResultAroonUp[index] = _aroon.Up[index];
            	            ResultAroonDown[index] = _aroon.Down[index];
            	        }
            
            	    }
            	}
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use an Aroon indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class AroonSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private Aroon _accumulativeSwingIndex;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _accumulativeSwingIndex = Indicators.Aroon(25);
                     }
            
                     protected override void OnBar()
                     {
                         if (_accumulativeSwingIndex.Up.Last(1) &gt; _accumulativeSwingIndex.Down.Last(1) &amp;&amp; _accumulativeSwingIndex.Up.Last(2) &lt; _accumulativeSwingIndex.Down.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_accumulativeSwingIndex.Up.Last(1) &lt; _accumulativeSwingIndex.Down.Last(1) &amp;&amp; _accumulativeSwingIndex.Up.Last(2) &gt; _accumulativeSwingIndex.Down.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.Aroon.Up">
             <summary>
             Aroon Up
             </summary>
             <value>The Aroon Up result.</value>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Parameter("Periods", DefaultValue = 25)]
             public int Periods { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
            	private Aroon _aroon;
            
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnStart()
             {
                 _aroon = Indicators.Aroon(Periods);
             }
             protected override void OnBar()
             {
                 Print("Current Aroon Up Value is: {0}", _aroon.Up.LastValue);
             }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.Aroon.Down">
             <summary>
             Aroon Down
             </summary>
             <value>The Aroon Down result.</value>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Parameter("Periods", DefaultValue = 25)]
             public int Periods { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
            	private Aroon _aroon;
            
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnStart()
             {
                 _aroon = Indicators.Aroon(Periods);
             }
             protected override void OnBar()
             {
                 Print("Current Aroon Down Value is: {0}", _aroon.Down.LastValue);
             }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating">
             <summary>
             The Average Directional Movement Index Rating (ADXR) measures the strength of the Average Directional Movement Index (ADX).
             It's calculated by taking the average of the current ADX and the ADX from one time period before.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Average Directional Movement Index Rating indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class AverageDirectionalMovementIndexRatingSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private AverageDirectionalMovementIndexRating _averageDirectionalMovementIndexRating;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _averageDirectionalMovementIndexRating = Indicators.AverageDirectionalMovementIndexRating(20);
                     }
            
                     protected override void OnBar()
                     {
                         if (_averageDirectionalMovementIndexRating.ADXR.Last(1) &lt; 25) return;
            
                         if (_averageDirectionalMovementIndexRating.DIPlus.Last(1) &gt; _averageDirectionalMovementIndexRating.DIMinus.Last(1) &amp;&amp; _averageDirectionalMovementIndexRating.DIPlus.Last(2) &lt;= _averageDirectionalMovementIndexRating.DIMinus.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_averageDirectionalMovementIndexRating.DIPlus.Last(1) &lt; _averageDirectionalMovementIndexRating.DIMinus.Last(1) &amp;&amp; _averageDirectionalMovementIndexRating.DIPlus.Last(2) &gt;= _averageDirectionalMovementIndexRating.DIMinus.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating.ADX">
             <summary>
            
             </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating.ADXR">
             <summary>
            
             </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating.DIMinus">
             <summary>
            
             </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating.DIPlus">
             <summary>
            
             </summary>
        </member>
        <member name="T:cAlgo.API.Indicators.AverageTrueRange">
             <summary>
             Average true range. An indicator providing the degree of price volatility.
             </summary>
             <remarks>
             Average true range is a volatility indicator originally developed by J. Welles Wilder. The indicator provides the degree of price volatility. The average true range is an N-day (exponential) moving average of the true range values. Wilder recommended a 14-period smoothing.
             </remarks>
             <example>
             <code>
             private AverageTrueRange averageTrueRange;
            
             [Parameter(DefaultValue = 14)]
             public int Periods { get; set; }
            
             [Parameter(DefaultValue = 0.002)]
             public double ATRValue { get; set; }
            
             [Parameter("MA Type", DefaultValue = MovingAverageType.Exponential)]
             public MovingAverageType MAType { get; set; }
            
             protected override void OnStart()
             {
                 averageTrueRange = Indicators.AverageTrueRange(Periods, MAType);
             }
            
             protected override void OnTick()
             {
                 // if the 14 day Average True Range is higher than 0.002
                 if(averageTrueRange.Result.LastValue &gt;= ATRValue)
                 {
                     // Do Something
                 }
            	}
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using System;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use an Average True Range indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class AverageTrueRangeSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private AverageTrueRange _averageTrueRange;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _averageTrueRange = Indicators.AverageTrueRange(14, MovingAverageType.Exponential);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; Bars.OpenPrices.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; Bars.OpenPrices.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteOrder(TradeType.Buy);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; Bars.OpenPrices.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; Bars.OpenPrices.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteOrder(TradeType.Sell);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
            
                     private void ExecuteOrder(TradeType tradeType)
                     {
                         var atrInPips = _averageTrueRange.Result.Last(1) * (Symbol.TickSize / Symbol.PipSize * Math.Pow(10, Symbol.Digits));
            
                         var stopLossInPips = atrInPips * 2;
                         var takeProfitInPips = stopLossInPips * 2;
            
                         ExecuteMarketOrder(tradeType, SymbolName, _volumeInUnits, Label, stopLossInPips, takeProfitInPips);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.AverageTrueRange.Result">
            <summary>
            The resulting data series of Average True Range Indicator instance
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                // Plot the Average True Range of period 14
                Result[index] = averageTrueRange.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.AwesomeOscillator">
             <summary>
             Displays the market momentum as a histogram.
             </summary>
             <example>
             <code>
             protected override void Initialize()
            	{
            	    awesomeOscillator = Indicators.AwesomeOscillator();
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use an Awesome Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class AwesomeOscillatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private AwesomeOscillator _awesomeOscillator;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _awesomeOscillator = Indicators.AwesomeOscillator();
                     }
            
                     protected override void OnBar()
                     {
                         foreach (var position in BotPositions)
                         {
                             if ((position.TradeType == TradeType.Buy &amp;&amp; _awesomeOscillator.Result.Last(1) &lt; _awesomeOscillator.Result.Last(2))
                                 || (position.TradeType == TradeType.Sell &amp;&amp; _awesomeOscillator.Result.Last(1) &gt; _awesomeOscillator.Result.Last(2)))
                             {
                                 ClosePosition(position);
                             }
                         }
            
                         if (_awesomeOscillator.Result.Last(1) &gt; 0 &amp;&amp; _awesomeOscillator.Result.Last(2) &lt;= 0)
                         {
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_awesomeOscillator.Result.Last(1) &lt; 0 &amp;&amp; _awesomeOscillator.Result.Last(2) &gt;= 0)
                         {
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.AwesomeOscillator.Result">
            <summary>
            Gets the Awesome Oscillator calculation result.
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                var lastValue = awesomeOscillator.Result.LastValue;
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.BollingerBands">
             <summary>
             Bollinger Bands are used to confirm signals. The bands indicate overbought and oversold levels relative to a moving average.
             </summary>
             <remarks>Bollinger bands widen in volatile market periods, and contract during less volatile periods. Tightening of the bands is often used a signal that there will shortly be a sharp increase in market volatility.
             </remarks>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Robot]
             public class SampleRobot : Robot
            
             &#47;&#47;&#46;&#46;&#46;
            
             [Parameter("Source")]
             public DataSeries Source { get; set; }
            
             [Parameter("BandPeriods", DefaultValue = 14)]
             public int BandPeriod { get; set; }
            
             [Parameter("Std", DefaultValue = 14)]
             public int std { get; set; }
            
             [Parameter("MAType")]
             public MovingAverageType MAType { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
             private BollingerBands boll;
            
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnStart()
             {
                 boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
             }
             protected override void OnBar()
             {
                 Print("Current Main Bollinger Band's price is: {0}", boll.Main.LastValue);
                 Print("Current Bottom Bollinger Band's price is: {0}", boll.Bottom.LastValue);
                 Print("Current Top Bollinger Band's price is: {0}", boll.Top.LastValue);
             }
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 /// <summary>
                 /// This sample cBot shows how to use the Bollinger Bands indicator
                 /// </summary>
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class BollingerBandsSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private BollingerBands _bollingerBands;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     [Parameter("Source")]
                     public DataSeries Source { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _bollingerBands = Indicators.BollingerBands(Source, 14, 2, MovingAverageType.Exponential);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.LowPrices.Last(1) &lt;= _bollingerBands.Bottom.Last(1) &amp;&amp; Bars.LowPrices.Last(2) &gt; _bollingerBands.Bottom.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label);
                         }
                         else if (Bars.HighPrices.Last(1) &gt;= _bollingerBands.Top.Last(1) &amp;&amp; Bars.HighPrices.Last(2) &lt; _bollingerBands.Top.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.BollingerBands.Main">
             <summary>
             Moving Average (Middle Bollinger Band).
             </summary>
             <value>The main result.</value>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Robot]
             public class SampleRobot : Robot
            
             &#47;&#47;&#46;&#46;&#46;
            
             [Parameter("Source")]
             public DataSeries Source { get; set; }
            
             [Parameter("BandPeriods", DefaultValue = 14)]
             public int BandPeriod { get; set; }
            
             [Parameter("Std", DefaultValue = 14)]
             public int std { get; set; }
            
             [Parameter("MAType")]
             public MovingAverageType MAType { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
             private BollingerBands boll;
            
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnStart()
             {
                 boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
             }
             protected override void OnBar()
             {
                 Print("Current Main Bollinger Band's price is: {0}", boll.Main.LastValue);
             }
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.BollingerBands.Top">
             <summary>
             Upper Bollinger Band.
             </summary>
             <value>The Upper Bollinger Band result.</value>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Robot]
             public class SampleRobot : Robot
            
             &#47;&#47;&#46;&#46;&#46;
            
             [Parameter("Source")]
             public DataSeries Source { get; set; }
            
             [Parameter("BandPeriods", DefaultValue = 14)]
             public int BandPeriod { get; set; }
            
             [Parameter("Std", DefaultValue = 14)]
             public int std { get; set; }
            
             [Parameter("MAType")]
             public MovingAverageType MAType { get; set; }
            
             &#47;&#47;&#46;&#46;&#46;
            
             private BollingerBands boll;
            
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnStart()
             {
                 boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
             }
             protected override void OnBar()
             {
                 Print("Current Top Bollinger Band's price is: {0}", boll.Top.LastValue);
             }
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.BollingerBands.Bottom">
            <summary>
            Lower Bollinger Band.
            </summary>
            <value>The Bottom Bollinger Band result.</value>
            <example>
            <code>
            &#47;&#47;&#46;&#46;&#46;
            [Parameter("Source")]
            public DataSeries Source { get; set; }
            [Parameter("BandPeriods", DefaultValue = 14)]
            public int BandPeriod { get; set; }
            [Parameter("Std", DefaultValue = 14)]
            public int std { get; set; }
            [Parameter("MAType")]
            public MovingAverageType MAType { get; set; }
            &#47;&#47;&#46;&#46;&#46;
            private BollingerBands boll;
            &#47;&#47;&#46;&#46;&#46;
            protected override void OnStart()
            {
                boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
            }
            protected override void OnBar()
            {
                Print("Current Bottom Bollinger Band's price is: {0}", boll.Bottom.LastValue);
            }
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.CenterOfGravity">
             <summary>
             The Center of Gravity (COG) indicator is a technical indicator developed by John Ehlers in 2002, used to identify potential turning points in the price as early as possible.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Center Of Gravity indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class CenterOfGravitySample : Robot
                 {
                     private double _volumeInUnits;
            
                     private CenterOfGravity _centerOfGravity;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _centerOfGravity = Indicators.CenterOfGravity(10);
                     }
            
                     protected override void OnBar()
                     {
                         if (_centerOfGravity.Result.Last(1) &gt; _centerOfGravity.Lag.Last(1) &amp;&amp; _centerOfGravity.Result.Last(2) &lt;= _centerOfGravity.Lag.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_centerOfGravity.Result.Last(1) &lt; _centerOfGravity.Lag.Last(1) &amp;&amp; _centerOfGravity.Result.Last(2) &gt;= _centerOfGravity.Lag.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.ChaikinMoneyFlow">
             <summary>
             The Chaikin Money Flow Indicator measures the amount of Money Flow Volume over a specific period. The resulting indicator fluctuates above/below the zero line.
             </summary>
             <example>
             <code>
             private ChaikinMoneyFlow _chaikinMoneyFlow;
            
             [Parameter("Period", DefaultValue = 21)]
             public int Period { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Period);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _chaikinMoneyFlow.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Chaikin Money Flow indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChaikinMoneyFlowSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private ChaikinMoneyFlow _chaikinMoneyFlow;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_chaikinMoneyFlow.Result.Last(1) &gt; 0 &amp;&amp; _chaikinMoneyFlow.Result.Last(2) &lt;= 0)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_chaikinMoneyFlow.Result.Last(1) &lt; 0 &amp;&amp; _chaikinMoneyFlow.Result.Last(2) &gt;= 0)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.ChaikinMoneyFlow.Result">
             <summary>
             The time series of the Chaikin Money Flow Indicator.
             </summary>
             <example>
             <code>
             private ChaikinMoneyFlow _chaikinMoneyFlow;
            
             [Parameter("Period", DefaultValue = 21)]
             public int Period { get; set; }
            
             protected override void OnStart()
             {
                 _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Period);
             }
             protected override void OnBar()
             {
                 var currentValue = _chaikinMoneyFlow.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.ChaikinVolatility">
             <summary>
             The Chaikin Volatility Indicator interface.
             </summary>
             <remarks>
             The Chaikin Volatility's main purpose is to confirm price trends and to forecast price reversals.
             </remarks>
             <example>
             <code>
             private ChaikinVolatility chaikinVolatility;
            
             [Output("Main")]
            	public IndicatorDataSeries Result { get; set; }
            
            	protected override void Initialize()
            	{
                 chaikinVolatility = Indicators.ChaikinVolatility(14, 10, MovingAverageType.Simple);
            	}
            	public override void Calculate(int index)
            	{
                 // Display Result of Indicator
            	    Result[index] = _chaikinVolatility.Result[index];
            
            	}
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Chaikin Volatility indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ChaikinVolatilitySample : Robot
                 {
                     private double _volumeInUnits;
            
                     private ChaikinVolatility _chaikinVolatility;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _chaikinVolatility = Indicators.ChaikinVolatility(14, 10, MovingAverageType.Simple);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 9);
                     }
            
                     protected override void OnBar()
                     {
                         if (_chaikinVolatility.Result.Last(1) &gt; 0)
                         {
                             if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; _simpleMovingAverage.Result.Last(2))
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                             else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; _simpleMovingAverage.Result.Last(2))
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else
                         {
                             ClosePositions();
                         }
                     }
            
                     private void ClosePositions()
                     {
                         foreach (var position in BotPositions)
                         {
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.ChaikinVolatility.Result">
             <summary>
             Chaikin Volatility Result Series.
             </summary>
             <value>The Output Series of ChaikinVolatility.</value>
             <example>
             <code>
            
             private ChaikinVolatility _chaikinVolatility;
            
             protected override void OnStart()
             {
                 _chaikinVolatility = Indicators.ChaikinVolatility(Periods, _roc, MaType);
             }
             protected override void OnBar()
             {
                 // Print to log
                 Print("The Current Chaikin Volatility Value is: {0}",
                         _chaikinVolatility.Result.LastValue);
             }
            
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.CommodityChannelIndex">
             <summary>
             The Commodity Channel Index interface.
             </summary>
             <remarks>
             The Commodity Channel Index is used to determine overbought and oversold conditions relating to a symbol. The Commodity Channel Index can be used to forecast changes in price direction.
             </remarks>
             <example>
             <code>
            	using cAlgo.API;
            	using cAlgo.API.Indicators;
            
            	namespace cAlgo.Indicator
            	{
            	    [Indicator]
            	    public class CommodityChannelIndexReferenceExample:Indicator
            	    {
            	        private CommodityChannelIndex _commodityChannelIndex;
            
            	        [Parameter("Periods", DefaultValue = 14)]
                     public int Periods { get; set; }
            
            	        [Output("Main")]
            	        public IndicatorDataSeries Result { get; set; }
            
            	        protected override void Initialize()
            	        {
            	            _commodityChannelIndex = Indicators.CommodityChannelIndex(Periods);
            	        }
            	        public override void Calculate(int index)
            	        {
                         // Display Result of Indicator
            	            Result[index] = _commodityChannelIndex.Result[index];
            	        }
            	    }
            	}
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Commodity Channel Index indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class CommodityChannelIndexSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private CommodityChannelIndex _commodityChannelIndex;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _commodityChannelIndex = Indicators.CommodityChannelIndex(14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_commodityChannelIndex.Result.Last(1) &gt; 100 &amp;&amp; _commodityChannelIndex.Result.Last(2) &lt;= 100)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_commodityChannelIndex.Result.Last(1) &lt; -100 &amp;&amp; _commodityChannelIndex.Result.Last(2) &gt;= -100)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.CommodityChannelIndex.Result">
             <summary>
             Commodity Channel Index Result Series.
             </summary>
             <value>The Output Series of CommodityChannelIndex.</value>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             private CommodityChannelIndex _commodityChannelIndex;
            
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnStart()
             {
                 _commodityChannelIndex = Indicators.CommodityChannelIndex(Periods);
             }
             protected override void OnBar()
             {
                 // Print to log
                 Print("The Current Commodity Channel Index is: {0}", _commodityChannelIndex.Result.LastValue);
             }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.CyberCycle">
             <summary>
             The Cyber Cycles Oscillator is an indicator designed by John Ehlers, it is used for isolating the cycle component of the market from its trend counterpart.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Cyber Cycle indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class CyberCycleSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private CyberCycle _cyberCycle;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _cyberCycle = Indicators.CyberCycle(0.07);
                     }
            
                     protected override void OnBar()
                     {
                         if (_cyberCycle.Cycle.Last(1) &gt; _cyberCycle.Trigger.Last(1) &amp;&amp; _cyberCycle.Cycle.Last(2) &lt;= _cyberCycle.Trigger.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_cyberCycle.Cycle.Last(1) &lt; _cyberCycle.Trigger.Last(1) &amp;&amp; _cyberCycle.Cycle.Last(2) &gt;= _cyberCycle.Trigger.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.DetrendedPriceOscillator">
             <summary>
             The Detrended Price Oscillator Indicator interface.
             </summary>
             <remarks>
             The Detrended Price Oscillator eliminates trends in prices, showing only absolute changes in price movement.
             </remarks>
             <example>
             <code>
            	private DetrendedPriceOscillator _detrendedPriceOscillator;
            
            	[Output("Main")]
            	public IndicatorDataSeries Result { get; set; }
            
            	protected override void Initialize()
            	{
            	    _detrendedPriceOscillator = Indicators.DetrendedPriceOscillator(Source, Periods, MaType);
            	}
            	public override void Calculate(int index)
            	{
                 // Display Result of Indicator
            	    Result[index] = _detrendedPriceOscillator.Result[index];
            	}
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Detrended Price Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class DetrendedPriceOscillatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private DetrendedPriceOscillator _detrendedPriceOscillator;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _detrendedPriceOscillator = Indicators.DetrendedPriceOscillator(Bars.ClosePrices, 14, MovingAverageType.Simple);
                     }
            
                     protected override void OnBar()
                     {
                         if (_detrendedPriceOscillator.Result.Last(1) &gt; 0 &amp;&amp; _detrendedPriceOscillator.Result.Last(2) &lt;= 0)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_detrendedPriceOscillator.Result.Last(1) &lt; 0 &amp;&amp; _detrendedPriceOscillator.Result.Last(2) &gt;= 0)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DetrendedPriceOscillator.Result">
             <summary>
             The resulting time series of Detrended Price Oscillator calculation.
             </summary>
             <example>
             <code>
            
             private _detrendedPriceOscillator _dpoFast;
             private _detrendedPriceOscillator _dpoSlow;
            
             protected override void OnStart()
             {
                 _dpoFast = Indicators.DetrendedPriceOscillator(Source, PeriodFast, MaType);
                 _dpoSlow = Indicators.DetrendedPriceOscillator(Source, PeriodSlow, MaType);
             }
            
             protected override void OnBar()
             {
                 if(_dpoFast.Result.Count &#60; 1)
                     return;
            
                 int currentIndex = _dpoFast.Result.Count - 1;
                 int prevIndex = currentIndex - 1;
            
                 if (_dpoFast.Result[prevIndex] &gt; _dpoSlow.Result[prevIndex])
                 {
                     //Do something
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.DirectionalMovementSystem">
             <summary>
             The Welles Wilder's Directional Movement Indicator calculation.
             </summary>
             <remarks>
              Welles Wilder's Directional Movement System uses three indicators to determine whether the market is trending, and in which direction, and sends trading signals accordingly. A buy signal occurs when +DI line crosses above -DI line. A sell signal occurs when -DI line crosses below +DI line.</remarks>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Indicator(IsOverlay = true)]
             public class SampleADX : Indicator
             {
                 private DirectionalMovementSystem _dms;
                 private double _dIplus;
                 private double _dIminus;
            
                 [Parameter("ADX Period", DefaultValue = 14)]
                 public int Period { get; set; }
            
                 [Output("Buy", PlotType = PlotType.Points, Color = Colors.Green, Thickness = 4)]
                 public IndicatorDataSeries Buy { get; set; }
            
                 [Output("Sell", PlotType = PlotType.Points, Color = Colors.Red, Thickness = 4)]
                 public IndicatorDataSeries Sell { get; set; }
            
                 protected override void Initialize()
                 {
                     _dms = Indicators.DirectionalMovementSystem(Period);
                 }
            
                 public override void Calculate(int index)
                 {
            
                     _dIplus = _dms.DIPlus[index];
                     _dIminus = _dms.DIMinus[index];
            
                     if (_dIminus &gt; _dIplus)
                     {
                         Sell[index] = MarketSeries.Close[index] + Symbol.PointSize*100;
                     }
                     else
                     {
                         Buy[index] = MarketSeries.Close[index] - Symbol.PointSize*100;
                     }
                 }
             }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Directional Movement System indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class DirectionalMovementSystemSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private DirectionalMovementSystem _directionalMovementSystem;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _directionalMovementSystem = Indicators.DirectionalMovementSystem(20);
                     }
            
                     protected override void OnBar()
                     {
                         if (_directionalMovementSystem.ADX.Last(1) &lt; 25) return;
            
                         if (_directionalMovementSystem.DIPlus.Last(1) &gt; _directionalMovementSystem.DIMinus.Last(1) &amp;&amp; _directionalMovementSystem.DIPlus.Last(2) &lt;= _directionalMovementSystem.DIMinus.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_directionalMovementSystem.DIPlus.Last(1) &lt; _directionalMovementSystem.DIMinus.Last(1) &amp;&amp; _directionalMovementSystem.DIPlus.Last(2) &gt;= _directionalMovementSystem.DIMinus.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DirectionalMovementSystem.ADX">
             <summary>
             The Average Directional Movement Index (ADX) indicates whether the market is trending or ranging.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Robot]
             public class SampleRobot : Robot
            
             &#47;&#47;&#46;&#46;&#46;
            
             private DirectionalMovementSystem _dms;
            
             protected override void Initialize()
             {
                 _dms = Indicators.DirectionalMovementSystem(Period);
             }
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnBar()
             {
                 Print("The Current Average Directional Movement Index is: {0}", _dms.ADX.LastValue);
             }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DirectionalMovementSystem.DIPlus">
             <summary>
             The Positive Direction Indicator (+DI) indicates upward trend movement.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Robot]
             public class SampleRobot : Robot
            
             &#47;&#47;&#46;&#46;&#46;
            
             private DirectionalMovementSystem _dms;
            
             protected override void Initialize()
             {
                 _dms = Indicators.DirectionalMovementSystem(Period);
             }
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnBar()
             {
                 Print("The Current Positive Direction Indicator (+DI) is: {0}", _dms.DIPlus.LastValue);
             }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DirectionalMovementSystem.DIMinus">
             <summary>
             The Negative Direction Indicator (-DI) indicates downward trend movement.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Robot]
             public class SampleRobot : Robot
            
             &#47;&#47;&#46;&#46;&#46;
            
             private DirectionalMovementSystem _dms;
            
             protected override void Initialize()
             {
                 _dms = Indicators.DirectionalMovementSystem(Period);
             }
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnBar()
             {
                 Print("The Current Negative Direction Indicator (-DI) is: {0}", _dms.DIMinus.LastValue);
             }
            
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.DonchianChannel">
             <summary>
             The Donchian channel is a volatility indicator forming a channel between the highest high and the lowest low of the chosen period.
             </summary>
             <remarks>
             The Donchian channel is mainly used for providing entry signals. A long is established when the price closes above the Donchian Channel. Conversely, if it closes below, then a short is established.
             </remarks>
             <example>
             <code>
             //...
             private DonchianChannel donchian;
             //...
             protected override void OnStart()
             {
                 donchian = Indicators.DonchianChannel(Period);
             }
             protected override void OnBar()
             {
                 Print("Top Value = {0}", donchian.Top.LastValue);
                 Print("Middle Value = {0}", donchian.Middle.LastValue);
                 Print("Bottom Value = {0}", donchian.Bottom.LastValue);
                 //...
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 /// This sample cBot shows how to use the Donchian Channel indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class DonchianChannelSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private DonchianChannel _donchianChannel;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     [Parameter("Source")]
                     public DataSeries Source { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _donchianChannel = Indicators.DonchianChannel(20);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.LowPrices.Last(1) &lt;= _donchianChannel.Bottom.Last(1) &amp;&amp; Bars.LowPrices.Last(2) &gt; _donchianChannel.Bottom.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label);
                         }
                         else if (Bars.HighPrices.Last(1) &gt;= _donchianChannel.Top.Last(1) &amp;&amp; Bars.HighPrices.Last(2) &lt; _donchianChannel.Top.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DonchianChannel.Top">
            <summary>
            Gets or sets the highest high of the period.
            </summary>
            <example>
            <code>
            //...
            private DonchianChannel donchian;
            //...
            Print("Top Value = {0}", donchian.Top.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DonchianChannel.Middle">
            <summary>
             Gets or sets the middle of the highest high and the lowest low of the period.
            </summary>
            <example>
            <code>
            //...
            private DonchianChannel donchian;
            //...
            Print("Middle Value = {0}", donchian.Middle.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.DonchianChannel.Bottom">
            <summary>
            Gets or sets the lowest low of the period.
            </summary>
            <example>
            <code>
            //...
            private DonchianChannel donchian;
            //...
            Print("Bottom Value = {0}", donchian.Bottom.LastValue);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.EaseOfMovement">
             <summary>
             Ease of Movement is a volume based oscillator that measures the "ease" of price movement.
             </summary>
             <remarks>
             It quantifies the price/volume relationship. When the oscillator is close to zero it signifies that prices will not move easy. Conversely, prices are advancing or declining with relative ease when the oscillator is positive or negative away from zero.
             </remarks>
             <example>
             <code>
             private EaseOfMovement _easeOfMovement;
            
             [Parameter("Period", DefaultValue = 14)]
             public int Period { get; set; }
            
             [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
             public MovingAverageType MAType { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _easeOfMovement = Indicators.EaseOfMovement(Period, MAType);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _easeOfMovement.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Ease Of Movement indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class EaseOfMovementSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private EaseOfMovement _easeOfMovement;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _easeOfMovement = Indicators.EaseOfMovement(14, MovingAverageType.Simple);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 9);
                     }
            
                     protected override void OnBar()
                     {
                         if (_easeOfMovement.Result.Last(1) &gt; (Symbol.TickSize * 0.05))
                         {
                             if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; _simpleMovingAverage.Result.Last(2))
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                             else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; _simpleMovingAverage.Result.Last(2))
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else
                         {
                             ClosePositions();
                         }
                     }
            
                     private void ClosePositions()
                     {
                         foreach (var position in BotPositions)
                         {
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.EaseOfMovement.Result">
             <summary>
             The time series of the Ease Of Movement Indicator.
             </summary>
             <example>
             <code>
             private EaseOfMovement _easeOfMovement;
            
             [Parameter("Period", DefaultValue = 21)]
             public int Period { get; set; }
            
             [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
             public MovingAverageType MAType { get; set; }
            
             protected override void OnStart()
             {
                 _easeOfMovement = Indicators.EaseOfMovement(Period, MAType);
             }
             protected override void OnBar()
             {
                 var currentValue = _easeOfMovement.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.ExponentialMovingAverage">
             <summary>
             The exponential moving average of the price data source over a period of time.
             </summary>
             <remarks>
             The exponential moving average is similar to the simple moving average, but applies more weight to more recent data. The weighting for each older price data decreases exponentially. Therefore the exponential moving average reacts faster to latest price changes than the simple moving average.
             </remarks>
             <example>
             <code>
            	    [Indicator]
            	    public class EmaExample : Indicator
            	    {
            	        private ExponentialMovingAverage _emaFast;
            	        private ExponentialMovingAverage _emaSlow;
            
            	        [Parameter("Data Source")]
            	        public DataSeries Price { get; set; }
            
            	        [Parameter("Slow Periods", DefaultValue = 10)]
            	        public int SlowPeriods { get; set; }
            
            	        [Parameter("Fast Periods", DefaultValue = 5)]
            	        public int FastPeriods { get; set; }
            
            	        protected override void Initialize()
            	        {
                         // initialize new instances of ExponentialMovingAverage Indicator class
            	            _emaFast = Indicators.ExponentialMovingAverage(Price, FastPeriods);
                         // _emaSlow is the exponential moving average of the emaFast
            	            _emaSlow = Indicators.ExponentialMovingAverage(_emaFast.Result, SlowPeriods);
            
            	        }
            
            	        public override void Calculate(int index)
            	        {
                         // If the index is less than SlowPeriods don't calculate
            	            if(index &#60;= SlowPeriods)
            	            {
            	                return;
            	            }
            
            	            if(_emaFast.Result.HasCrossedAbove(_emaSlow.Result,0))
            	            {
                             // Print the index at which the fast ema crossed the slow ema
            	                Print("Fast EMA Has Crossed Above at index = {0}", index);
            	            }
            	        }
                 }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Exponential Moving Average indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ExponentialMovingAverageSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private ExponentialMovingAverage _fastExponentialMovingAverage;
            
                     private ExponentialMovingAverage _slowExponentialMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fastExponentialMovingAverage = Indicators.ExponentialMovingAverage(Bars.ClosePrices, 9);
            
                         _slowExponentialMovingAverage = Indicators.ExponentialMovingAverage(Bars.ClosePrices, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (_fastExponentialMovingAverage.Result.Last(1) &gt; _slowExponentialMovingAverage.Result.Last(1) &amp;&amp; _fastExponentialMovingAverage.Result.Last(2) &lt; _slowExponentialMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_fastExponentialMovingAverage.Result.Last(1) &lt; _slowExponentialMovingAverage.Result.Last(1) &amp;&amp; _fastExponentialMovingAverage.Result.Last(2) &gt; _slowExponentialMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.FractalChaosBands">
             <summary>
             The Fractal Chaos Bands indicator attempts to determine whether or not the market is trending.
             </summary>
             <remarks>
             When the market is trending, the bands will have a slope, and if the market is not trending or choppy, the bands will flatten out. The flatter the bands, the stronger the signal that the market is choppy. The more steep the band slopes, the stronger the signal that the market trending or stable.
             </remarks>
             <example>
             <code>
             private FractalChaosBands _fractalChaosBands;
            
            	protected override void Initialize()
            	{
            	    _fractalChaosBands = Indicators.FractalChaosBands();
            	}
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Fractal Chaos Bands indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class FractalChaosBandsSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private FractalChaosBands _fractalChaosBands;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fractalChaosBands = Indicators.FractalChaosBands();
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; _fractalChaosBands.High.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _fractalChaosBands.High.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _fractalChaosBands.Low.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _fractalChaosBands.Low.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.FractalChaosBands.High">
             <summary>
             The high limit of the chaos band.
             </summary>
             <example>
             <code>
            
             public override void Calculate(int index)
            	{
            	    Print("Fractal Chaos Bands High = {0}", _fractalChaosBands.High[index]);
            	}
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.FractalChaosBands.Low">
            <summary>
            The low limit of the chaos band.
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                Print("Fractal Chaos Bands Low = {0}", _fractalChaosBands.Low[index]);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.Fractals">
             <summary>
             The fractal indicator is a trading indicator used in technical analysis that is used to identify potential trend reversal points in a market.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Fractals indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class FractalsSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private Fractals _fractals;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fractals = Indicators.Fractals(5);
                     }
            
                     protected override void OnBar()
                     {
                         if (!double.IsNaN(_fractals.DownFractal.Last(1)))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (!double.IsNaN(_fractals.UpFractal.Last(1)))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.HighMinusLow">
             <summary>
             Difference between MarketSeries.High and MarketSeries.Low calculation for each index
             </summary>
             <remarks>
             This volatility indicator works by calculating the difference between the high and the low of each trendbar. The larger the difference between high and low, the more volatile the market during that period.
             </remarks>
             <example>
             <code>
            	using cAlgo.API;
            	using cAlgo.API.Indicators;
            
            	namespace cAlgo.Indicators
            	{
            	    [Indicator]
            	    public class Example : Indicator
            	    {
            	        private HighMinusLow _highMinusLow;
            
            	        protected override void Initialize()
            	        {
            	            _highMinusLow = Indicators.HighMinusLow();
            	        }
            
            	        public override void Calculate(int index)
            	        {
                         // same as MarketSeries.High[index] - MarketSeries.Low[index];
            	            Print("High minus Low result = {0}", _highMinusLow.Result[index]);
            	        }
            	    }
            	}
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 /// <summary>
                 /// This sample cBot shows how to use the High Minus Low indicator
                 /// </summary>
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class HighMinusLowSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private HighMinusLow _highMinusLow;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _highMinusLow = Indicators.HighMinusLow();
                     }
            
                     protected override void OnBar()
                     {
                         if (_highMinusLow.Result.Last(1) &lt; _highMinusLow.Result.Maximum(10)) return;
            
                         if (Bars.ClosePrices.Last(1) &gt; Bars.OpenPrices.Last(1))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; Bars.OpenPrices.Last(1))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.HighMinusLow.Result">
            <summary>
            The resulting time series of the calculation.
            </summary>
            <example>
            <code>
            Print("High minus Low result = {0}", _highMinusLow.Result[index]);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.HistoricalVolatility">
             <summary>
             The measured price fluctuation over a specified time period.
             </summary>
             <remarks>
             The higher the values of the indicator, the more volatile an instrument is.
             </remarks>
             <example>
             <code>
             private HistoricalVolatility historicalVolatility;
            
            	private const int BarHistory = 252;
            
            	[Parameter("Period", DefaultValue = 14)]
            	public int Period { get; set; }
            
            	protected override void Initialize()
            	{
                 historicalVolatility = Indicators.HistoricalVolatility
                     (MarketSeries.Close, Period, BarHistory);
            	}
            
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Historical Volatility indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class HistoricalVolatilitySample : Robot
                 {
                     private double _volumeInUnits;
            
                     private HistoricalVolatility _historicalVolatility;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _historicalVolatility = Indicators.HistoricalVolatility(Bars.ClosePrices, 14, 252);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 9);
                     }
            
                     protected override void OnBar()
                     {
                         if (_historicalVolatility.Result.Last(1) &lt; _historicalVolatility.Result.Maximum(14)) return;
            
                         if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; _simpleMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; _simpleMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.HistoricalVolatility.Result">
             <summary>
             The result of the HistoricalVolatility Indicator
             </summary>
             <example>
             <code>
             public override void Calculate(int index)
             {
                 Print("Historical Volatility = {0}",
                      _historicalVolatility.Result[index]);
            	    }
            
              </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.HullMovingAverage">
             <summary>
             The Hull Moving Average (HMA) is a directional trend indicator. It captures the current state of the market and uses recent price action to determine if conditions are bullish or bearish relative to historical data.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Hull Moving Average indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class HullMovingAverageSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private HullMovingAverage _fastHull;
            
                     private HullMovingAverage _slowHull;
            
                     [Parameter("Source", Group = "Fast MA")]
                     public DataSeries FastMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
                     public int FastMaPeriod { get; set; }
            
                     [Parameter("Source", Group = "Slow MA")]
                     public DataSeries SlowMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
                     public int SlowMaPeriod { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fastHull = Indicators.HullMovingAverage(FastMaSource, FastMaPeriod);
                         _slowHull = Indicators.HullMovingAverage(SlowMaSource, SlowMaPeriod);
                     }
            
                     protected override void OnBar()
                     {
                         if (_fastHull.Result.HasCrossedAbove(_slowHull.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_fastHull.Result.HasCrossedBelow(_slowHull.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.IchimokuKinkoHyo">
             <summary>
             Ichimoku Kinko Hyo Indicator.
             </summary>
             <remarks>
             Ichimoku is a moving average based trend identification system. It contains more data points than standard candlestick charts and thus provides a clearer picture of potential price action.
             </remarks>
             <example>
             <code>
             //...
             private IchimokuKinkoHyo ichimokuKinkoHyo;
             //...
             protected override void OnStart()
             {
                 ichimokuKinkoHyo = Indicators.IchimokuKinkoHyo
                     (tenkanSenPeriods, kijunSenPeriods, senkouSpanBPeriods);
             }
             protected override void OnBar()
             {
                 Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
                 Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
                 Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
                 Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
                 Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);
            
                 //...
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 /// <summary>
                 /// This sample cBot shows how to use the Ichimoku Kinko Hyo indicator
                 /// </summary>
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class IchimokuKinkoHyoSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private IchimokuKinkoHyo _ichimokuKinkoHyo;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _ichimokuKinkoHyo = Indicators.IchimokuKinkoHyo(9, 26, 52);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; _ichimokuKinkoHyo.SenkouSpanB.Last(1))
                         {
                             ClosePositions(TradeType.Sell);
            
                             if (_ichimokuKinkoHyo.TenkanSen.Last(1) &gt; _ichimokuKinkoHyo.KijunSen.Last(1) &amp;&amp; _ichimokuKinkoHyo.TenkanSen.Last(2) &lt;= _ichimokuKinkoHyo.KijunSen.Last(2))
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _ichimokuKinkoHyo.SenkouSpanA.Last(1))
                         {
                             ClosePositions(TradeType.Buy);
            
                             if (_ichimokuKinkoHyo.TenkanSen.Last(1) &lt; _ichimokuKinkoHyo.KijunSen.Last(1) &amp;&amp; _ichimokuKinkoHyo.TenkanSen.Last(2) &gt;= _ichimokuKinkoHyo.KijunSen.Last(2))
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.KijunSen">
            <summary>
            This is a confirmation line, a support-resistance line, and can be used as a trailing stop line.
            </summary>
            <example>
            <code>
            Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.TenkanSen">
            <summary>
            It is primarily used as a signal line and a minor support-resistance line.
            </summary>
            <example>
            <code>
            Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.ChikouSpan">
            <summary>
            It is used as a support-resistance aid.
            </summary>
            <example>
            <code>
            Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.SenkouSpanA">
            <summary>
            Leading span 1, this line forms one edge of the kumo, or cloud.
            If the price is above the Senkou span, the top line serves as the first support level while the bottom line serves as the second support level.
            </summary>
            <example>
            <code>
            Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.SenkouSpanB">
            <summary>
            Leading span 2, this line forms the other edge of the kumo.
            </summary>
            <example>
            <code>
            Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.KeltnerChannels">
             <summary>
             The Keltner Channels are volatility-based envelopes set above and below an exponential moving average.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Keltner Channels indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class KeltnerChannelsSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private KeltnerChannels _keltnerChannels;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     [Parameter("Source")]
                     public DataSeries Source { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _keltnerChannels = Indicators.KeltnerChannels(20, MovingAverageType.Exponential, 10, MovingAverageType.Simple, 2);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.LowPrices.Last(1) &lt;= _keltnerChannels.Bottom.Last(1) &amp;&amp; Bars.LowPrices.Last(2) &gt; _keltnerChannels.Bottom.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label);
                         }
                         else if (Bars.HighPrices.Last(1) &gt;= _keltnerChannels.Top.Last(1) &amp;&amp; Bars.HighPrices.Last(2) &lt; _keltnerChannels.Top.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.KeltnerChannels.Main">
            <summary>
            Moving Average Line
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.KeltnerChannels.Top">
            <summary>
            Moving Average + ATR * BandDistance
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.KeltnerChannels.Bottom">
            <summary>
            Moving Average - ATR * BandDistance
            </summary>
        </member>
        <member name="T:cAlgo.API.Indicators.LinearRegressionForecast">
             <summary>
             Linear Regression Forecast is one of the indicators calculated by the Linear Regression approach.
             </summary>
             <remarks>
             The Linear Regression Forecast is used for identifying trends and trend direction, and shows the statistical trend of a financial instrument over a specified time period. The calculation uses a Linear Regression Line.
             </remarks>
             <example>
             <code>
            
             private LinearRegressionForecast _linearRegressionForecast;
            
             [Parameter("Period", DefaultValue = 14)]
             public int Period { get; set; }
            
             protected override void Initialize()
             {
                 // initialize a new instance of LinearRegressionForecastIndicator class
                 _linearRegressionForecast = Indicators.LinearRegressionForecast(MarketSeries.Close, Period);
             }
            
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Linear Regression Forecast indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class LinearRegressionForecastSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private LinearRegressionForecast _linearRegressionForecast;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _linearRegressionForecast = Indicators.LinearRegressionForecast(Bars.ClosePrices, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; _linearRegressionForecast.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _linearRegressionForecast.Result.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _linearRegressionForecast.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _linearRegressionForecast.Result.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.LinearRegressionForecast.Result">
            <summary>
            The Result Series of the Linear Regression Forecast Indicator
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                // Print the current result of the Linear Regression Forecast to the log
                Print("Linear Regression Forecast at the current index is = {0}", _linearRegressionForecast.Result[index]);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.LinearRegressionIntercept">
             <summary>
             Linear Regression Intercept is one of the indicators calculated by the Linear Regression approach.
             </summary>
             <remarks>
             Linear regression is a statistical tool used to predict the future from past data.
             </remarks>
             <example>
             <code>
             [Parameter("Period", DefaultValue = 14)]
            	public int Period { get; set; }
            
            	protected override void OnStart()
             {
                 // initialize a new instance of LinearRegressionIntercept indicator class
            	    _linearRegressionIntercept = Indicators.LinearRegressionIntercept(MarketSeries.Close, Period);
            	}
            	  </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Linear Regression Intercept indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class LinearRegressionInterceptSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private LinearRegressionIntercept _linearRegressionIntercept;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _linearRegressionIntercept = Indicators.LinearRegressionIntercept(Bars.ClosePrices, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; _linearRegressionIntercept.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _linearRegressionIntercept.Result.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _linearRegressionIntercept.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _linearRegressionIntercept.Result.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.LinearRegressionIntercept.Result">
             <summary>
             The Result Series of the Linear Regression Intercept Indicator
             </summary>
             <example>
             <code>
            
            	public override void Calculate(int index)
            	{
                 // Result of _linearRegressionIntercept at the current index
                 double result = _linearRegressionIntercept.Result[index];
                 // Print the current result to the log
            	    Print("Linear Regression Intercept at the current index is = {0}", result);
            	}
            
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.LinearRegressionRSquared">
             <summary>
             The Linear Regression R Squared is used to confirm the strength of the market trend.
             </summary>
             <remarks>
             A higher value of R-Squared means that the stronger the trend.
             </remarks>
             <example>
             <code>
             private LinearRegressionRSquared rSquared;
            
             protected override void OnStart()
             {
                 // initialize rSquared indicator
                 rSquared = Indicators.LinearRegressionRSquared(Source, Period);
             }
             protected override void OnTick()
             {
                 Print("{0}", rSquared.Result.LastValue);
             }
            
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Linear Regression R Squared indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class LinearRegressionRSquaredSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private LinearRegressionRSquared _linearRegressionRSquared;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     private ExponentialMovingAverage _exponentialMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _linearRegressionRSquared = Indicators.LinearRegressionRSquared(Bars.ClosePrices, 20);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(_linearRegressionRSquared.Result, 10);
            
                         _exponentialMovingAverage = Indicators.ExponentialMovingAverage(Bars.ClosePrices, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; _exponentialMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _exponentialMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             if (_linearRegressionRSquared.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _exponentialMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _exponentialMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             if (_linearRegressionRSquared.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.LinearRegressionRSquared.Result">
             <summary>
             The Result Series of the Linear Regression R Squared indicator.
             </summary>
             <example>
             <code>
             private LinearRegressionRSquared rSquared;
            
             protected override void OnStart()
             {
                 // initialize rSquared indicator
                 rSquared = Indicators.LinearRegressionRSquared(MarketSeries.Close, 9);
             }
             protected override void OnTick()
             {
                 // Print the last value of rSquared indicator to the log
                 Print("The current value of R Squared is {0}", rSquared.Result.LastValue);
             }
            
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.LinearRegressionSlope">
             <summary>
             The calculation of the Linear Regression Slope Indicator.
             </summary>
             <remarks>
             Linear Regression Slope refers to the slope of the Least Squares Line. This slope represents how prices change per unit of time.
             </remarks>
             <example>
             <code>
             private LinearRegressionSlope _lrSlope;
             protected override void Initialize()
             {
                 _lrSlope = Indicators.LinearRegressionSlope(MarketSeries.Close, 14);
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Linear Regression Slope indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class LinearRegressionSlopeSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private LinearRegressionSlope _linearRegressionSlope;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     private ExponentialMovingAverage _exponentialMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _linearRegressionSlope = Indicators.LinearRegressionSlope(Bars.ClosePrices, 20);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(_linearRegressionSlope.Result, 10);
            
                         _exponentialMovingAverage = Indicators.ExponentialMovingAverage(Bars.ClosePrices, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; _exponentialMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _exponentialMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             if (_linearRegressionSlope.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _exponentialMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _exponentialMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             if (_linearRegressionSlope.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.LinearRegressionSlope.Result">
            <summary>
            The resulting time series of the calculation of the Linear Regression Slope indicator.
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                double lr = _lrSlope.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MacdCrossOver">
             <summary>
             Calculates the MACD (Moving Average Convergence/Divergence) indicator.
             </summary>
             <remarks>
             MACD (Moving Average Convergence/Divergence) is used to spot changes in the strength, direction, momentum, and duration of a trend.
             </remarks>
             <example>
             <code>
             //...
             private MacdCrossOver _macdCrossOver;
            
             [Output("MACD")]
             public IndicatorDataSeries Macd { get; set; }
            
             protected override void Initialize()
             {
                 _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
                 //...
             }
            
             public override void Calculate(int index)
             {
                 Macd[index] = _macdCrossOver.MACD[index];
                 //...
             }
            
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the MACD Cross Over indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MacdCrossOverSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private MacdCrossOver _macdCrossOver;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _macdCrossOver = Indicators.MacdCrossOver(Bars.ClosePrices, 26, 12, 9);
                     }
            
                     protected override void OnBar()
                     {
                         if (_macdCrossOver.MACD.Last(1) &gt; _macdCrossOver.Signal.Last(1) &amp;&amp; _macdCrossOver.MACD.Last(2) &lt;= _macdCrossOver.Signal.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_macdCrossOver.MACD.Last(1) &lt; _macdCrossOver.Signal.Last(1) &amp;&amp; _macdCrossOver.MACD.Last(2) &gt;= _macdCrossOver.Signal.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdCrossOver.Histogram">
             <summary>
             Gets the Histogram (bar graph).
             </summary>
             <remarks>
             The histogram of MACD: difference between the blue and red lines.
             </remarks>
             <example>
             <code>
             //...
             private MacdCrossOver _macdCrossOver;
            
             [Output("Histogram")]
             public IndicatorDataSeries Histogram { get; set; }
            
             protected override void Initialize()
             {
                 _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
             }
            
             public override void Calculate(int index)
             {
                 Histogram[index] = _macdCrossOver.Histogram[index];
                 //...
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdCrossOver.MACD">
             <summary>
             Gets the main MACD line (blue line).
             </summary>
             <remarks>
              MACD line: difference between the 12 and 26 days EMAs
             </remarks>
             <example>
             <code>
             //...
             private MacdCrossOver _macdCrossOver;
            
             [Output("MACD")]
             public IndicatorDataSeries Macd { get; set; }
            
             protected override void Initialize()
             {
                 _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
             }
            
             public override void Calculate(int index)
             {
                 Macd[index] = _macdCrossOver.MACD[index];
                 //...
             }
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdCrossOver.Signal">
             <summary>
             Gets the Signal line of MACD (red line).
             </summary>
             <remarks>
             Signal: 9 day EMA of the blue line
             </remarks>
             <example>
             <code>
             //...
             private MacdCrossOver _macdCrossOver;
            
             [Output("Signal")]
             public IndicatorDataSeries Signal { get; set; }
            
             protected override void Initialize()
             {
                 _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
             }
            
             public override void Calculate(int index)
             {
                 Signal[index] = _macdCrossOver.Signal[index];
                 //...
             }
            
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MacdHistogram">
             <summary>
             The calculation of the MACD Histogram.
             </summary>
             <remarks>
             MACD (moving average convergence/divergence) is used to spot changes in the strength, direction, momentum, and duration of a trend.
             </remarks>
             <example>
             <code>
             //...
             private MacdHistogram macd;
             //...
             macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
             //...
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the MACD Histogram indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MacdHistogramSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private MacdHistogram _macdHistogram;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _macdHistogram = Indicators.MacdHistogram(Bars.ClosePrices, 26, 12, 9);
                     }
            
                     protected override void OnBar()
                     {
                         if (_macdHistogram.Histogram.Last(1) &gt; 0 &amp;&amp; _macdHistogram.Histogram.Last(2) &lt;= 0)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_macdHistogram.Histogram.Last(1) &lt; 0 &amp;&amp; _macdHistogram.Histogram.Last(2) &gt;= 0)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdHistogram.Histogram">
            <summary>
            The histogram (bar graph). The difference between the short and long cycles.
            </summary>
            <example>
            <code>
            //...
            private MacdHistogram macd;
            macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
            //...
            public override void Calculate(int index)
            {
                double macdHistogramResult = macd.Histogram[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MacdHistogram.Signal">
            <summary>
            The signal (red line). The exponential moving average of the MACD histogram.
            </summary>
            <example>
            <code>
            //...
            private MacdHistogram macd;
            macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
            //...
            public override void Calculate(int index)
            {
                double macdSignalResult = macd.Signal[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MassIndex">
             <summary>
             The Mass Index Indicator interface.
             </summary>
             <remarks>
             The Mass Index Indicator can be a great tool to identify future price reversal. It is expected for a reversal to occur when Mass index is rising.
             </remarks>
             <example>
             <code>
             private MassIndex _massIndex;
             protected override void Initialize()
             {
                 _massIndex = Indicators.MassIndex(14);
             }
            
             public override void Calculate(int index)
             {
                 double massIndex = _massIndex.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Mass Index indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MassIndexSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private MassIndex _massIndex;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _massIndex = Indicators.MassIndex(9);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (_massIndex.Result.Last(1) &lt; 9) return;
            
                         if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MassIndex.Result">
            <summary>
            Gets the resulting series of the calculation of the Mass Index indicator.
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                double massIndex = _massIndex.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MedianPrice">
             <summary>
             A Median Price is an average of one periodâ€™s high and low values.
             </summary>
             <remarks>A Median Price is often used as a component for calculating other indicators.
             </remarks>
             <example>
             <code>
             private MedianPrice _price;
             protected override void Initialize()
             {
                 _price = Indicators.MedianPrice();
             }
             public override void Calculate(int index)
             {
                 double price = _price.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Momentum Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MedianPriceSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private MedianPrice _medianPrice;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _medianPrice = Indicators.MedianPrice();
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; _medianPrice.Result.Last(1))
                         {
                             ClosePositions(TradeType.Sell);
            
                             if (BotPositions.Length == 0)
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _medianPrice.Result.Last(1))
                         {
                             ClosePositions(TradeType.Buy);
            
                             if (BotPositions.Length == 0)
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MedianPrice.Result">
            <summary>
            The resulting series of the calculation of Median Price
            </summary>
            <example>
            <code>
            private MedianPrice _price;
            protected override void Initialize()
            {
                _price = Indicators.MedianPrice();
            }
            public override void Calculate(int index)
            {
                double price = _price.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MomentumOscillator">
             <summary>
             The calculation of the Momentum Oscillator indicator.
             </summary>
             <remarks>
             Momentum measures the rate of price change over time and provides a leading indicator of changes in trend. It gives signals before price action happens. The momentum oscillator is unbounded i.e. there is no maximum or minimum value. It is calculated as the closing price now minus the closing price n periods ago.
              </remarks>
             <example>
             <code>
             private MomentumOscillator _momentum;
             protected override void Initialize()
             {
                 _momentum = Indicators.MomentumOscillator(MarketSeries.Close, 14);
             }
            
             public override void Calculate(int index)
             {
                 double momentum = _momentum.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Momentum Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MomentumOscillatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private MomentumOscillator _momentumOscillator;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _momentumOscillator = Indicators.MomentumOscillator(Bars.ClosePrices, 14);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(_momentumOscillator.Result, 14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_momentumOscillator.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Sell);
            
                             if (_momentumOscillator.Result.Last(2) &lt;= _simpleMovingAverage.Result.Last(2))
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else if (_momentumOscillator.Result.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Buy);
            
                             if (_momentumOscillator.Result.Last(2) &gt;= _simpleMovingAverage.Result.Last(2))
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MomentumOscillator.Result">
            <summary>
            Gets the resulting series of the Momentum Oscillator indicator calculation.
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                double momentum = _momentum.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MoneyFlowIndex">
             <summary>
             The Money Flow Index is an oscillator that calculates buying and selling pressure using typical price and volume. It oscillates between zero and one hundred. It is typically used to identify trend reversals and price extremes.
             </summary>
             <example>
             <code>
             private MoneyFlowIndex _moneyFlow;
            
             [Parameter("Period", DefaultValue = 14)]
             public int Period { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _moneyFlow = Indicators.MoneyFlowIndex(Period);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _moneyFlow.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Money Flow Index indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MoneyFlowIndexSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private MoneyFlowIndex _moneyFlowIndex;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _moneyFlowIndex = Indicators.MoneyFlowIndex(14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_moneyFlowIndex.Result.Last(1) &gt; 80)
                         {
                             ClosePositions(TradeType.Buy);
            
                             if (BotPositions.Length == 0)
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else if (_moneyFlowIndex.Result.Last(1) &lt; 20)
                         {
                             ClosePositions(TradeType.Sell);
            
                             if (BotPositions.Length == 0)
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MoneyFlowIndex.Result">
             <summary>
             The time series of the Money Flow Index indicator.
             </summary>
             <example>
             <code>
             private MoneyFlowIndex _moneyFlow;
            
             [Parameter("Period", DefaultValue = 21)]
             public int Period { get; set; }
            
             protected override void OnStart()
             {
                 _moneyFlow = Indicators.MoneyFlowIndex(Period);
             }
             protected override void OnBar()
             {
                 var currentValue = _moneyFlow.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.MovingAverage">
             <summary>
             The Moving Average Indicator calculation.
             </summary>
             <remarks>
             Used to smooth the price data to form a trend following indicator
             </remarks>
             <example>
             <code>
             private MovingAverage ma;
            
             protected override void Initialize()
             {
                 ma = Indicators.MovingAverage(Source, MAPeriods, MAType);
             }
             &#47;&#47;&#46;&#46;&#46;
             public override void Calculate(int index)
             {
                 MA[index] = ma.Result[index];
                 &#47;&#47;&#46;&#46;&#46;
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Moving Average indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MovingAverageSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private MovingAverage _fastMa;
            
                     private MovingAverage _slowMa;
            
                     [Parameter("Source", Group = "Fast MA")]
                     public DataSeries FastMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
                     public int FastMaPeriod { get; set; }
            
                     [Parameter("Type", DefaultValue = MovingAverageType.Exponential, Group = "Fast MA")]
                     public MovingAverageType FastMaType { get; set; }
            
                     [Parameter("Source", Group = "Slow MA")]
                     public DataSeries SlowMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
                     public int SlowMaPeriod { get; set; }
            
                     [Parameter("Type", DefaultValue = MovingAverageType.Exponential, Group = "Slow MA")]
                     public MovingAverageType SlowMaType { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fastMa = Indicators.MovingAverage(FastMaSource, FastMaPeriod, FastMaType);
                         _slowMa = Indicators.MovingAverage(SlowMaSource, SlowMaPeriod, SlowMaType);
                     }
            
                     protected override void OnBar()
                     {
                         if (_fastMa.Result.HasCrossedAbove(_slowMa.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_fastMa.Result.HasCrossedBelow(_slowMa.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.MovingAverage.Result">
             <summary>
             The resulting time series of the calculation.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             [Output]
             public IndicatorDataSeries Result { get; set; }
            
             private MovingAverage ma;
            
             protected override void Initialize()
             {
                 ma = Indicators.MovingAverage(Source, MAPeriods, MAType);
             }
             public override void Calculate(int index)
             {
                 Result[index] = ma.Result[index];
            
                 &#47;&#47;&#46;&#46;&#46;
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.NegativeVolumeIndex">
             <summary>
             Dysart's Negative Volume Index assumes that the smart money is active on days when volume decreases and the not-so-smart money is active on days when volume increases (measured by the Positive Volume Index).
             </summary>
             <example>
             <code>
             private NegativeVolumeIndex _negativeVolume;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _negativeVolume = Indicators.NegativeVolumeIndex(Source);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _negativeVolume.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Positive/Negative Volume Index indicators
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class VolumeIndexSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private PositiveVolumeIndex _positiveVolumeIndex;
                     private NegativeVolumeIndex _negativeVolumeIndex;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _positiveVolumeIndex = Indicators.PositiveVolumeIndex(Bars.ClosePrices);
                         _negativeVolumeIndex = Indicators.NegativeVolumeIndex(Bars.ClosePrices);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Sell);
            
                             if (BotPositions.Length == 0 &amp;&amp; _negativeVolumeIndex.Result.Last(1) &gt; _positiveVolumeIndex.Result.Last(1))
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Buy);
            
                             if (BotPositions.Length == 0 &amp;&amp; _negativeVolumeIndex.Result.Last(1) &gt; _positiveVolumeIndex.Result.Last(1))
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.NegativeVolumeIndex.Result">
             <summary>
             The time series of the Negative Volume Index indicator.
             </summary>
             <example>
             <code>
             private NegativeVolumeIndex _negativeVolume;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             protected override void OnStart()
             {
                 _negativeVolume = Indicators.NegativeVolumeIndex(Source);
             }
             protected override void OnBar()
             {
                 var currentValue = _negativeVolume.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.OnBalanceVolume">
             <summary>
             On Balance Volume measures buying and selling pressure as a cumulative indicator that adds volume on up days and subtracts volume on down days.
             </summary>
             <example>
             <code>
             private OnBalanceVolume _onBalanceVolume;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _onBalanceVolume = Indicators.OnBalanceVolume(Source);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _onBalanceVolume.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the On Balance Volume indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class OnBalanceVolumeSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private OnBalanceVolume _onBalanceVolume;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _onBalanceVolume = Indicators.OnBalanceVolume(Bars.ClosePrices);
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(_onBalanceVolume.Result, 9);
                     }
            
                     protected override void OnBar()
                     {
                         if (_onBalanceVolume.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_onBalanceVolume.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.OnBalanceVolume.Result">
             <summary>
             Gets or sets the time series of the On Balance Volume indicator.
             </summary>
             <example>
             <code>
             private OnBalanceVolume _onBalanceVolume;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             protected override void OnStart()
             {
                 _onBalanceVolume = Indicators.OnBalanceVolume(Source);
             }
             protected override void OnBar()
             {
                 var currentValue = _onBalanceVolume.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.ParabolicSAR">
             <summary>
             The calculation of the Parabolic SAR Indicator.
             </summary>
             <remarks>
             Developed by Welles Wilder, SAR stands for stop and reverse and is based on a concept similar to time decay,
             unless a security can continue to generate more profits over time, it should be liquidated.
            
             SAR trails prices as the trend extends over time, being below prices when they are increasing and above prices
             when they are decreasing. In this view, the indicator stops and reverses when the price trend reverses and breaks
             above or below the indicator. The indicator generally works well in trending markets, but not during non-trending,
             sideways phases. Therefore, Wilder recommended establishing the strength and direction of the trend first through the use of other indicators and then using the Parabolic SAR to trade that trend.The indicator is below prices when
             prices are rising and above prices when prices are falling. In this regard, the indicator stops and reverses when
             the price trend reverses and breaks above or below the indicator.
             </remarks>
             <example>
             <code>
             private ParabolicSAR _parabolic;
             protected override void Initialize()
             {
                 _parabolic = Indicators.ParabolicSAR(minaf, maxaf);
             }
             public override void Calculate(int index)
             {
                 double parabolic = _parabolic.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Parabolic SAR indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ParabolicSARSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private ParabolicSAR _parabolicSAR;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _parabolicSAR = Indicators.ParabolicSAR(0.02, 0.2);
                     }
            
                     protected override void OnBar()
                     {
                         if (_parabolicSAR.Result.Last(1) &lt; Bars.LowPrices.Last(1) &amp;&amp; _parabolicSAR.Result.Last(2) &gt; Bars.HighPrices.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_parabolicSAR.Result.Last(1) &gt; Bars.HighPrices.Last(1) &amp;&amp; _parabolicSAR.Result.Last(2) &lt; Bars.LowPrices.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.ParabolicSAR.Result">
            <summary>
            Gets the resulting series of the Parabolic SAR indicator.
            </summary>
            <example>
            <code>
            private ParabolicSAR _parabolic;
            protected override void Initialize()
            {
                _parabolic = Indicators.ParabolicSAR(minaf, maxaf);
            }
            public override void Calculate(int index)
            {
                double parabolic = _parabolic.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.PolynomialRegressionChannels">
             <summary>
             Polynomial Regression Channel (PRC) is an RTX Extension indicator that draws a best fit n-degree polynomial regression line through a recent period of data.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Polynomial Regression Channels indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PolynomialRegressionChannelsSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private PolynomialRegressionChannels _polynomialRegressionChannels;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     [Parameter("Source")]
                     public DataSeries Source { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _polynomialRegressionChannels = Indicators.PolynomialRegressionChannels(3, 120, 1.62, 2);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.LowPrices.Last(1) &lt;= _polynomialRegressionChannels.Sql.Last(1) &amp;&amp; Bars.LowPrices.Last(2) &gt; _polynomialRegressionChannels.Sql.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label);
                         }
                         else if (Bars.HighPrices.Last(1) &gt;= _polynomialRegressionChannels.Sqh.Last(1) &amp;&amp; Bars.HighPrices.Last(2) &lt; _polynomialRegressionChannels.Sqh.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.PositiveVolumeIndex">
             <summary>
             The positive volume index measures the trend of the stock prices for days when volume increases from previous day's volume.
             </summary>
             <remarks>
             Assumes that the smart money is active on days when volume decreases (measured by the Negative Volume Index)
             and the not-so-smart money is active on days when volume increases.
             </remarks>
             <example>
             <code>
             private PositiveVolumeIndex _positiveVolume;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _positiveVolume = Indicators.PositiveVolumeIndex(Source);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _positiveVolume.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Positive/Negative Volume Index indicators
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class VolumeIndexSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private PositiveVolumeIndex _positiveVolumeIndex;
                     private NegativeVolumeIndex _negativeVolumeIndex;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _positiveVolumeIndex = Indicators.PositiveVolumeIndex(Bars.ClosePrices);
                         _negativeVolumeIndex = Indicators.NegativeVolumeIndex(Bars.ClosePrices);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Sell);
            
                             if (BotPositions.Length == 0 &amp;&amp; _negativeVolumeIndex.Result.Last(1) &gt; _positiveVolumeIndex.Result.Last(1))
                             {
                                 ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Buy);
            
                             if (BotPositions.Length == 0 &amp;&amp; _negativeVolumeIndex.Result.Last(1) &gt; _positiveVolumeIndex.Result.Last(1))
                             {
                                 ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                             }
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.PositiveVolumeIndex.Result">
            <summary>
            Gets or sets the time series result of the Positive Volume Index indicator instance.
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                var currentValue = _positiveVolume.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.PriceOscillator">
             <summary>
             The Price Oscillator calculates the spread between a short-period moving average and a long-period moving average.
             </summary>
             <example>
             <code>
             //...
             private PriceOscillator priceOscillator;
            
             protected override void Initialize()
             {
                 priceOscillator = Indicators.PriceOscillator
                     (Price, LongCycle, ShortCycle, MAType);
             }
            
             public override void Calculate(int index)
             {
                 double current = priceOscillator.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Price Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PriceOscillatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private PriceOscillator _priceOscillator;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _priceOscillator = Indicators.PriceOscillator(Bars.ClosePrices, 22, 9, MovingAverageType.Simple);
                     }
            
                     protected override void OnBar()
                     {
                         if (_priceOscillator.Result.Last(1) &gt; 0 &amp;&amp; _priceOscillator.Result.Last(2) &lt;= 0)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_priceOscillator.Result.Last(1) &lt; 0 &amp;&amp; _priceOscillator.Result.Last(2) &gt;= 0)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.PriceOscillator.Result">
             <summary>
             Gets the resulting time series of the Price Oscillator indicator calculation.
             </summary>
             <example>
             <code>
             private PriceOscillator priceOscillator;
            
             protected override void Initialize()
             {
                 priceOscillator = Indicators.PriceOscillator
                     (MarketSeries.Close, 14, 5, MovingAverageType.Simple);
             }
            
             public override void Calculate(int index)
             {
                 double result = priceOscillator.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.PriceROC">
             <summary>
             The Price ROC calculates the percentage change between the most recent price and the n-periods of the past price.
             </summary>
             <remarks>Can be used to determine whether an instrument is overbought or oversold.
             </remarks>
             <example>
             <code>
             private PriceROC _result;
             protected override void Initialize()
             {
                 _result = Indicators.PriceROC(MarketSeries.Close, 14);
             }
             public override void Calculate(int index)
             {
                 double result = _result.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Price ROC indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PriceROCSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private PriceROC _priceROC;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _priceROC = Indicators.PriceROC(Bars.ClosePrices, 12);
                     }
            
                     protected override void OnBar()
                     {
                         if (_priceROC.Result.Last(1) &gt; 0 &amp;&amp; _priceROC.Result.Last(2) &lt;= 0)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_priceROC.Result.Last(1) &lt; 0 &amp;&amp; _priceROC.Result.Last(2) &gt;= 0)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.PriceROC.Result">
            <summary>
            Gets the resulting time series of the Price ROC indicator calculation.
            </summary>
            <example>
            <code>
            private PriceROC _result;
            protected override void Initialize()
            {
                _result = Indicators.PriceROC(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.PriceVolumeTrend">
             <summary>
             Price and Volume Trend is a variation of On Balance Volume, used to determine the strength of trends and warn of reversals.
             </summary>
             <example>
             <code>
             private PriceVolumeTrend _priceVolumeTrend;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _priceVolumeTrend = Indicators.PriceVolumeTrend(Source);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _priceVolumeTrend.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Price Volume Trend indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PriceVolumeTrendSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private PriceVolumeTrend _priceVolumeTrend;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _priceVolumeTrend = Indicators.PriceVolumeTrend(Bars.ClosePrices);
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(_priceVolumeTrend.Result, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (_priceVolumeTrend.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_priceVolumeTrend.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.PriceVolumeTrend.Result">
            <summary>
            Gets or sets the time series of the Price Volume Trend indicator.
            </summary>
            <example>
            <code>
            //...
            private PriceVolumeTrend _priceVolumeTrend;
            //...
            protected override void OnBar()
            {
                var currentValue = _priceVolumeTrend.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.RainbowOscillator">
             <summary>
             Developed by Mel Widner, Rainbow Oscillator is based on multiple moving averages and helps to identify trends and provides overbought/oversold levels.
             </summary>
             <example>
             <code>
             //...
             private RainbowOscillator rainbow;
             //...
             protected override void Initialize()
             {
                 rainbow = Indicators.RainbowOscillator
                     (MarketSeries.Close, 9, MovingAverageType.Simple);
                 //...
             }
             public override void Calculate(int index)
             {
                 double result = rainbow.Result[index];
                 //...
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Rainbow Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class RainbowOscillatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private RainbowOscillator _rainbowOscillator;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _rainbowOscillator = Indicators.RainbowOscillator(Bars.ClosePrices, 9, MovingAverageType.Simple);
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(_rainbowOscillator.Result, 9);
                     }
            
                     protected override void OnBar()
                     {
                         if (_rainbowOscillator.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_rainbowOscillator.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.RainbowOscillator.Result">
            <summary>
            Gets the resulting time series of the Rainbow Oscillator indicator calculation.
            </summary>
            <example>
            <code>
            //...
            private RainbowOscillator rainbow;
            //...
            protected override void Initialize()
            {
                rainbow = Indicators.RainbowOscillator
                    (MarketSeries.Close, 9, MovingAverageType.Simple);
                //...
            }
            public override void Calculate(int index)
            {
                double result = rainbow.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.RelativeStrengthIndex">
             <summary>
             The RSI (Wilder) is momentum oscillator, measuring the velocity and magnitude of directional price movements.
             </summary>
             <remarks>
             The RSI is most typically used on a 14 day timeframe, measured on a scale from 0 to 100, with high and low levels marked at 70 and 30, respectively. Shorter or longer timeframes are used for alternately shorter or longer outlooks. More extreme high and low levelsâ€”80 and 20, or 90 and 10â€”occur less frequently but indicate stronger momentum.
             </remarks>
             <example>
             <code>
             private RelativeStrengthIndex _rsi;
             protected override void Initialize()
             {
                 _rsi = Indicators.RelativeStrengthIndex(MarketSeries.Close, 14);
             }
             public override void Calculate(int index)
             {
                 double result = _rsi.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Relative Strength Index indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class RelativeStrengthIndexSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private RelativeStrengthIndex _relativeStrengthIndex;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _relativeStrengthIndex = Indicators.RelativeStrengthIndex(Bars.ClosePrices, 20);
                     }
            
                     protected override void OnBar()
                     {
                         if (_relativeStrengthIndex.Result.Last(1) &gt; 70 &amp;&amp; _relativeStrengthIndex.Result.Last(2) &lt; 70)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_relativeStrengthIndex.Result.Last(1) &lt; 20 &amp;&amp; _relativeStrengthIndex.Result.Last(2) &gt; 20)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.RelativeStrengthIndex.Result">
            <summary>
            Gets the resulting time series of the Relative Strength Index indicator calculation.
            </summary>
            <example>
            <code>
            private RelativeStrengthIndex _rsi;
            protected override void Initialize()
            {
                _rsi = Indicators.RelativeStrengthIndex(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double result = _rsi.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.SimpleMovingAverage">
             <summary>
              The simple moving average is an average of price within n previous periods.
             </summary>
             <remarks>
             The simple moving average is the unweighted mean of the previous n price data,
             where n is the period used for the calculation and price data the price data source, e.g. The closing price.
             </remarks>
             <example>
             <code>
            
            	    [Indicator]
            	    public class SimpleMovingAverageExample : Indicator
            	    {
            	        [Parameter]
            	        public DataSeries Source { get; set; }
            
            	        [Parameter(DefaultValue = 14, MinValue = 2)]
            	        public int Periods { get; set; }
            
            	        [Output("Result", Color = Colors.Orange)]
            	        public IndicatorDataSeries Result { get; set; }
            
            
            	        private SimpleMovingAverage _simpleMovingAverage;
            
            	        protected override void Initialize()
            	        {
            	            _simpleMovingAverage = Indicators.SimpleMovingAverage(Source, Periods);
            	        }
            
            	        public override void Calculate(int index)
            	        {
            	            var average = _simpleMovingAverage.Result[index];
            
            	            double sum = 0;
            
            	            for (var period = 0; period &#60; Periods; period++)
            	            {
            	                sum += Math.Pow(Source[index - period] - average, 2.0);
            	            }
            
            	            Result[index] = Math.Sqrt(sum / Periods);
            	        }
            	    }
            
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Simple Moving Average indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class SimpleMovingAverageSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private SimpleMovingAverage _fastSimpleMovingAverage;
            
                     private SimpleMovingAverage _slowSimpleMovingAverage;
            
                     [Parameter("Source", Group = "Fast MA")]
                     public DataSeries FastMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
                     public int FastMaPeriod { get; set; }
            
                     [Parameter("Source", Group = "Slow MA")]
                     public DataSeries SlowMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
                     public int SlowMaPeriod { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fastSimpleMovingAverage = Indicators.SimpleMovingAverage(FastMaSource, FastMaPeriod);
                         _slowSimpleMovingAverage = Indicators.SimpleMovingAverage(SlowMaSource, SlowMaPeriod);
                     }
            
                     protected override void OnBar()
                     {
                         if (_fastSimpleMovingAverage.Result.HasCrossedAbove(_slowSimpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_fastSimpleMovingAverage.Result.HasCrossedBelow(_slowSimpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.StandardDeviation">
             <summary>
             Standard Deviation measures the market volatility with a commonly used statisctical function.
             </summary>
             <example>
             <code>
             private StandardDeviation _standardDeviation;
             protected override void Initialize()
             {
                 _standardDeviation = Indicators.StandardDeviation(MarketSeries.Close, 14, MovingAverageType.Simple);
             }
             public override void Calculate(int index)
             {
                 double result = _standardDeviation.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using System;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Standard Deviation indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class StandardDeviationSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private StandardDeviation _standardDeviation;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _standardDeviation = Indicators.StandardDeviation(Bars.ClosePrices, 20, MovingAverageType.Simple);
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.HasCrossedAbove(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteOrder(TradeType.Buy);
                         }
                         else if (Bars.ClosePrices.HasCrossedBelow(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteOrder(TradeType.Sell);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
            
                     private void ExecuteOrder(TradeType tradeType)
                     {
                         var standardDeviationInPips = _standardDeviation.Result.Last(1) * (Symbol.TickSize / Symbol.PipSize * Math.Pow(10, Symbol.Digits));
            
                         var stopLossInPips = standardDeviationInPips * 2;
                         var takeProfitInPips = stopLossInPips * 2;
            
                         ExecuteMarketOrder(tradeType, SymbolName, _volumeInUnits, Label, stopLossInPips, takeProfitInPips);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.StandardDeviation.Result">
            <summary>
            Gets the resulting time series of the Standard Deviation indicator calculation.
            </summary>
            <example>
            <code>
            private StandardDeviation _standardDeviation;
            protected override void Initialize()
            {
                _standardDeviation = Indicators.StandardDeviation(MarketSeries.Close, 14, MovingAverageType.Simple);
            }
            public override void Calculate(int index)
            {
                double result = _standardDeviation.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.StochasticOscillator">
             <summary>
             The Stochastic Oscillator is a momentum indicator that aims to show price reversals by comparing the closing price to the price range.
             </summary>
             <remarks>
             Calculates the range between the high and low price during a given period of time. The current price is then expressed as a percentage of this range with 0% indicating the bottom of the range and 100% indicating the top of the range over this time period.
             Based on the theory that prices tend to close near the boundaries of the recent range.
             </remarks>
             <example>
             <code>
             private StochasticOscillator _stochastic;
             protected override void Initialize()
             {
                 // Initialize the Stochastic Oscillator indicator
                  _stochastic = Indicators.StochasticOscillator(kPeriods, kSlowing, dPeriods, maType);
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Stochastic Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class StochasticOscillatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private StochasticOscillator _stochasticOscillator;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _stochasticOscillator = Indicators.StochasticOscillator(9, 3, 9, MovingAverageType.Simple);
                     }
            
                     protected override void OnBar()
                     {
                         if (_stochasticOscillator.PercentK.HasCrossedAbove(_stochasticOscillator.PercentD, 0) &amp;&amp; _stochasticOscillator.PercentK.Last(1) &lt;= 20)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_stochasticOscillator.PercentK.HasCrossedBelow(_stochasticOscillator.PercentD, 0) &amp;&amp; _stochasticOscillator.PercentK.Last(1) &gt;= 80)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.StochasticOscillator.PercentD">
            <summary>
            %D is 3 Period Exponential Moving Average of %K.
            </summary>
            <example>
            <code>
            double result = _stochastic.PercentK[index];
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Indicators.StochasticOscillator.PercentK">
             <summary>
             Calculation of %K is 100 multiplied by the ratio of the closing price minus the lowest price over the last N periods over the highest price over the last N minus the lowest price over the last N periods.
             </summary>
             <example>
             <code>
            double result = _stochastic.PercentD[index];
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.StochasticOscillator.PersentsD">
            <summary>
            Obsolete. Use PercentD property instead.
            </summary>
        </member>
        <member name="P:cAlgo.API.Indicators.StochasticOscillator.PersentsK">
            <summary>
            Obsolete. Use PercentK property instead.
            </summary>
        </member>
        <member name="T:cAlgo.API.Indicators.Supertrend">
             <summary>
             Supertrend is one of the most popular trend trading indicators
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Supertrend indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class SupertrendSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private Supertrend _supertrend;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _supertrend = Indicators.Supertrend(10, 3);
                     }
            
                     protected override void OnBar()
                     {
                         if (_supertrend.UpTrend.Last(1) &lt; Bars.LowPrices.Last(1) &amp;&amp; _supertrend.DownTrend.Last(2) &gt; Bars.HighPrices.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_supertrend.DownTrend.Last(1) &gt; Bars.HighPrices.Last(1) &amp;&amp; _supertrend.UpTrend.Last(2) &lt; Bars.LowPrices.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.SwingIndex">
             <summary>
             Developed by Welles Wilder, the Swing Index compares current Open, high, Low and Close prices to find of current and previous periods to find "real" price.
             </summary>
             <example>
             <code>
            	using cAlgo.API;
            	using cAlgo.API.Indicators;
            
            	namespace cAlgo.Indicators
            	{
            	    [Indicator]
            	    public class Test:Indicator
            	    {
            	        private SwingIndex _swingIndex;
            
            	        [Parameter(DefaultValue = 12)]
            	        public int LimitMoveValue { get; set; }
            
            	        protected override void Initialize()
            	        {
            	            _swingIndex = Indicators.SwingIndex(LimitMoveValue);
            	        }
            
            	        public override void Calculate(int index)
            	        {
            	            //Print the current value of SwingIndex to the log
            	            Print("The current value of SwingIndex is {0}", _swingIndex.Result[index]);
            	        }
            	    }
            	}
            	  </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Swing Index indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class SwingIndexSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private SwingIndex _swingIndex;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _swingIndex = Indicators.SwingIndex(12);
                     }
            
                     protected override void OnBar()
                     {
                         if (_swingIndex.Result.Last(1) &gt; 0 &amp;&amp; _swingIndex.Result.Last(2) &lt;= 0)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_swingIndex.Result.Last(1) &lt; 0 &amp;&amp; _swingIndex.Result.Last(2) &gt;= 0)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.SwingIndex.Result">
             <summary>
             Gets the Result Series of the Swing Index indicator.
             </summary>
             <example>
             <code>
            public override void Calculate(int index)
            {
                 //Print the current value of SwingIndex to the log
                 Print("The current value of SwingIndex is {0}", _swingIndex.Result[index]);
            }
            	</code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.TimeSeriesMovingAverage">
             <summary>
             A Time Series Moving Average is moving average based on linear regression forecast.
             </summary>
             <example>
             <code>
             private TimeSeriesMovingAverage _timeSeriesMovingAverage;
            
             protected override void Initialize()
             {
                 _timeSeriesMovingAverage = Indicators.TimeSeriesMovingAverage(MarketSeries.Close, 9);
             }
            
             public override void Calculate(int index)
             {
                 //Print the current value of TimeSeries Moving Average to the log
                 Print("The current TimeSeries Moving Average  is {0}", _timeSeriesMovingAverage.Result[index]);
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Time Series Moving Average indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TimeSeriesMovingAverageSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private TimeSeriesMovingAverage _fastTimeSeriesMovingAverage;
            
                     private TimeSeriesMovingAverage _slowTimeSeriesMovingAverage;
            
                     [Parameter("Source", Group = "Fast MA")]
                     public DataSeries FastMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
                     public int FastMaPeriod { get; set; }
            
                     [Parameter("Source", Group = "Slow MA")]
                     public DataSeries SlowMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
                     public int SlowMaPeriod { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fastTimeSeriesMovingAverage = Indicators.TimeSeriesMovingAverage(FastMaSource, FastMaPeriod);
                         _slowTimeSeriesMovingAverage = Indicators.TimeSeriesMovingAverage(SlowMaSource, SlowMaPeriod);
                     }
            
                     protected override void OnBar()
                     {
                         if (_fastTimeSeriesMovingAverage.Result.HasCrossedAbove(_slowTimeSeriesMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_fastTimeSeriesMovingAverage.Result.HasCrossedBelow(_slowTimeSeriesMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.TradeVolumeIndex">
             <summary>
             Trade Volume Index measures the amount of money flowing in and out of an asset.
             </summary>
             <remarks>
             The underlying assumption of this indicator is that there is buying pressure when the price trades near the asking price and selling pressure when it trades near the bid.
             </remarks>
             <example>
             <code>
             private TradeVolumeIndex _tradeVolume;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _tradeVolume = Indicators.TradeVolumeIndex(Source);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _tradeVolume.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Trade Volume Index indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TradeVolumeIndexSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private TradeVolumeIndex _tradeVolumeIndex;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _tradeVolumeIndex = Indicators.TradeVolumeIndex(Bars.ClosePrices);
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(_tradeVolumeIndex.Result, 14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_tradeVolumeIndex.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_tradeVolumeIndex.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.TradeVolumeIndex.Result">
            <summary>
            Gets the time series of Trade Volume Index indicator.
            </summary>
            <example>
            <code>
            //...
            private TradeVolumeIndex _tradeVolume;
            //...
            protected override void OnBar()
            {
                var currentValue = _tradeVolume.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.TriangularMovingAverage">
             <summary>
             The Triangular Moving Average is a moving average that gives more weith to values located in the middle of aggregated period.
             </summary>
             <example>
             <code>
             private TriangularMovingAverage _triangularMovingAverage;
             protected override void Initialize()
             {
                 _triangularMovingAverage = Indicators.TriangularMovingAverage(MarketSeries.Close, 9);
             }
            
             public override void Calculate(int index)
             {
                 //Print the current value of _triangularMovingAverage to the log
                 Print("The current Triangular Moving Average is {0}", _triangularMovingAverage.Result[index]);
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Triangular Moving Average indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TriangularMovingAverageSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private TriangularMovingAverage _fastTriangularMovingAverage;
            
                     private TriangularMovingAverage _slowTriangularMovingAverage;
            
                     [Parameter("Source", Group = "Fast MA")]
                     public DataSeries FastMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
                     public int FastMaPeriod { get; set; }
            
                     [Parameter("Source", Group = "Slow MA")]
                     public DataSeries SlowMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
                     public int SlowMaPeriod { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fastTriangularMovingAverage = Indicators.TriangularMovingAverage(FastMaSource, FastMaPeriod);
                         _slowTriangularMovingAverage = Indicators.TriangularMovingAverage(SlowMaSource, SlowMaPeriod);
                     }
            
                     protected override void OnBar()
                     {
                         if (_fastTriangularMovingAverage.Result.HasCrossedAbove(_slowTriangularMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_fastTriangularMovingAverage.Result.HasCrossedBelow(_slowTriangularMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.Trix">
             <summary>
             TRIX was developed by Jack Huton. It is a momentum oscillator that will help you filter unimportant price movement.
             </summary>
             <remarks>
             When TRIX is rising, it is a good signal to buy, whether when TRIX is falling, it is a good signal to sell.
             </remarks>
             <example>
             <code>
             private Trix _result;
             protected override void Initialize()
             {
                 _result = Indicators.Trix(MarketSeries.Close, 14);
             }
             public override void Calculate(int index)
             {
                 double result = _result.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Trix indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TrixSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private Trix _trix;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _trix = Indicators.Trix(Bars.ClosePrices, 9);
                     }
            
                     protected override void OnBar()
                     {
                         if (_trix.Result.Last(1) &gt; 0 &amp;&amp; _trix.Result.Last(2) &lt;= 0)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_trix.Result.Last(1) &lt; 0 &amp;&amp; _trix.Result.Last(2) &gt;= 0)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.Trix.Result">
            <summary>
            Gets the resulting time series of the Trix indicator calculation.
            </summary>
            <example>
            <code>
            private Trix _result;
            protected override void Initialize()
            {
                _result = Indicators.Trix(MarketSeries.Close, 14);
            }
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.TrueRange">
             <summary>
             The Average True Range is a measure of market volatility developed by Wilder.
             </summary>
             <example>
             <code>
            private TrueRange tri;
            
            protected override void Initialize()
            {
                 tri = Indicators.TrueRange();
            }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using System;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the True Range indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TrueRangeSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private TrueRange _trueRange;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _trueRange = Indicators.TrueRange();
                     }
            
                     protected override void OnBar()
                     {
                         if (Bars.ClosePrices.Last(1) &gt; Bars.OpenPrices.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; Bars.OpenPrices.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteOrder(TradeType.Buy);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; Bars.OpenPrices.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; Bars.OpenPrices.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteOrder(TradeType.Sell);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
            
                     private void ExecuteOrder(TradeType tradeType)
                     {
                         var trueRangeInPips = _trueRange.Result.Last(1) * (Symbol.TickSize / Symbol.PipSize * Math.Pow(10, Symbol.Digits));
            
                         var stopLossInPips = trueRangeInPips * 2;
                         var takeProfitInPips = stopLossInPips * 2;
            
                         ExecuteMarketOrder(tradeType, SymbolName, _volumeInUnits, Label, stopLossInPips, takeProfitInPips);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.TrueRange.Result">
            <summary>
            Gets the resulting time series of the True Range indicator calculation.
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                Result[index] = tri.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.TypicalPrice">
             <summary>
             A Typical Price is an average of high, low and close values for a single period.
             </summary>
             <remarks>
             Typical Price gives a simplified view of all prices for a period as a single series.
             </remarks>
             <example>
             <code>
             private TypicalPrice _result;
             protected override void Initialize()
             {
                 _result = Indicators.TypicalPrice();
             }
             public override void Calculate(int index)
             {
                 double result = _result.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Typical Price indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TypicalPriceSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private TypicalPrice _typicalPrice;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _typicalPrice = Indicators.TypicalPrice();
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(_typicalPrice.Result, 14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_typicalPrice.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_typicalPrice.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.TypicalPrice.Result">
            <summary>
            Gets the resulting time series of the Typical Price indicator calculation.
            </summary>
            <example>
            <code>
            private TypicalPrice _result;
            protected override void Initialize()
            {
                _result = Indicators.TypicalPrice();
            }
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.UltimateOscillator">
             <summary>
             The Ultimate Oscillator is a technical analysis oscillator based on a notion of buying or selling "pressure".
             </summary>
             <remarks>
             It uses the weighted average of three different time periods to reduce the volatility and false transaction signals that are associated with many other indicators that mainly rely on a single time period.
             </remarks>
             <example>
             <code>
             private UltimateOscillator ultimateOscillator;
            
             [Parameter("Cycle 1", DefaultValue = 7)]
             public int Cycle1 { get; set; }
            
             [Parameter("Cycle 2", DefaultValue = 14)]
             public int Cycle2 { get; set; }
            
             [Parameter("Cycle 3", DefaultValue = 28)]
             public int Cycle3 { get; set; }
            
             [Output("Main", Color = Colors.Green)]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                 ultimateOscillator = Indicators.UltimateOscillator(Cycle1,Cycle2,Cycle3);
             }
             public override void Calculate(int index)
             {
                 Result[index] = ultimateOscillator.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Ultimate Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class UltimateOscillatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private UltimateOscillator _ultimateOscillator;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _ultimateOscillator = Indicators.UltimateOscillator(7, 14, 28);
                     }
            
                     protected override void OnBar()
                     {
                         if (_ultimateOscillator.Result.Last(1) &gt; 70 &amp;&amp; _ultimateOscillator.Result.Last(2) &lt; 70)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_ultimateOscillator.Result.Last(1) &lt; 30 &amp;&amp; _ultimateOscillator.Result.Last(2) &gt; 30)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.UltimateOscillator.Result">
             <summary>
             Gets the resulting time series of the Ultimate Oscillator indicator calculation.
             </summary>
             <example>
             <code>
             public override void Calculate(int index)
             {
                 double result = ultimateOscillator.Result[index];
            
                 //...
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.VerticalHorizontalFilter">
             <summary>
             Vertical Horizontal Filter determines whether a price is going through a congestion phase or a trending phase.
             </summary>
             <remarks>
             Vertical Horizontal Filter rises when trend is strong and falls when trend is weak.
             </remarks>
             <example>
             <code>
             //...
             private VerticalHorizontalFilter VHFilter;
             //...
             protected override void Initialize()
             {
                 VHFilter = Indicators.VerticalHorizontalFilter(MarketSeries.Open, 28);
                 //...
             }
             public override void Calculate(int index)
             {
                 double value = VHFilter.Result[index];
                 //...
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Vertical Horizontal Filter indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class VerticalHorizontalFilterSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private VerticalHorizontalFilter _verticalHorizontalFilter;
            
                     private SimpleMovingAverage _priceSimpleMovingAverage;
                     private SimpleMovingAverage _verticalHorizontalFilterSimpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _verticalHorizontalFilter = Indicators.VerticalHorizontalFilter(Bars.ClosePrices, 28);
            
                         _verticalHorizontalFilterSimpleMovingAverage = Indicators.SimpleMovingAverage(_verticalHorizontalFilter.Result, 14);
            
                         _priceSimpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_verticalHorizontalFilter.Result.Last(1) &lt; _verticalHorizontalFilterSimpleMovingAverage.Result.Last(1)) return;
            
                         if (Bars.ClosePrices.Last(1) &gt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _priceSimpleMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _priceSimpleMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.VerticalHorizontalFilter.Result">
            <summary>
            Gets the resulting time series of the Vertical Horizontal Filter indicator calculation.
            </summary>
            <example>
            <code>
            public override void Calculate(int index)
            {
                double result = VHFilter.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.Vidya">
             <summary>
             Volatility Index Dynamic Average (VIDYA) is a smoothing (moving average) based on dynamically changing periods.
             </summary>
             <example>
             <code>
             [Parameter]
             public DataSeries Price { get; set; }
            
             [Parameter("Period", DefaultValue = 14)]
             public int Period { get; set; }
            
             [Parameter("Sigma", DefaultValue = 0.65, MinValue = 0.1, MaxValue = 0.95)]
             public double Sigma { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             private Vidya vidya;
            
             protected override void Initialize()
             {
                 vidya = Indicators.Vidya(Price, Period, Sigma);
             }
             public override void Calculate(int index)
             {
                 // Plot VIDYA to the chart
                 Result[index] = vidya.Result.LastValue;
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Vidya indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class VidyaSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private Vidya _fastVidya;
            
                     private Vidya _slowVidya;
            
                     [Parameter("Source", Group = "Fast MA")]
                     public DataSeries FastMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
                     public int FastMaPeriod { get; set; }
            
                     [Parameter("Source", Group = "Slow MA")]
                     public DataSeries SlowMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
                     public int SlowMaPeriod { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fastVidya = Indicators.Vidya(FastMaSource, FastMaPeriod, 0.65);
                         _slowVidya = Indicators.Vidya(SlowMaSource, SlowMaPeriod, 0.6);
                     }
            
                     protected override void OnBar()
                     {
                         if (_fastVidya.Result.HasCrossedAbove(_slowVidya.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_fastVidya.Result.HasCrossedBelow(_slowVidya.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.VolumeOscillator">
             <summary>
             The Volume Oscillator identifies trends in volume using a two moving average system. A strong trend is signaled when it is positive. Falling volume indicates trend weakness.
             </summary>
             <example>
             <code>
             private VolumeOscillator _volumeOscillator;
            
             [Parameter("Short Term", DefaultValue = 9)]
             public int ShortTerm { get; set; }
            
             [Parameter("Long Term", DefaultValue = 21)]
             public int LongTerm { get; set; }
            
             protected override void Initialize()
             {
                _volumeOscillator = Indicators.VolumeOscillator(ShortTerm, LongTerm);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _volumeOscillator.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Volume Oscillator indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class VolumeOscillatorSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private VolumeOscillator _volumeOscillator;
            
                     private SimpleMovingAverage _priceSimpleMovingAverage;
                     private SimpleMovingAverage _volumeOscillatorSimpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _volumeOscillator = Indicators.VolumeOscillator(9, 21);
            
                         _volumeOscillatorSimpleMovingAverage = Indicators.SimpleMovingAverage(_volumeOscillator.Result, 14);
            
                         _priceSimpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_volumeOscillator.Result.Last(1) &lt; _volumeOscillatorSimpleMovingAverage.Result.Last(1)) return;
            
                         if (Bars.ClosePrices.Last(1) &gt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _priceSimpleMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _priceSimpleMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.VolumeOscillator.Result">
            <summary>
            Gets or sets the time series of the Volume Oscillator indicator.
            </summary>
            <example>
            <code>
            //...
            private VolumeOscillator _volumeOscillator;
            //...
            protected override void OnBar()
            {
                var currentValue = _volumeOscillator.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.VolumeROC">
             <summary>
             The Volume Rate of Change indicator measures the Rate Of Change of the tick volume.
             </summary>
             <remarks>
             It shows whether or not a volume trend is developing and can be used to confirm price moves.
             </remarks>
             <example>
             <code>
             private VolumeROC _volumeROC;
            
             [Parameter("Period", DefaultValue = 14)]
             public int Period { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _volumeROC = Indicators.VolumeROC(Period);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _volumeROC.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 /// <summary>
                 /// This sample cBot shows how to use the Volume ROC indicator
                 /// </summary>
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class VolumeROCSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private VolumeROC _volumeROC;
            
                     private SimpleMovingAverage _priceSimpleMovingAverage;
                     private SimpleMovingAverage _volumeROCSimpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _volumeROC = Indicators.VolumeROC(14);
            
                         _volumeROCSimpleMovingAverage = Indicators.SimpleMovingAverage(_volumeROC.Result, 14);
            
                         _priceSimpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_volumeROC.Result.Last(1) &lt; _volumeROCSimpleMovingAverage.Result.Last(1)) return;
            
                         if (Bars.ClosePrices.Last(1) &gt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _priceSimpleMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _priceSimpleMovingAverage.Result.Last(2))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.VolumeROC.Result">
            <summary>
            Gets or sets the time series of the Volume ROC indicator.
            </summary>
            <example>
            <code>
            //...
            private VolumeROC _volumeROC;
            //...
            protected override void OnBar()
            {
                var currentValue = _volumeROC.Result.LastValue;
                //...
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WeightedClose">
             <summary>
             Weighted Close is an average of high, low and close prices where close has greater weight.
             </summary>
             <remarks>
             Like a Typical price indicator weighted Close gives a simplified view of all prices for a period as a single series.
             </remarks>
             <example>
             <code>
             //...
             private WeightedClose weightedCloseSeries;
             //...
             protected override void Initialize()
             {
                 weightedCloseSeries = Indicators.WeightedClose();
                 //...
             }
             public override void Calculate(int index)
             {
                 double weightedCloseValue = weightedCloseSeries.Result[index];
                 //...
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Weighted Close indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class WeightedCloseSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private WeightedClose _weightedClose;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _weightedClose = Indicators.WeightedClose();
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(_weightedClose.Result, 14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_weightedClose.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_weightedClose.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.WeightedClose.Result">
            <summary>
            Gets the resulting time series of the Weighted Close indicator calculation.
            </summary>
            <example>
            <code>
            double weightedCloseValue = weightedCloseSeries.Result[index];
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WeightedMovingAverage">
             <summary>
             The Weighted Moving Average is a moving average that gives more weith to the latest values.
             </summary>
             <example>
             <code>
             private WeightedMovingAverage _weightedMovingAverage;
            
             protected override void OnStart()
             {
                 _weightedMovingAverage = Indicators.WeightedMovingAverage(Source, Period);
             }
            
             protected override void OnTick()
             {
                 if(Trade.IsExecuting)
                     return;
            
                 int index = MarketSeries.Close.Count - 1;
            
                 if(Symbol.Bid &gt; _weightedMovingAverage.Result[index])
                 {
                     Trade.CreateMarketOrder(TradeType.Buy, Symbol, Volume);
                 }
              }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Weighted Moving Average indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class WeightedMovingAverageSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private WeightedMovingAverage _fastWeightedMovingAverage;
            
                     private WeightedMovingAverage _slowWeightedMovingAverage;
            
                     [Parameter("Source", Group = "Fast MA")]
                     public DataSeries FastMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
                     public int FastMaPeriod { get; set; }
            
                     [Parameter("Source", Group = "Slow MA")]
                     public DataSeries SlowMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
                     public int SlowMaPeriod { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fastWeightedMovingAverage = Indicators.WeightedMovingAverage(FastMaSource, FastMaPeriod);
                         _slowWeightedMovingAverage = Indicators.WeightedMovingAverage(SlowMaSource, SlowMaPeriod);
                     }
            
                     protected override void OnBar()
                     {
                         if (_fastWeightedMovingAverage.Result.HasCrossedAbove(_slowWeightedMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_fastWeightedMovingAverage.Result.HasCrossedBelow(_slowWeightedMovingAverage.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.WeightedMovingAverage.Result">
             <summary>
             Gets the resulting time series of the Weighted Moving Average indicator calculation.
             </summary>
             <example>
             <code>
             private WeightedMovingAverage _weightedMovingAverage;
            
             protected override void OnStart()
             {
                 _weightedMovingAverage = Indicators.WeightedMovingAverage(Source, Period);
             }
            
             protected override void OnTick()
             {
                 if(Trade.IsExecuting)
                     return;
            
                 int index = MarketSeries.Close.Count - 1;
            
                 if(Symbol.Bid &gt; _weightedMovingAverage.Result[index])
                 {
                     Trade.CreateMarketOrder(TradeType.Buy, Symbol, Volume);
                 }
              }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WellesWilderSmoothing">
             <summary>
             The Welles Wilder's Smoothing indicator is an exponential moving average, but it has different alpha ration. As a result it responds to price changes slower.
             </summary>
             <remarks>
             Usage is the same as EMA usage. Please mind the different in alpha ration.
             </remarks>
             <example>
             <code>
             private WellesWilderSmoothing _result;
             protected override void Initialize()
             {
                 _result = Indicators.WellesWilderSmoothing(MarketSeries.Close, 14);
             }
             public override void Calculate(int index)
             {
                 double result = _result.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Welles Wilder Smoothing indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class WellesWilderSmoothingSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private WellesWilderSmoothing _fastWellesWilderSmoothing;
            
                     private WellesWilderSmoothing _slowWellesWilderSmoothing;
            
                     [Parameter("Source", Group = "Fast MA")]
                     public DataSeries FastMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
                     public int FastMaPeriod { get; set; }
            
                     [Parameter("Source", Group = "Slow MA")]
                     public DataSeries SlowMaSource { get; set; }
            
                     [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
                     public int SlowMaPeriod { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _fastWellesWilderSmoothing = Indicators.WellesWilderSmoothing(FastMaSource, FastMaPeriod);
                         _slowWellesWilderSmoothing = Indicators.WellesWilderSmoothing(SlowMaSource, SlowMaPeriod);
                     }
            
                     protected override void OnBar()
                     {
                         if (_fastWellesWilderSmoothing.Result.HasCrossedAbove(_slowWellesWilderSmoothing.Result, 0))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_fastWellesWilderSmoothing.Result.HasCrossedBelow(_slowWellesWilderSmoothing.Result, 0))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WilliamsAccumulationDistribution">
             <summary>
             William's Accumulation Distribution is an oscillator that can identify if the market is driven by buyers (accumulation) or by sellers (distribution)
             </summary>
             <remarks>The divergence between price and the William's Accumulation Distribution. When price is falling and WAD is rising, it is a buying opportunity
             </remarks>
             <example>
             <code>
             private WilliamsAccumulationDistribution _result;
             protected override void Initialize()
             {
                 _result = Indicators.WilliamsAccumulationDistribution();
             }
             public override void Calculate(int index)
             {
                 double result = _result.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
             using System;
             using System.Linq;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Williams Accumulation Distribution indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class WilliamsAccumulationDistributionSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private WilliamsAccumulationDistribution _williamsAccumulationDistribution;
            
                     private SimpleMovingAverage _simpleMovingAverage;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _williamsAccumulationDistribution = Indicators.WilliamsAccumulationDistribution();
            
                         _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
                     }
            
                     protected override void OnBar()
                     {
                         var correlation = GetCorrelation(14);
            
                         if (correlation &gt; 0.85) return;
            
                         if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
            
                     private double GetCorrelation(int period)
                     {
                         var x = _williamsAccumulationDistribution.Result.Skip(_williamsAccumulationDistribution.Result.Count - period).ToArray();
                         var y = Bars.ClosePrices.Skip(Bars.ClosePrices.Count - period).ToArray();
            
                         if (!x.Any() || !y.Any())
                         {
                             return double.NaN;
                         }
            
                         var xSum = x.Sum();
                         var ySum = y.Sum();
            
                         var xSumSquared = Math.Pow(xSum, 2);
                         var ySumSquared = Math.Pow(ySum, 2);
            
                         var xSquaredSum = x.Select(value => Math.Pow(value, 2)).Sum();
                         var ySquaredSum = y.Select(value => Math.Pow(value, 2)).Sum();
            
                         var xAndyProductSum = x.Zip(y, (value1, value2) => value1 * value2).Sum();
            
                         double n = x.Count();
            
                         return (n * xAndyProductSum - xSum * ySum) / Math.Sqrt((n * xSquaredSum - xSumSquared) * (n * ySquaredSum - ySumSquared));
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.WilliamsAccumulationDistribution.Result">
            <summary>
            Gets the resulting time series of the Williams Accumulation Distribution indicator calculation.
            </summary>
            <example>
            <code>
            private WilliamsAccumulationDistribution _result;
            protected override void Initialize()
            {
                _result = Indicators.WilliamsAccumulationDistribution();
            }
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Indicators.WilliamsPctR">
             <summary>
             Williams %R is an effective momentum oscillator and was described by Larry Williams for the first time in 1973.
             </summary>
             <remarks>
             It shows the relationship of the close relative to the high-low range over a set period of time.
             </remarks>
             <example>
             <code>
             private WilliamsPctR _result;
             protected override void Initialize()
             {
                 _result = Indicators.WilliamsPctR(14);
             }
             public override void Calculate(int index)
             {
                 double result = _result.Result[index];
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the Williams % R indicator
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class WilliamsPctRSample : Robot
                 {
                     private double _volumeInUnits;
            
                     private WilliamsPctR _williamsPctR;
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Label", DefaultValue = "Sample")]
                     public string Label { get; set; }
            
                     public Position[] BotPositions
                     {
                         get
                         {
                             return Positions.FindAll(Label);
                         }
                     }
            
                     protected override void OnStart()
                     {
                         _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         _williamsPctR = Indicators.WilliamsPctR(14);
                     }
            
                     protected override void OnBar()
                     {
                         if (_williamsPctR.Result.Last(1) &gt; -20 &amp;&amp; _williamsPctR.Result.Last(2) &lt; -20)
                         {
                             ClosePositions(TradeType.Buy);
            
                             ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                         else if (_williamsPctR.Result.Last(1) &lt; -80 &amp;&amp; _williamsPctR.Result.Last(2) &gt; -80)
                         {
                             ClosePositions(TradeType.Sell);
            
                             ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
                         }
                     }
            
                     private void ClosePositions(TradeType tradeType)
                     {
                         foreach (var position in BotPositions)
                         {
                             if (position.TradeType != tradeType) continue;
            
                             ClosePosition(position);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Indicators.WilliamsPctR.Result">
            <summary>
            Gets the resulting time series of the Williams PctR indicator calculation.
            </summary>
            <example>
            <code>
            private WilliamsPctR _result;
            protected override void Initialize()
            {
                _result = Indicators.WilliamsPctR(14);
            }
            public override void Calculate(int index)
            {
                double result = _result.Result[index];
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.AccountType">
            <summary>
            Returns current account type
            </summary>
            <seealso cref="T:cAlgo.API.Internals.IAccount"/>
        </member>
        <member name="F:cAlgo.API.Internals.AccountType.Hedged">
            <summary>
            Account type that allows hedged positions
            </summary>
        </member>
        <member name="F:cAlgo.API.Internals.AccountType.Netted">
            <summary>
            Account type that allows only single net position per symbol
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.Algo">
            <summary>
            The container class for the main cAlgo.API Interfaces.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Indicators">
            <summary>
            Access to the built-in Indicators.
            </summary>
            <example>
            <code>
            
            protected override void Initialize()
            {
                //Use MarketSeries price data as parameters to indicators
                _ma = Indicators.SimpleMovingAverage(MarketSeries.Close, 20);
            }
             
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Notifications">
            <summary>
            Represents the notifications, such as sounds and email.
            </summary>
            <example>
            <code>
            Notifications.PlaySound(@"C:\Windows\Media\notify.wav");
            </code>
            </example>
            <example>
            <code>
            string emailBody = "this is the message send";
            Notifications.SendEmail("from@example.com", "to@example.com", "my subject", emailBody);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.TimeFrame">
            <summary>
            Access to the TimeFrame values.
            </summary>
            <example>
            <code>
             if(TimeFrame == TimeFrame.Daily)
             {           
                //...
             } 
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Server">
            <summary>
            Server related information.
            </summary>
            <example>
            <code>
            protected override void OnTick()
            {
                Print("The server time is: {0}", Server.Time);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.Print(System.String,System.Object[])">
            <summary>
            Prints a message to the Log.
            </summary>
            <param name="message">Message to print.</param>
            <param name="parameters">Parameters (optional)</param>
            <example>
            <code>
            Print("Current Balance is {0}, Equity is {1}.", Account.Balance, Account.Equity);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.Print(System.Object[])">
            <summary>
            Prints a message to the Log
            </summary>
            <param name="parameters">Parameters to print</param>
            <example>
            <code>
            Print(Account.Balance, " ", Account.Equity);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.Print(System.Object)">
            <summary>
            Prints text representation of the specified object to the log.
            </summary>
            <param name="value">Object to print.</param>
            <example>
            <code>
            Print(Account.Positions.Count);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.IsBacktesting">
            <summary>
            True if a cBot is in the Backtesting mode, otherwise False.
            </summary>
            <example>
            <code>
            if(IsBacktesting)
            {
               Print(MarketSeries.OpenTime.LastValue);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.TimeZone">
            <summary>
            TimeZone of a cBot or an Indicator.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Positions">
            <summary>
            The list of all open positions of the account.
            </summary>
            <example>
            <code>
            foreach (var position in Positions)
            {
                if (position.StopLoss == null)
                    ModifyPosition(position, 10, position.TakeProfit);
            }
             </code>
            </example>
            <example>
            var position = Positions.Find("myLabel", Symbol, TradeType.Sell);
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.PendingOrders">
            <summary>
            The array of all Pending Orders of the account.
            </summary>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfit,
                                        order.ExpirationTime);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.History">
            <summary>
            Represents the collection of all historical trades of the account.
            </summary>
            <example>
            <code>
            foreach (HistoricalTrade trade in History)
            {
                Print(trade.EntryTime);
            }
             </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.RefreshData">
            <summary>
            Updates MarketSeries, Positions, PendingOrders, History, etc.
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.OnTimer">
            <summary>
            Called when the timer interval has elapsed.
            </summary>
            <example>
            <code>        
            protected override void OnStart()
            {
                Timer.Start(1);//start timer with 1 second interval
            }
            
            protected override void OnTimer()
            {
                ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Timer">
            <summary>
            Access to the Timer object.
            </summary>
            <example>
            <code>        
            protected override void OnStart()
            {
                Timer.Start(1);//start timer with 1 second interval
            }
            
            protected override void OnTimer()
            {
                ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Time">
            <summary>
            Returns the current server time. The shortcut to the Server.Time property.
            </summary>
            <example>
            <code>        
            protected override void OnTick()
            {
                Print("The Server Time is: {0}", Time);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.TimeInUtc">
            <summary>
            Returns the current server time in UTC. The shortcut to the Server.TimeInUtc property.
            </summary>
            <example>
            <code>        
            protected override void OnTick()
            {
                Print("The Server Time in UTC is: {0}", TimeInUtc);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.ChartObjects">
            <summary>
            Represents objects that can be drawn on the chart.
            </summary>
            <example>
            <code>
            ChartObjects.DrawText("SymbolCode", "Currency Pair: " + Symbol.Code, StaticPosition.TopLeft, Colors.Turquoise);
            </code>
            </example>
            <example>
            <code>
            ChartObjects.DrawVerticalLine("Line1", index, Colors.Red);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Chart">
            <summary>
            Represents the chart where cBot or Indicator is launched.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.SymbolName">
            <summary>
            Gets or sets the symbol name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Symbols">
            <summary>
            Gets the symbol names.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Symbol">
            <summary>
            Represents the current symbol provides access to its properties and certain methods
            </summary>
            <example>
            <code>
            var ask = Symbol.Ask;
            var bid = Symbol.Bid;
            var digits = Symbol.Digits;
            var pip = Symbol.PipSize;
            var maxVolume = Symbol.VolumeMax;
            var minVolume = Symbol.VolumeMin;
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);  
            </code>
            </example>
            <example>
            <code>
            volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Bid">
            <summary>
            Gets the symbol bid price.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Ask">
            <summary>
            Gets the symbol ask price.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Watchlists">
            <summary>
            Gets the watchlist.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.MarketSeries">
            <summary>
            Market series of the current symbol and time frame.
            </summary>
            <remarks>
            Access to Open, High, Low, Close, Typical, Median and Weighted Price, Open Time and current Time frame.
            </remarks>
            <example>
            <code>
            
            //Access price and time data through MarketSeries
            var closePrice = MarketSeries.Close[index];
            var openTime = MarketSeries.OpenTime.LastValue;
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Bars">
            <summary>
            The collection of Bar objects. 
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.MarketData">
            <summary>
            Provides access to the Depth of Market Data.
            </summary>
            <example>
            <code>
            private MarketDepth _md;
            _md = MarketData.GetMarketDepth("GBPUSD");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.CreateDataSeries">
            <summary>
            Initialization of an IndicatorDataSeries.
            </summary>
            <example>
            <code>
            private IndicatorDataSeries series;
            
            protected override void Initialize()
            {
                series = CreateDataSeries();
            }
            public override void Calculate(int index)
            {
                series[index] = (MarketSeries.Close[index] + MarketSeries.Open[index]) / 2;
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Algo.BeginInvokeOnMainThread(System.Action)">
            <summary>
            Invokes asynchronously the specified code on the main cBot or Indicator thread.
            </summary>
            <param name="action">The code to invoke on the main cBot/Indicator thread</param>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.RunningMode">
            <summary>
            Defines if a cBot is running in real time, in the silent backtesting mode, in the visual backtesting mode, or in the optimization mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Internals.Algo.Application">
            <summary>
            Represents the application.
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.ChartObjects">
            <summary>
                Interface that contains objects that
                can be drawn on the chart.
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.RemoveObject(System.String)">
            <summary>
                Removes the chart object that is identified by objectName.
            </summary>
            <param name="objectName">The name of the object that is removed.</param>
            <example>
                <code>
            var right = StaticPosition.TopRight;
            var left = StaticPosition.TopLeft;
            ChartObjects.DrawText("object1", "123", right);
            ChartObjects.DrawText("object2", "456", left);
            ChartObjects.RemoveObject("object2");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.RemoveAllObjects">
            <summary>
                Remove all objects from the chart
            </summary>
            <example>
                <code>
            var right = StaticPosition.TopRight;
            var left = StaticPosition.TopLeft;
            ChartObjects.DrawText("object1", "123", right);
            ChartObjects.DrawText("object2", "456", left);
            ChartObjects.RemoveAllObjects();
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawText(System.String,System.String,System.Int32,System.Double,cAlgo.API.VerticalAlignment,cAlgo.API.HorizontalAlignment,System.Nullable{cAlgo.API.Colors})">
            <summary>
                Draws text on the chart given
                coordinates expressed in time(x) and price(y).
            </summary>
            <param name="objectName">The unique object's name</param>
            <param name="text">The text of the object drawn</param>
            <param name="index">The x-coordinate (bar index) where object is drawn</param>
            <param name="yValue">The y-coordinate (price) where the object is drawn</param>
            <param name="verticalAlignment">The vertical alignment of the object</param>
            <param name="horizontalAlignment">The horizontal alignment of the object. </param>
            <param name="color">The object's color</param>
            <example>
                <code>
            var name = "myObject";
            var low = MarketSeries.Low[index];
            var text = low.ToString();
            var xPos = index;
            var yPos = low;
            var vAlign = VerticalAlignment.Bottom;
            var hAlign = HorizontalAlignment.Right;
            ChartObjects.DrawText(name, text, xPos, yPos, 
                vAlign, hAlign, Colors.Red);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawText(System.String,System.String,cAlgo.API.StaticPosition,System.Nullable{cAlgo.API.Colors})">
            <summary>
                Draws text at a static position.
            </summary>
            <param name="objectName"> The unique object's name</param>
            <param name="text">The text drawn on the chart</param>
            <param name="position">Position of the object relative to the chart</param>
            <param name="color">The object's color</param>
            <example>
                <code>
            var name = "ask";
            var text = Symbol.Ask.ToString();
            var staticPos = StaticPosition.TopRight;
            var color = Colors.Green;
            ChartObjects.DrawText(name, text, staticPos, color);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a line given two coordinates of type Bar index (x) and price (y)
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="index1">x-coordinate of the first point</param>
            <param name="y1">y-coordinate of the first point</param>
            <param name="index2">x-coordinate of the second point</param>
            <param name="y2">y-coordinate of the second point</param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            var price = Symbol.Bid + Symbol.PipSize;
            ChartObjects.DrawLine("hLine", index-10, 
                price, index, price, 
                Colors.Blue, 2, LineStyle.Lines);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a line given two coordinates of type DateTime (x) and Price (y)
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="date1">x-coordinate of the first point</param>
            <param name="y1">y-coordinate of the first point</param>
            <param name="date2">x-coordinate of the second point</param>
            <param name="y2">y-coordinate of the second point</param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            var dt1 = DateTime.Now.AddHours(-10);
            var dt2 = DateTime.Now;
            var y1 = MarketSeries.Close[index - 10];
            var y2 = MarketSeries.Close[index];
            ChartObjects.DrawLine("line", 
                   dt1, y1, dt2, y2, 
                   Colors.Violet, 1, LineStyle.DotsRare);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a vertical line given one coordinate, date, of type DateTime that passes through the time axis at time = date
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="date">The value at which the line passes through the Time axis (x-coordinate) </param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            var dt1 = DateTime.Now.AddHours(-10);
            ChartObjects.DrawVerticalLine("vLine", dt1,         
                   Colors.Red, 1, LineStyle.Solid);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a vertical line given one coordinate, index, of type int (bar index) that passes through the time axis at
                index
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="index">The value at which the line passes through the Time axis (x-coordinate)</param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            int index = MarketSeries.Close.Count - 1;
            ChartObjects.DrawVerticalLine("vLine", index,         
                   Colors.Red, 1, LineStyle.Dots);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ChartObjects.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Colors,System.Double,cAlgo.API.LineStyle)">
            <summary>
                Draws a horizontal line given one coordinate, y, of type double (price) that passes through the price axis at price
                = y
            </summary>
            <param name="objectName">A unique name that represents the line object</param>
            <param name="y">The value at which the line passes through the price axis</param>
            <param name="color">Line color</param>
            <param name="thickness">Line thickness</param>
            <param name="style">Line style</param>
            <example>
                <code>
            double y = Symbol.Bid;
            ChartObjects.DrawHorizontalLine("hLine", y,         
                   Colors.Yellow, 2, LineStyle.Lines);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.ITrade">
            <summary>
            An accessor to subsystem for orders management (create order requests and execute trades).
            </summary>
            <example>
            <code>
            bool tradeisexecuting = Trade.IsExecuting;
            if(tradeisexecuting)//If there is another trade execution at this instance
            {
                //Do something, usually return;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.ITrade.IsExecuting">
            <summary>
            Gets value indicating whether asynchronous operation is executing.
            </summary>
            <example>
            <code>
            protected override void OnTick()
            {
                
                // This prevents the robot to run 
                // during an asynchronous operation. 
                // e.g. An order has been sent and 
                // you are waiting for confirmation
                
                if(Trade.IsExecuting)
                	return;
                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.Close(cAlgo.API.Position)">
            <summary>
            Sends request to close the specified order.
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateBuyMarketOrder(cAlgo.API.Internals.Symbol,System.Int32)">
            <summary>
            Creates buy market order.
            </summary>
            <param name="symbol">A subscribed symbol</param>
            <param name="volume">The trade monetary amount</param>
            <example>
            <code>
            private void Buy()
            {
                Trade.CreateBuyMarketOrder(Symbol, 10000);
            }
            </code>
            </example>
            <example>
            <code>
            
            Symbol USDCAD;
            Position position;
            
            protected override void OnStart()
            {
                USDCAD = MarketData.GetSymbol("USDCAD");
            }
            
            protected override void OnBar()
            {
                if (position == null)
                    Trade.CreateBuyMarketOrder(USDCAD, 100000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateSellMarketOrder(cAlgo.API.Internals.Symbol,System.Int32)">
            <summary>
            Creates sell market order.
            </summary>
            <param name="symbol">A subscribed symbol</param>
            <param name="volume">The trade monetary amount</param>
            <example>
            <code>
            protected override void OnTick()
            {
                var index = smaFast.Result.Count - 1;
                if (smaFast.Result[index-1] &lt; smaSlow.Result[index-2])
                {
                    Trade.CreateSellMarketOrder(Symbol, 10000);
                }
            }
            </code>
            </example>
            <example>
            <code>
            private Symbol EURUSD;
            
            protected override void OnStart()
            {
               EURUSD = MarketData.GetSymbol("EURUSD");
            }
            protected override void OnTick()
            {
                if (EURUSD.Bid >= value)
                {
                    Trade.CreateSellMarketOrder(EURUSD, 10000);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int32)">
            <summary>
            Creates buy/sell market order.
            </summary>
            <param name="tradeType"><see cref="F:cAlgo.API.TradeType.Buy"/> or <see cref="F:cAlgo.API.TradeType.Sell"/> command.</param>
            <param name="symbol">A subscribed symbol</param>
            <param name="volume">The trade monetary amount</param>
             <example>
             <code>
            protected override void OnBar()
            {
                if (Account.Positions.Count &lt; 2)
                {
                    Trade.CreateMarketOrder(TradeType.Buy, Symbol, 10000);
                }
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                var EURUSD = MarketData.GetSymbol("EURUSD");
                Trade.CreateMarketOrder(TradeType.Buy, EURUSD, 10000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateBuyLimitOrder(cAlgo.API.Internals.Symbol,System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Creates a buy limit order.
            </summary>
            <param name="symbol">Symbol to create order, use the Symbol property to create order for a subscribed symbol.</param>
            <param name="volume">Volume to buy.</param>
            <param name="targetPrice">Target price for limit order.</param>
            <param name="stopLoss">Stop loss price. Use null to create order without stop loss.</param>
            <param name="takeProfit">Take profit price. Use null to create order without take profit.</param>
            <param name="expiration">Expiration date and time. Use null to create order without expiration.</param>
            <example>
            <code>
            protected override void OnStart()
            {
                var price = Symbol.Bid-Symbol.PipSize;
                Trade.CreateBuyLimitOrder(Symbol, 10000, price ,null, null, null);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                var EURUSD = MarketData.GetSymbol("EURUSD");
                var price = EURUSD.Bid - EURUSD.PipSize;
            
                Trade.CreateBuyLimitOrder(EURUSD, 10000, price, null, null, null);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateSellLimitOrder(cAlgo.API.Internals.Symbol,System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Creates sell limit order.
            </summary>
            <param name="symbol">Symbol to create order, use the Symbol property to create order for a subscribed symbol.</param>
            <param name="volume">Volume to sell.</param>
            <param name="targetPrice">Target price for limit order.</param>
            <param name="stopLoss">Stop loss price. Use null to create order without stop loss.</param>
            <param name="takeProfit">Take profit price. Use null to create order without take profit.</param>
            <param name="expiration">Expiration date and time. Use null to create order without expiration.</param>
            <example>
            <code>
            protected override void OnTick()
            {
                if (condition)
                {
                    Trade.CreateSellLimitOrder(Symbol, 10000, price,
                                                stopLoss,takeProfit,expiration);
                }
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                var EURUSD = MarketData.GetSymbol("EURUSD");
            
                Trade.CreateSellLimitOrder(EURUSD, Volume, Price, null, null, null);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateBuyStopOrder(cAlgo.API.Internals.Symbol,System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Creates buy stop order.
            </summary>
            <param name="symbol">Symbol to create order, use the Symbol property to create order for a subscribed symbol.</param>
            <param name="volume">Volume to sell.</param>
            <param name="targetPrice">Target price for stop order.</param>
            <param name="stopLoss">Stop loss price. Use null to create order without stop loss.</param>
            <param name="takeProfit">Take profit price. Use null to create order without take profit.</param>
            <param name="expiration">Expiration date and time. Use null to create order without expiration.</param>
            <example>
            <code>
            protected override void OnStart()
            {
                var volume = 10000;
                
                var price = Symbol.Bid + Symbol.PipSize;
                var stopLoss = Symbol.Bid - 100*Symbol.PipSize;
                var takeProfit = Symbol.Bid + 100*Symbol.PipSize;
            
                Trade.CreateBuyStopOrder(Symbol, volume, price,
                                            stopLoss, takeProfit, null);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                var volume = 10000;
                var EURUSD = MarketData.GetSymbol("EURUSD");
                var price = EURUSD.Bid + EURUSD.PipSize;
                var stopLoss = EURUSD.Bid - 100*EURUSD.PipSize;
                var expiration = DateTime.Now.AddHours(12);
            
                Trade.CreateBuyStopOrder(EURUSD, volume, price, stopLoss, null, expiration);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.CreateSellStopOrder(cAlgo.API.Internals.Symbol,System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Creates sell stop order.
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Modifies position.
            </summary>
            <param name="position">Position to modify.</param>
            <param name="stopLoss">Stop loss price. Use null to leave position without stop loss.</param>
            <param name="takeProfit">Take profit price. Use null to leave position without take profit.</param>
            <example>
            <code>
            protected override void OnPositionOpened(Position openedPosition)
            {
               var stopLoss = openedPosition.TradeType == TradeType.Buy
                    ? openedPosition.EntryPrice - Symbol.PipSize * stopLossInPips
                    : openedPosition.EntryPrice + Symbol.PipSize * stopLossInPips;
            
                var takeProfit = openedPosition.TradeType == TradeType.Buy
                    ? openedPosition.EntryPrice + Symbol.PipSize * takeProfitInPips
                    : openedPosition.EntryPrice - Symbol.PipSize * takeProfitInPips;
            
                Trade.ModifyPosition(openedPosition, stopLoss, takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnPositionOpened(Position openedPosition)
            {
               var stopLoss = openedPosition.TradeType == TradeType.Buy
                    ? openedPosition.EntryPrice - Symbol.PipSize * stopLossInPips
                    : openedPosition.EntryPrice + Symbol.PipSize * stopLossInPips;
            
                Trade.ModifyPosition(openedPosition, stopLoss, null);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.DeletePendingOrder(cAlgo.API.PendingOrder)">
            <summary>
            Deletes pending order.
            </summary>
            <example>
            <code>
            protected override void OnStop()
            {
                // Delete last pending orders of the account when the Robot stops operating
                foreach (var order in Account.PendingOrders)
                    Trade.DeletePendingOrder(order);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Modifies pending order.
            </summary>
            <param name="order">Pending order to modify</param>
            <param name="stopLoss">Stop loss price</param>
            <param name="takeProfit">Take profit price</param>
            <param name="expirationTime">Optional Expiration date and time.</param>
            <example>
            <code>
            protected override void OnStart()
            {
               Trade.CreateBuyLimitOrder(Symbol,10000,Symbol.Bid);
            }  
            protected override void OnStop()
            {
                foreach (var order in Account.PendingOrders)
                {
                    double? stopLoss = Symbol.Bid - Symbol.PipSize;
                    double? takeProfit = Symbol.Bid + Symbol.PipSize;
                    Trade.ModifyPendingOrder(order, stopLoss, takeProfit);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.ITrade.Send(cAlgo.API.Requests.Request)">
            <summary>
            Send a new Trade Request to the server
            </summary>
            <param name="request">The trade request object</param>
            <example>
            <code>
            protected override void OnTick()
            {
                if(Trade.IsExecuting)
                    return;
            
                TradeType buy = TradeType.Buy;
                var marketOrder = new MarketOrderRequest(buy, 1000)
                                {
                                    Label = "MarketOrder", 
                                    SlippagePips = 1, 
                                    StopLossPips = 10, 
                                    TakeProfitPips = 10
                                }
                Trade.Send(marketOrder);
                
                double price = Symbol.Ask - 10*Symbol.PipSize;
                double? stopLoss = price - 30*Symbol.PipSize;
                double? takeProfit = price + 50*Symbol.PipSize;
                DateTime? expiry = DateTime.Now.AddMinutes(30);
            
                var limitOrder = new LimitOrderRequest(buy,1000,price)
                               {
                                    Label = "123456",
                                    StopLoss = stopLoss,
                                    TakeProfit = takeProfit
                                    Expiration = expiry,
                               }
                Trade.Send(limitOrder);
            }
            
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.IAccount">
             <summary>
             Contains the current account information.
             </summary>
             <example>
             <code>
            
             // Account Properties
            
             // Current Account Balance
             double balance = Account.Balance;
            
             // Current Account Currency e.g. EUR
             string currency = Account.Currency;
            
             // Current Account Equity
            	double equity = Account.Equity;
            
            	// Current Account Free Margin
             double freemargin = Account.FreeMargin;
            
             // Current Account Margin
            	double margin = Account.Margin;
            
             //Margin Level = Equity / Margin * 100
            	double? marginlevel = Account.MarginLevel;
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use Account object properties to get your trading account data
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class AccountSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var grid = new Grid(16, 2)
                         {
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                         };
            
                         var style = new Style();
            
                         style.Set(ControlProperty.Padding, 5);
                         style.Set(ControlProperty.Margin, 5);
                         style.Set(ControlProperty.FontWeight, FontWeight.ExtraBold);
                         style.Set(ControlProperty.BackgroundColor, Color.Black);
            
                         grid.AddChild(new TextBlock { Text = "Account Info", Style = style, HorizontalAlignment = HorizontalAlignment.Center }, 0, 0, 1, 2);
            
                         grid.AddChild(new TextBlock { Text = "Type", Style = style }, 1, 0);
                         grid.AddChild(new TextBlock { Text = Account.AccountType.ToString(), Style = style }, 1, 1);
            
                         grid.AddChild(new TextBlock { Text = "Is Live", Style = style }, 2, 0);
                         grid.AddChild(new TextBlock { Text = Account.IsLive.ToString(), Style = style }, 2, 1);
            
                         grid.AddChild(new TextBlock { Text = "Balance", Style = style }, 3, 0);
                         grid.AddChild(new TextBlock { Text = Account.Balance.ToString(), Style = style }, 3, 1);
            
                         grid.AddChild(new TextBlock { Text = "Broker Name", Style = style }, 4, 0);
                         grid.AddChild(new TextBlock { Text = Account.BrokerName, Style = style }, 4, 1);
            
                         grid.AddChild(new TextBlock { Text = "Currency", Style = style }, 5, 0);
                         grid.AddChild(new TextBlock { Text = Account.Currency, Style = style }, 5, 1);
            
                         grid.AddChild(new TextBlock { Text = "Number", Style = style }, 6, 0);
                         grid.AddChild(new TextBlock { Text = Account.Number.ToString(), Style = style }, 6, 1);
            
                         grid.AddChild(new TextBlock { Text = "Equity", Style = style }, 7, 0);
                         grid.AddChild(new TextBlock { Text = Account.Equity.ToString(), Style = style }, 7, 1);
            
                         grid.AddChild(new TextBlock { Text = "Free Margin", Style = style }, 8, 0);
                         grid.AddChild(new TextBlock { Text = Account.FreeMargin.ToString(), Style = style }, 8, 1);
            
                         grid.AddChild(new TextBlock { Text = "Margin", Style = style }, 9, 0);
                         grid.AddChild(new TextBlock { Text = Account.Margin.ToString(), Style = style }, 9, 1);
            
                         grid.AddChild(new TextBlock { Text = "Margin Level", Style = style }, 10, 0);
                         grid.AddChild(new TextBlock { Text = Account.MarginLevel.ToString(), Style = style }, 10, 1);
            
                         grid.AddChild(new TextBlock { Text = "Precise Leverage", Style = style }, 11, 0);
                         grid.AddChild(new TextBlock { Text = Account.PreciseLeverage.ToString(), Style = style }, 11, 1);
            
                         grid.AddChild(new TextBlock { Text = "Stop Out Level", Style = style }, 12, 0);
                         grid.AddChild(new TextBlock { Text = Account.StopOutLevel.ToString(), Style = style }, 12, 1);
            
                         grid.AddChild(new TextBlock { Text = "Unrealized Gross Profit", Style = style }, 13, 0);
                         grid.AddChild(new TextBlock { Text = Account.UnrealizedGrossProfit.ToString(), Style = style }, 13, 1);
            
                         grid.AddChild(new TextBlock { Text = "Unrealized Net Profit", Style = style }, 14, 0);
                         grid.AddChild(new TextBlock { Text = Account.UnrealizedNetProfit.ToString(), Style = style }, 14, 1);
            
                         grid.AddChild(new TextBlock { Text = "User Id", Style = style }, 15, 0);
                         grid.AddChild(new TextBlock { Text = Account.UserId.ToString(), Style = style }, 15, 1);
            
                         Chart.AddControl(grid);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.AccountType">
            <summary>
            Returns the current account type.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Balance">
             <summary>
             Returns the balance of the current account.
             </summary>
             <example>
             <code>
             double balancebefore;
             double balanceafter;
            
             protected override void OnStart()
             {
                // store the balance upon start up of the robot
                balancebefore = Account.Balance;
             }
            
            
             protected override void OnStop()
             {
                 // Store the balance upon stop of the robot.
                 balanceafter = Account.Balance;
                 // print the difference
             	Print("The difference of balancebefore and balanceafter is: {0}", balancebefore-balanceafter);
             }
             </code>
             </example>
             <example>
             <code>
             if ( Account.Balance &#60; 0 )
                 Stop();
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Currency">
            <summary>
            Returns the currency of the current account, e.g. "EUR".
            </summary>
            <example>
            <code>
            Print("The currency of the current account is: {0}", Account.Currency);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Equity">
            <summary>
            Represents the equity of the current account (balance minus Unrealized Net Loss plus Unrealized Net Profit plus Bonus).
            </summary>
            <example>
            <code>
            Print("The equity of this account is: {0}", Account.Equity);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Margin">
            <summary>
            Represents the margin of the current account.
            </summary>
            <example>
            <code>
            Print("The margin of this account is: {0}", Account.Margin);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.FreeMargin">
            <summary>
            Represents the free margin of the current account.
            </summary>
            <example>
            <code>
            Print("The free margin of this account is: {0}", Account.FreeMargin);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.MarginLevel">
            <summary>
            Represents the margin level of the current account.
            Margin Level (in %) is calculated using this formula:
            Equity / Margin * 100
            </summary>
            <example>
            <code>
            Print("The marginlevel of this account is: {0}", Account.MarginLevel);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.IsLive">
            <summary>
            Defines if the account is Live or Demo. True if the Account is Live, False if it is a Demo.
            </summary>
            <example>
            <code>
            if (Account.IsLive)
                Print("Live Account");
            else
                Print("Demo Account");
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Leverage">
            <summary>
            The account leverage.
            </summary>
            <example>
            <code>
            var leverage = Account.Leverage;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Positions">
             <summary>
             Represents the open positions of the current account.
             </summary>
             <example>
             <code>
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnTick()
             {
                 Print("The number of position of this account is: {0}", Account.Positions.Count);
             }
            
             &#47;&#47;&#46;&#46;&#46;
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.PendingOrders">
             <summary>
             Represents the pending orders of the current account.
             </summary>
             <example>
             <code>
            
             &#47;&#47;&#46;&#46;&#46;
            
             protected override void OnTick()
             {
                 Print("The number of PendingOrder of this account is: {0}", Account.PendingOrder.Count);
             }
            
             &#47;&#47;&#46;&#46;&#46;
            
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Number">
            <summary>
            Returns the number of the current account, e.g. 123456.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.BrokerName">
            <summary>
            Returns the broker name of the current account.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.UnrealizedGrossProfit">
            <summary>
            Gets the Unrealized Gross profit value.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.UnrealizedNetProfit">
            <summary>
            Gets the Unrealized Net profit value.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.PreciseLeverage">
            <summary>
            Gets the precise account leverage value.
            </summary>
            <example>
            <code>
            var leverage = Account.Leverage;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.StopOutLevel">
            <summary>
            Stop Out level is a lowest allowed Margin Level for account. If Margin Level is less than Stop Out, position will be closed sequentially until Margin Level is greater than Stop Out.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.UserId">
            <summary>
            Gets the user ID.
             </summary>
        </member>
        <member name="P:cAlgo.API.Internals.IAccount.Asset">
            <summary>
             </summary>
        </member>
        <member name="T:cAlgo.API.Internals.IIndicator">
            <summary>
            Base interface for all Indicators
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicator.Calculate(System.Int32)">
            <summary>
            Method to calculate the value(s) of indicator for given index. 
            </summary>
            <param name="index">The index.</param>
            <example>
            <code>
            Example 1
            
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            public override void Calculate(int index)
            {
                // Calculate value at specified index
                
                // if the index is less than Period exit
                if(index &#60; Period)
                    return;
            
                // Maximum returns the largest number in the Series in the range [Series[index-Period], Series[index]]
                double high = MarketSeries.High.Maximum(Period);
                // Minimum returns the smallest number in the Series in the range [index - Period, index]
                double low = MarketSeries.Low.Minimum(Period);
                double center = (high + low) / 2;
            
                // Display Result of Indicator
                Result[index] = center;
            }
            Example 2
            
            &#47;&#47;&#46;&#46;&#46;
            
            [Parameter]
            public DataSeries Source { get; set; }
            
            [Parameter("Periods", DefaultValue = 25)]
            public int Periods { get; set; }
            
            &#47;&#47;&#46;&#46;&#46;
            
            public override void Calculate(int index)
            { 
                // Simple moving average calculation
                double sum = 0.0;
                for (int i = index - Periods + 1; i &#60;= index; i++)
                {
                    sum += Source[i];
                }
                Result[index] = sum / Periods;
             
            }
            
            &#47;&#47;&#46;&#46;&#46;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.IIndicatorsAccessor">
            <summary>
            Accessor to Indicators
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.GetIndicator``1(System.Object[])">
             <summary>
             Initializes the custom indicator
             </summary>
             <typeparam name="TIndicator">The custom indicator name</typeparam>
             <param name="parameterValues">The custom indicator parameters</param>
             <returns>Custom indicator instance</returns>
             <example>
             <code>
             private SampleSMA sma;
            
             protected override void Initialize()
             {
                 sma = Indicators.GetIndicator&#60;SampleSMA>(Source, Period);
             }
             public override void Calculate(int index)
             {
                 // Display the sma result on the chart
                 Result[index] = sma.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MovingAverage(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
             <summary>
             Moving Average indicators are used to smooth data producing trend indicators.
             </summary>
             <param name="source">The source data used for the MA calculation.</param>
             <param name="periods">The periods used in the calculation.</param>
             <param name="maType">Method of calculation of MA.</param>
             <returns>Moving Average indicator instance</returns>
             <example>
             <code>
             private MovingAverage ma;
            
             protected override void Initialize()
             {
                 ma = Indicators.MovingAverage(MarketSeries.Close, 50, MovingAverageType.Simple);
             }
             public override void Calculate(int index)
             {
                 // Display the ma result on the chart
                 Result[index] = ma.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ExponentialMovingAverage(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Exponential Moving Average smoothes the price data producing a trend indicator.
             </summary>
             <param name="source">The source data used for the EMA calculation.</param>
             <param name="periods">The periods used in the calculation.</param>
             <returns>Exponential Moving Average indicator instance</returns>
             <example>
             <code>
             private ExponentialMovingAverage ema;
            
             protected override void Initialize()
             {
                 ema = Indicators.ExponentialMovingAverage(MarketSeries.Close, 50);
             }
            
             public override void Calculate(int index)
             {
                 // Display the ema result on the chart
                 Result[index] = ema.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WeightedMovingAverage(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Weighted Moving Average smoothes the price data producing a trend indicator.
             </summary>
             <param name="source">The source data used for WMA calculation.</param>
             <param name="periods">The periods used in the calculation.</param>
             <returns>Weighted Moving Average indicator instance</returns>
             <example>
             <code>
            
             private WeigthedMovingAverage wma;
            
             protected override void Initialize()
             {
                 wma = Indicators.WeightedMovingAverage(MarketSeries.Close, 20);
             }
             public override void Calculate(int index)
             {
                 Result[index] = wma.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.SimpleMovingAverage(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The simple moving average smoothes the price data producing a trend indicator
             </summary>
             <param name="source">The source data used for SMA calculation.</param>
             <param name="periods">The periods used in the calculation.</param>
             <returns>Simple Moving Average indicator instance</returns>
             <example>
             <code>
            
             private SimpleMovingAverage sma;
            
             protected override void Initialize()
             {
                 sma = Indicators.SimpleMovingAverage(MarketSeries.Close, 14);
             }
             public override void Calculate(int index)
             {
                 Result[index] = sma.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TriangularMovingAverage(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Triangular Moving Average is averaged twice to produce a double smoothed trend indicator
             </summary>
             <param name="source">The source data used for TMA calculation.</param>
             <param name="periods">The periods used in the calculation.</param>
             <returns>Triangular Moving Average indicator instance</returns>
             <example>
             <code>
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Output("Result", Color = Colors.Orange)]
             public IndicatorDataSeries Result { get; set; }
            
             private SimpleMovingAverage tma;
            
             protected override void Initialize()
             {
                 tma = Indicators.TriangularMovingAverage(Source, 10);
             }
             public override void Calculate(int index)
             {
                 Result[index] = tma.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HighMinusLow">
             <summary>
             The High Minus Low indicator is used to compute the range of daily bars
             </summary>
             <returns>High Minus Low indicator instance</returns>
             <example>
             <code>
             [Output("Main")]
             public IndicatorDataSeries Result {get; set;}
            
             private HighMinusLow highMinusLow;
            
             protected override void Initialize()
             {
                 highMinusLow = Indicators.HighMinusLow();
             }
             public override void Calculate(int index)
             {
                 // Display the High Minus Low indicator on the chart
                 Result[index] = highMinusLow.Result[index];
                 Print("Previous HighMinusLow is: {0}", highMinusLow.Result[index-1]);
             }
             &#47;&#47;&#46;&#46;&#46;
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TrueRange">
             <summary>
             Initializes the True Range indicator.
             </summary>
             <remarks>
             The True Range indicator is the daily range plus any gap from the closing price of the previous day
             </remarks>
             <returns>True Range indicator instance</returns>
             <example>
             <code>
             [Output("Main")]
             public IndicatorDataSeries Result {get; set;}
            
             private TrueRange trueRange;
            
             protected override void Initialize()
             {
                 trueRange = Indicators.TrueRange();
             }
             public override void Calculate(int index)
             {
                 Result[index] = trueRange.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WellesWilderSmoothing(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             Welles Wilder Smoothing eliminates noise to identify the trend.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Welles Wilder Smoothing indicator instance</returns>
             <example>
             <code>
             [Output("Main")]
             public IndicatorDataSeries Result {get; set;}
            
             private WellesWilderSmoothing wws;
            
             protected override void Initialize()
             {
                 wws = Indicators.WellesWilderSmoothing(MarketSeries.Close, 14);
             }
             public override void Calculate(int index)
             {
                 Result[index] = wws.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HullMovingAverage(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Hull Moving Average is a more responsive moving average that nearly removes lag and improves smoothing at the same time.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Hull Moving Average indicator instance</returns>
             <example>
             <code>
             [Output("Main")]
             public IndicatorDataSeries Result {get; set;}
            
             private HullMovingAverage hma;
            
             protected override void Initialize()
             {
                 hma = Indicators.HullMovingAverage(MarketSeries.Close, 14);
             }
             public override void Calculate(int index)
             {
                 Result[index] = hma.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.SwingIndex(System.Int32)">
             <summary>
             Returns the Swing Index indicator instance.
             </summary>
             <param name="limitMoveValue">The value of the limit move used for calculation.</param>
             <returns>Swing Index indicator instance</returns>
             <example>
             <code>
             [Parameter(DefaultValue = 20)]
             public int limitMove { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             private SwingIndex si;
             protected override void Initialize()
             {
                si = Indicators.SwingIndex(limitMove);
             }
            
             public override void Calculate(int index)
             {
                 //This stores current SwingIndex to Result Output
                 Result[index] = si.Result[index];
                 // This prints previous SwingIndex to log
                 Print("Previous SwingIndex is: {0}", si.Result[index-1]);
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AccumulativeSwingIndex(System.Int32)">
             <summary>
             Initializes the Accumulative Swing Index indicator
             </summary>
             <remarks>
             The Accumulative Swing Index indicator is used as a divergence and confirmation tool.
             </remarks>
             <param name="limitMoveValue">The value of the Limit Move used for calculation.</param>
             <returns>Accumulative Swing Index indicator instance</returns>
             <example>
             <code>
             [Parameter(DefaultValue = 20)]
             public int limitMove { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             private AccumulativeSwingIndex asi;
             protected override void Initialize()
             {
                asi = Indicators.AccumulativeSwingIndex(limitMove);
             }
            
             public override void Calculate(int index)
             {
                 //This stores current AccumulativeSwingIndex to Result Output
                 Result[index] = asi.Result[index];
                 // This prints previous AccumulativeSwingIndex to log
                 Print("Previous AccumulativeSwingIndex is: {0}", asi.Result[index-1]);
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Aroon(System.Int32)">
             <summary>
             The Aroon indicator is used to identify trends and their reversals.
             </summary>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Aroon indicator instance</returns>
             <example>
             <code>
             [Parameter("Period")]
             public int Period { get; set; }
            
             private Aroon aroon;
            
             protected override void OnStart()
             {
                 aroon = Indicators.Aroon(Period);
             }
             protected override void OnTick()
             {
                 if (aroon.Up.LastValue &#60; aroon.Down.LastValue)
                 {
                     //Do something
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.StandardDeviation(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
             <summary>
             The Standard Deviation indicator shows volatility.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <param name="maType">Type of the Moving Average.</param>
             <returns>Standard Deviation indicator instance</returns>
             <example>
             <code>
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Parameter(DefaultValue = 20)]
             public int Period { get; set; }
            
             [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
             public MovingAverageType MAType { get; set; }
            
             private StandardDeviation sd;
             private double previousValue;
            
             protected override void OnStart()
             {
                 sd = Indicators.StandardDeviation(Source, Period, MAType);
                 previousValue = sd.Result.LastValue;
             }
            
             protected override void OnBar()
             {
                 //If StandardDeviation has increased
                 if (sd.Result.LastValue > previousValue)
                 {
                     //Do something
                 }
                 //...
                 previousValue = sd.Result.LastValue;
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.BollingerBands(cAlgo.API.DataSeries,System.Int32,System.Double,cAlgo.API.MovingAverageType)">
             <summary>
             The Bollinger Bands indicator shows volatility.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <param name="standardDeviations">The value of the standard deviations used for calculation.</param>
             <param name="maType">Type of the Moving Average.</param>
             <returns>Bollinger Bands indicator instance</returns>
             <example>
             <code>
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Parameter(DefaultValue = 20)]
             public int period { get; set; }
            
             [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
             public MovingAverageType MAType { get; set; }
            
             [Parameter(DefaultValue = 1.5)]
             public double std { get; set; }
            
             private BollingerBands bb;
            
             protected override void OnStart()
             {
                 bb = Indicators.BollingerBands(Source, period, std, MAType);
             }
             protected override void OnTick()
             {
                 if (bb.Top.LastValue > Symbol.Bid)
                 {
                     Print("Bid price is higher than the Top Bollinger Band");
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.RelativeStrengthIndex(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Relative Strength Index indicator measures turns in price by measuring turns in momentum.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Relative Strength indicator instance</returns>
             <example>
             <code>
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Parameter(DefaultValue = 20)]
             public int Period { get; set; }
            
             private RelativeStrengthIndex rsi;
            
             protected override void OnStart()
             {
                 rsi = Indicators.RelativeStrengthIndex(Source, Period);
             }
             protected override void OnBar()
             {
                 if (rsi.Result.LastValue > 70)
                 {
                     Print("RSI is higher than 70");
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TimeSeriesMovingAverage(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Time Series Moving Average is a moving average based on linear regression
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">Number of periods used for calculation.</param>
             <returns>Time Series Moving Average indicator instance</returns>
             <example>
             <code>
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Parameter(DefaultValue = 14)]
             public int periodfast { get; set; }
            
             [Parameter(DefaultValue = 24)]
             public int periodslow { get; set; }
            
             private TimeSeriesMovingAverage tsmfast;
             private TimeSeriesMovingAverage tsmslow;
            
             protected override void OnStart()
             {
                 tsmfast = Indicators.TimeSeriesMovingAverage(Source, periodfast);
                 tsmslow = Indicators.TimeSeriesMovingAverage(Source, periodslow);
             }
            
             protected override void OnTick()
             {
                 //If TSMA with period 14 moves above TSMA with period 24
                 if (tsmfast.Result.LastValue > tsmslow.Result.LastValue)
                 {
                     //Do something
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionForecast(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             Linear Regression Forecast is a trend indicator used to forecast values using the Least Squares Fit method.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Linear Regression Forecast indicator instance</returns>
             <example>
             <code>
            
             private LinearRegressionForecast lrForecast;
            
             protected override void OnStart()
             {
                 lrForecast = Indicators.LinearRegressionForecast(Source, Period);
             }
             protected override void OnTick()
             {
                 Print("LRF Last Value = {0}", lrForecast.Result.LastValue);
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionRSquared(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The R Squared or coefficient of determination indicator's main purpose is the confirm the strength of the market.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Linear Regression R-Squared indicator instance</returns>
             <example>
             <code>
            
             private LinearRegressionRSquared rSquared;
            
             protected override void OnStart()
             {
                 rSquared = Indicators.LinearRegressionRSquared(Source, Period);
             }
             protected override void OnTick()
             {
                 Print("R squared is {0}", rSquared.Result.LastValue)
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PriceROC(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Price Rate of Change indicator is the percentage change of the current price and the price N periods ago.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Price Rate of Change indicator instance</returns>
             <example>
             <code>
             [Parameter("Source")]
             public DataSeries Source { get; set; }
            
             [Parameter(DefaultValue = 14)]
             public int Period { get; set; }
            
             private PriceROC priceROC;
            
             protected override void OnStart()
             {
                 priceROC = Indicators.PriceROC(Source, Period);
             }
            
             protected override void OnTick()
             {
                Print("{0}", priceROC.Result.LastValue);
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Vidya(cAlgo.API.DataSeries,System.Int32,System.Double)">
             <summary>
             Volatility Index Dynamic Average (VIDYA) is a smoothing (moving average) based on dynamically changing periods.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <param name="r2Scale">The value of the r-squared scale used for calculation.</param>
             <returns>Vidya indicator instance</returns>
             <example>
             <code>
             [Parameter]
             public DataSeries Price { get; set; }
            
             [Parameter("Period", DefaultValue = 14)]
             public int Period { get; set; }
            
             [Parameter("Sigma", DefaultValue = 0.65, MinValue = 0.1, MaxValue = 0.95)]
             public double Sigma { get; set; }
            
             private Vidya vidya;
            
             protected override void OnStart()
             {
                 vidya = Indicators.Vidya(Price, Period, Sigma);
             }
            
             protected override void OnTick()
             {
                 //If vidya is greater than a specific value
                 if (vidya.Result.LastValue > Value)
                 {
                     //Do something
                     Print("LastValue {0}", vidya.Result.LastValue);
                 }
            
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.UltimateOscillator(System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns the Ultimate Oscillator indicator instance.
             </summary>
             <param name="cycle1">The value of the short periods used for calculation.</param>
             <param name="cycle2">The value of the medium periods used for calculation.</param>
             <param name="cycle3">The value of the long periods used for calculation.</param>
             <returns>UltimateOscillator indicator instance</returns>
             <example>
             <code>
            
             protected override void OnStart()
             {
                ultimateOscillator = Indicators.UltimateOscillator(Cycle1,Cycle2,Cycle3);
             }
            
             protected override void OnTick()
             {
                double currentValue = ultimateOscillator.Result.LastValue;
            
                 //...
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DirectionalMovementSystem(System.Int32)">
             <summary>
             The Directional Movement System is composed of three indicators that show if the market is trending and provide signals.
             </summary>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Directional Movement System indicator instance</returns>
             <example>
             <code>
             private DirectionalMovementSystem _dms;
             private double _dIplus;
             private double _dIminus;
            
             [Parameter("ADX Period", DefaultValue = 14)]
             public int Period { get; set; }
            
             protected override void OnStart()
             {
                 _dms = Indicators.DirectionalMovementSystem(Period);
             }
            
             protected override void OnTick()
             {
                 _dIplus = _dms.DIPlus.LastValue;
                 _dIminus = _dms.DIMinus.LastValue;
            
                 if (_dIminus > _dIplus)
                 {
                     // Do something
                 }
            
                 //...
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ParabolicSAR(System.Double,System.Double)">
             <summary>
             The Parabolic SAR indicator identifies potential reversals in the market direction
             </summary>
             <param name="minAf">The minimum accumulation factor</param>
             <param name="maxAf">The maximum accumulation factor</param>
             <returns>ParabolicSAR indicator instance</returns>
             <example>
             <code>
            
             private ParabolicSAR parabolicSar;
            
             //...
            
             protected override void OnStart()
             {
                parabolicSar = Indicators.ParabolicSAR(minaf, maxaf);
             }
            
             protected override void OnTick()
             {
                double currentValue = parabolicSar.Result.LastValue;
            
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.StochasticOscillator(System.Int32,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
             <summary>
             The Stochastic Oscillator is a momentum indicator that aims to show price reversals by comparing the closing price to the price range.
             </summary>
             <param name="kPeriods">The value of the k periods used for calculation.</param>
             <param name="kSlowing">The value of the k slowing used for calculation.</param>
             <param name="dPeriods">The value of the d periods used for calculation.</param>
             <param name="maType">Type of the Moving Average.</param>
             <returns>Stochastic Oscillator indicator instance.</returns>
             <example>
             <code>
            
             private StochasticOscillator stochastic;
            
             //...
            
             protected override void OnStart()
             {
                stochastic = Indicators.StochasticOscillator(kPeriods, kSlowing, dPeriods, maType);
             }
            
             protected override void OnTick()
             {
                double percentD = stochastic.PercentD.LastValue;
                double percentK = stochastic.PercentK.LastValue;
            
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MomentumOscillator(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Momentum Oscillator measures the momentum of the price.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Momentum Oscillator indicator instance</returns>
             <example>
             <code>
            
             private MomentumOscillator _momentum;
            
             protected override void OnStart()
             {
                 _momentum = Indicators.MomentumOscillator(MarketSeries.Close, 14);
             }
             protected override void OnTick()
             {
                 double momentum = _momentum.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MedianPrice">
             <summary>
             The Median indicator is the average of the high and the low.
             </summary>
             <returns>Median indicator instance</returns>
             <example>
             <code>
             private MedianPrice medianPrice;
            
             protected override void OnStart()
             {
                 medianPrice = Indicators.MedianPrice();
             }
             protected override void OnTick()
             {
                 double price = medianPrice.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsAccumulationDistribution">
             <summary>
             The Williams Accumulation Distribution indicator shows bullish or bearish trends.
             </summary>
             <returns>Williams Accumulation Distribution indicator instance</returns>
             <example>
             <code>
             private WilliamsAccumulationDistribution williamsAD;
            
             protected override void OnStart()
             {
                 williamsAD = Indicators.WilliamsAccumulationDistribution();
             }
             protected override void OnTick()
             {
                 double result = williamsAD.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.FractalChaosBands">
             <summary>
             The Fractal Chaos Bands indicator breaks down large trends into predictable patterns.
             </summary>
             <returns>Fractal Chaos Bands indicator instance</returns>
             <example>
             <code>
             private FractalChaosBands fractalChaosBands;
            
            	protected override void Initialize()
            	{
            	    fractalChaosBands = Indicators.FractalChaosBands();
            	}
             public override void Calculate(int index)
            	{
            	    Print("Fractal Chaos Bands High = {0}", fractalChaosBands.High[index]);
            	}
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TypicalPrice">
             <summary>
             The Typical Price indicator is the average of the high, low, and closing prices.
             </summary>
             <returns>Typical Price indicator instance.</returns>
             <example>
             <code>
             private TypicalPrice typicalPriceIndicator;
            
             protected override void Initialize()
             {
                 typicalPriceIndicator = Indicators.TypicalPrice();
             }
             public override void Calculate(int index)
             {
                 double typicalPriceValue = typicalPriceIndicator.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CommodityChannelIndex(System.Int32)">
             <summary>
             The Commodity Channel Index identifies overbough and oversold conditions, price reversals and trend strength.
             </summary>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Commodity Channel Index indicator instance.</returns>
             <example>
             <code>
            
             private CommodityChannelIndex commodityChannelIndex;
             //...
             protected override void OnStart()
             {
                 commodityChannelIndex = Indicators.CommodityChannelIndex(Periods);
             }
             protected override void OnBar()
             {
                 // Print the current value to the log
                 Print("The current CCI value = {0}",
                         commodityChannelIndex.Result.LastValue);
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HistoricalVolatility(cAlgo.API.DataSeries,System.Int32,System.Int32)">
            <summary>
            The Historical Volatility indicator is derived from time series of past market prices.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <param name="barHistory">The value of the bar history used for calculation.</param>
            <returns>Historical Volatility indicator instance</returns>
            <example>
            <code>
            protected override void OnStart()
            {
                historicalVolatility = Indicators.HistoricalVolatility
                    (MarketSeries.Close, Period, BarHistory);
            }
            protected override void OnBar()
            {
                double hv = historicalVolatility.Result.LastValue;
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MassIndex(System.Int32)">
             <summary>
             The Mass Index indicator is used to predict trend reversals.
             </summary>
             <param name="periods">The value of the periods used for calculation.</param>
             <returns>Mass Index indicator instance</returns>
             <example>
             <code>
             private MassIndex massIndex;
            
             protected override void Initialize()
             {
                 massIndex = Indicators.MassIndex(14);
             }
            
             public override void Calculate(int index)
             {
                 double currentMassIndex = massIndex.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinVolatility(System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
             <summary>
             The Chaikin Volatiliy indicator measures the trading range between the high and the low prices.
             </summary>
             <param name="periods">The value of the periods used for calculation.</param>
             <param name="rateOfChange">The value of the rage of change used for calculation.</param>
             <param name="maType">Type of the Moving Average.</param>
             <returns>Chaikin Volatiliy indicator instance</returns>
             <example>
             <code>
            
             private ChaikinVolatility chaikinVolatility;
            
             protected override void OnStart()
             {
                 chaikinVolatility = Indicators.ChaikinVolatility(Periods, _roc, MaType);
             }
             protected override void OnBar()
             {
                 // Print to log
                 Print("The Current Chaikin Volatility Value is: {0}",
                          chaikinVolatility.Result.LastValue);
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DetrendedPriceOscillator(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
             <summary>
             The Detrended Price Oscillator shows intermediate overbought and oversold levels.
             </summary>
             <param name="source">The price source data used for calculation.</param>
             <param name="periods">The period used for calculation.</param>
             <param name="maType">Type of the Moving Average.</param>
             <returns>Detrended Price Oscillator indicator instance</returns>
             <example>
             <code>
            
             private _detrendedPriceOscillator _dpoFast;
             private _detrendedPriceOscillator _dpoSlow;
            
             protected override void OnStart()
             {
                 _dpoFast = Indicators.DetrendedPriceOscillator(Source, PeriodFast, MaType);
                 _dpoSlow = Indicators.DetrendedPriceOscillator(Source, PeriodSlow, MaType);
             }
            
             protected override void OnBar()
             {
                 if(_dpoFast.Result.Count &#60; 1)
                     return;
            
                 int currentIndex = _dpoFast.Result.Count - 1;
                 int prevIndex = currentIndex - 1;
            
                 if (_dpoFast.Result[prevIndex] > _dpoSlow.Result[prevIndex])
                 {
                     //Do something
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionIntercept(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Linear Regression Intercept can be used together with the Linear Regression Slope indicator to plot the Linear Regression Line.
             </summary>
             <param name="source">The price source data used for calculation.</param>
             <param name="periods">The period used for calculation.</param>
             <returns>The Linear Regression Intercept indicator instance</returns>
             <example>
             <code>
             [Parameter("Period", DefaultValue = 14)]
            	public int Period { get; set; }
            
            	protected override void OnStart()
             {
                 // initialize a new instance of LinearRegressionIntercept indicator class
            	    _linearRegressionIntercept = Indicators.
                     LinearRegressionIntercept(MarketSeries.Close, Period);
            	}
            	protected override void OnBar(int index)
            	{
                 // Result of _linearRegressionIntercept at the current index
                 double result = _linearRegressionIntercept.Result[index];
                 // Print the current result to the log
            	    Print("Linear Regression Intercept at the current index is = {0}", result);
            	}
            	</code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionSlope(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Linear Regression Slope indicator is intended to measure the direction and strength of a trend.
             </summary>
             <param name="source">The price source data used for calculation.</param>
             <param name="periods">The period used for calculation.</param>
             <returns>The Linear Regression Slope indicator instance</returns>
             <example>
             <code>
             private LinearRegressionSlope slope;
            
             protected override void Initialize()
             {
                 slope = Indicators.LinearRegressionSlope(MarketSeries.Close, 14);
             }
             public override void Calculate(int index)
             {
                 double currentSlope = slope.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdHistogram(System.Int32,System.Int32,System.Int32)">
            <summary>
            The MACD Histogram is a momentum indicator measured by typically subtracting a 26 period moving average from a 12 period moving average.
            </summary>
            <param name="longCycle">The long period used calculation.</param>
            <param name="shortCycle">The short period used calculation.</param>
            <param name="signalPeriods">The period used for the calculation of the signal.</param>
            <returns>The Macd Histogram indicator instance</returns>
            <example>
            <code>
            private MacdHistogram macd;
            //...
            protected override void Initialize()
            {
                macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
                //...
            }
            public override void Calculate(int index)
            {
                double macdHistogramResult = macd.Histogram[index];
                double macdSignalResult = macd.Signal[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdHistogram(cAlgo.API.DataSeries,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the MacdHistogram indicator instance for a specific source series
            </summary>
            <param name="source">The source series to be applied</param>
            <param name="longCycle">The long period used calculation.</param>
            <param name="shortCycle">The short period used calculation.</param>
            <param name="signalPeriods">The period used for the calculation of the signal.</param>
            <returns>The Macd Histogram indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdCrossOver(System.Int32,System.Int32,System.Int32)">
             <summary>
             The MACD Line with the Signal line and their difference as a histogram.
             </summary>
             <param name="longCycle">The long period used calculation.</param>
             <param name="shortCycle">The short period used calculation.</param>
             <param name="signalPeriods">The period used for the calculation of the signal.</param>
             <returns>The Macd CrossOver indicator instance</returns>
             <example>
             <code>
             //...
             private MacdCrossOver _macdCrossOver;
            
             protected override void Initialize()
             {
                 _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
             }
            
             public override void Calculate(int index)
             {
                 double macd = _macdCrossOver.MACD[index];
                 double signal = _macdCrossOver.Signal[index];
                 //...
             }
            
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdCrossOver(cAlgo.API.DataSeries,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the MacdCrossOver indicator instance for a specific source series
            </summary>
            <param name="source">The source series to be applied</param>
            <param name="longCycle">The long period used calculation.</param>
            <param name="shortCycle">The short period used calculation.</param>
            <param name="signalPeriods">The period used for the calculation of the signal.</param>
            <returns>The MacdCrossOver indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PriceOscillator(cAlgo.API.DataSeries,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
             <summary>
             The Price Oscillator calculates the difference between two moving averages.
             </summary>
             <param name="source">The price source data used for calculation.</param>
             <param name="longCycle">The long period used for calculation.</param>
             <param name="shortCycle">The short period used for calculation.</param>
             <param name="maType">Type of the Moving Average.</param>
             <returns>The Price Oscillator indicator instance.</returns>
             <example>
             <code>
             //...
             private PriceOscillator priceOscillator;
            
             protected override void OnStart()
             {
                 priceOscillator = Indicators.PriceOscillator
                     (MarketSeries.Close, 14, 5, MovingAverageType.Simple);
                 //...
             }
             protected override void OnTick()
             {
                 double result = priceOscillator.Result[index];
                 //...
             }
              </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.RainbowOscillator(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
             <summary>
             The Rainbow Oscillator is a process of repetitive smoothing of simple moving averages resulting in a full spectrum of trends.
             </summary>
             <param name="source">The price source data used for calculation.</param>
             <param name="levels">The value of the levels used for calculation.</param>
             <param name="maType">The Moving Average type used for calculation.</param>
             <returns>The Rainbow Oscillator instance.</returns>
             <example>
             <code>
             //...
             private RainbowOscillator rainbow;
            
             protected override void Initialize()
             {
                 MovingAverageType simpleMa = MovingAverageType.Simple;
                 DataSeries close = MarketSeries.Close;
                 rainbow = Indicators.RainbowOscillator(close, 9, simpleMa);
                 //...
             }
             public override void Calculate(int index)
             {
                 double currentValue = rainbow.Result[index];
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VerticalHorizontalFilter(cAlgo.API.DataSeries,System.Int32)">
            <summary>
            The Vertical Horizontal Filter indicator measures the level of trend activity.
            </summary>
            <param name="source">The source data used for calculation.</param>
            <param name="periods">The periods used for calculation.</param>
            <returns>the Vertical Horizontal Filter indicator instance</returns>
            <example>
            <code>
            //...
            private VerticalHorizontalFilter VHFilter;
            //...
            protected override void Initialize()
            {
                VHFilter = Indicators.VerticalHorizontalFilter(Source, Periods);
                //...
            }
            public override void Calculate(int index)
            {
                double result = VHFilter.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsPctR(System.Int32)">
            <summary>
            The Williams Percent R indicator is a momentum indicator measuring overbought and oversold levels.
            </summary>
            <param name="periods">The period used for calculation.</param>
            <returns>The Williams Percent R indicator instance</returns>
            <example>
            <code>
            //...
            private WilliamsPctR williamsPctRSeries;
            //...
            protected override void OnStart()
            {
                williamsPctRSeries = Indicators.WilliamsPctR(14);
                //...
            }
            protected override void OnTick()
            {
                double williamsPctRValue = williamsPctRSeries.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Trix(cAlgo.API.DataSeries,System.Int32)">
             <summary>
             The Trix indicator shows the slope of a triple-smoothed exponential moving average.
             </summary>
             <param name="source">The source data used for calculation.</param>
             <param name="periods">The periods used for the calculation.</param>
             <returns>The Trix indicator instance.</returns>
             <example>
             <code>
             private Trix trixSeries;
            
             protected override void OnStart()
             {
                 trixSeries = Indicators.Trix(MarketSeries.Close, 14);
             }
             protected override void OnTick()
             {
                 double trixValue = trixSeries.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WeightedClose">
            <summary>
            The WeightedClose indicator is an average of each day's price with extra weight given to the closing price.
            </summary>
            <remarks>Similar to the Median Price and Typical Price Indicators</remarks>
            <returns>WeightedClose indicator instance</returns>
            <example>
            <code>
            //...
            private WeightedClose weightedCloseSeries;
            //...
            protected override void OnStart()
            {
                weightedCloseSeries = Indicators.WeightedClose();
                //...
            }
            protected override void OnBar()
            {
                double weightedCloseValue = weightedCloseSeries.Result[index];
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinMoneyFlow(System.Int32)">
             <summary>
             The Chaikin Money Flow indicator measures the money flow volume over a specific period.
             </summary>
             <param name="periods">The period used for the calculation</param>
             <returns>Chaikin Money Flow indicator instance</returns>
             <example>
             <code>
             private ChaikinMoneyFlow _chaikinMoneyFlow;
            
             [Parameter("Period", DefaultValue = 21)]
             public int Period { get; set; }
            
             protected override void OnStart()
             {
                _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Period);
             }
             protected override void OnBar()
             {
                var index = MarketSeries.Open.Count - 1;
                double currentChaikinMF = _chaikinMoneyFlow.Result[index];
                double previousChaikinMF = _chaikinMoneyFlow.Result[index-1];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.EaseOfMovement(System.Int32,cAlgo.API.MovingAverageType)">
             <summary>
             The Ease Of Movement indicator relates the price change to the volume.
             </summary>
             <param name="periods">The period used for the calculation</param>
             <param name="maType">The moving average type used for the calculation</param>
             <returns> Ease Of Movement indicator instance</returns>
             <example>
             <code>
             private EaseOfMovement _easeOfMovement;
            
             [Parameter("Period", DefaultValue = 14)]
             public int Period { get; set; }
            
             [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
             public MovingAverageType MAType { get; set; }
            
            
             protected override void OnStart()
             {
                _easeOfMovement = Indicators.EaseOfMovement(Period, MAType);
             }
             protected override void OnBar()
             {
                // get EaseOfMovement value
                var index = MarketSeries.Open.Count - 1;
                double currentEaseOfMovement = _easeOfMovement.Result[index];
                double previousEaseOfMovement = _easeOfMovement.Result[index-1];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MoneyFlowIndex(System.Int32)">
             <summary>
             The Money Flow Index measures the strength of the money flow.
             </summary>
             <param name="periods">The period used for the calculation</param>
             <returns>Money Flow Index indicator instance</returns>
             <example>
             <code>
             private MoneyFlowIndex _moneyFlow;
            
             [Parameter("Period", DefaultValue = 21)]
             public int Period { get; set; }
            
             protected override void OnStart()
             {
                 _moneyFlow = Indicators.MoneyFlowIndex(Period);
             }
             protected override void OnBar()
             {
                 var currentValue = _moneyFlow.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.NegativeVolumeIndex(cAlgo.API.DataSeries)">
             <summary>
             The Negative Volume Index is a calculation of the percentage change in price on days when trading volume declines.
             </summary>
             <param name="source">The price source data used for the calculation.</param>
             <returns>Negative Volume Index indicator instance</returns>
             <example>
             <code>
             private NegativeVolumeIndex _negativeVolume;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             [Output("Main")]
             public IndicatorDataSeries Result { get; set; }
            
             protected override void Initialize()
             {
                _negativeVolume = Indicators.NegativeVolumeIndex(Source);
             }
             public override void Calculate(int index)
             {
                // Display Result of Indicator
                Result[index] = _negativeVolume.Result[index];
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.OnBalanceVolume(cAlgo.API.DataSeries)">
            <summary>
            The On Balance Volume indicator relates price and volume.
            </summary>
            <param name="source">The price source data used for the calculation.</param>
            <returns>On Balance Volume indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PositiveVolumeIndex(cAlgo.API.DataSeries)">
             <summary>
             The Positive Volume Index is a calculation of the percentage change in price on days when trading volume increased.
             </summary>
             <param name="source">The price source data used for the calculation.</param>
             <returns>Positive Volume Index indicator instance</returns>
             <example>
             <code>
             private PositiveVolumeIndex _positiveVolume;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             protected override void OnStart()
             {
                 _positiveVolume = Indicators.PositiveVolumeIndex(Source);
             }
             protected override void OnBar()
             {
                 var currentValue = _positiveVolume.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PriceVolumeTrend(cAlgo.API.DataSeries)">
             <summary>
             The Price Volume Trend indicator shows the relationship between price and volume.
             </summary>
             <param name="source">The price source data used for the calculation.</param>
             <returns>Price Volume Trend indicator instance</returns>
             <example>
             <code>
             private PriceVolumeTrend _priceVolumeTrend;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             protected override void OnStart()
             {
                 _priceVolumeTrend = Indicators.PriceVolumeTrend(Source);
             }
             protected override void OnBar()
             {
                 var currentValue = _priceVolumeTrend.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TradeVolumeIndex(cAlgo.API.DataSeries)">
             <summary>
             Trade Volume Index indicator measures the amount of money flowing in and out of an asset.
             </summary>
             <param name="source">The price source data used for the calculation.</param>
             <returns>Trade Volume Index indicator instance</returns>
             <example>
             <code>
             private TradeVolumeIndex _tradeVolume;
            
             [Parameter]
             public DataSeries Source { get; set; }
            
             protected override void OnStart()
             {
                 _tradeVolume = Indicators.TradeVolumeIndex(Source);
             }
             protected override void OnBar()
             {
                 var currentValue = _tradeVolume.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeOscillator(System.Int32,System.Int32)">
             <summary>
             The Volume Oscillator indicator is the difference between two moving averages.
             </summary>
             <param name="shortTerm">The fast moving average period</param>
             <param name="longTerm">The slow moving average period</param>
             <returns>Volume Oscillator indicator instance</returns>
             <example>
             <code>
             private VolumeOscillator _volumeOscillator;
            
             [Parameter("Short Term", DefaultValue = 9)]
             public int ShortTerm { get; set; }
            
             [Parameter("Long Term", DefaultValue = 21)]
             public int LongTerm { get; set; }
            
             protected override void OnStart()
             {
                 _volumeOscillator = Indicators.VolumeOscillator(ShortTerm, LongTerm);;
             }
             protected override void OnBar()
             {
                 var currentValue = _volumeOscillator.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeROC(System.Int32)">
             <summary>
             Volume Rate of Change Indicator measures the rate of change of the tick volume.
             </summary>
             <param name="periods">The period used for the calculation</param>
             <returns>
             The Volume ROC indicator instance.
             </returns>
             <example>
             <code>
             //...
             private VolumeROC _volumeROC;
             //...
             [Parameter("Period", DefaultValue = 21)]
             public int Period { get; set; }
            
             protected override void OnStart()
             {
                 _volumeROC = Indicators.VolumeROC(Period);
             }
             protected override void OnBar()
             {
                 var currentValue = _volumeROC.Result.LastValue;
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AverageTrueRange(System.Int32,cAlgo.API.MovingAverageType)">
             <summary>
             Average true range. An indicator providing the degree of price volatility.
             </summary>
             <remarks>
             Average true range (ATR) is a technical analysis volatility indicator originally developed by J. Welles Wilder. The indicator provides the degree of price volatility. The average true range is an N-day exponential moving average of the true range values. Wilder recommended a 14-period smoothing.
             </remarks>
             <param name="periods">Period of moving average to use for Average True Range caluclation.</param>
             <param name="maType">Type of moving average to use for Average True Range caluclation.</param>
             <returns>Average True Range indicator instance</returns>
             <example>
             <code>
             private AverageTrueRange atrIndicator;
            
             [Parameter(DefaultValue = 20)]
             public int Period { get; set; }
            
             [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
             public MovingAverageType MAType { get; set; }
            
             [Parameter(DefaultValue = 0.002)]
             public double ATRValue { get; set; }
            
             protected override void OnStart()
             {
                 atrIndicator = Indicators.AverageTrueRange(Period, MAType);
             }
            
             protected override void OnTick()
             {
                 //If atrIndicator last value is greater than the ATRValue input
                 if (atrIndicator.Result.LastValue > ATRValue)
                 {
                     // Do something
                 }
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DonchianChannel(System.Int32)">
            <summary>
            The Donchian channel is a volatility indicator forming a channel between the highest high and the lowest low of the chosen period.
            </summary>
            <remarks>
            The Donchian channel is mainly used for providing entry signals. A long is established when the price closes above the Donchian Channel. Conversely, if it closes below, then a short is established.
            </remarks>
            <param name="periods">Period of Calculation of the Dochian Channel</param>
            <returns>Donchian Channel indicator instance</returns>
            <example>
            <code>
            //...
            private DonchianChannel donchian;
            //...
            protected override void OnStart()
            {
                donchian = Indicators.DonchianChannel(Period);
            }
            protected override void OnBar()
            {
                Print("Top Value = {0}", donchian.Top.LastValue);
                Print("Middle Value = {0}", donchian.Middle.LastValue);
                Print("Bottom Value = {0}", donchian.Bottom.LastValue);
                //...
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.IchimokuKinkoHyo(System.Int32,System.Int32,System.Int32)">
             <summary>
             Ichimoku Kinko Hyo Indicator is a moving average based trend identification system.
             </summary>
             <remarks>
             Ichimoku Kinko Hyo Indicator contains more data points than standard candlestick charts and thus provides a clearer picture of potential price action.
             </remarks>
             <param name="tenkanSenPeriods">The period used for the Tenkan Sen</param>
             <param name="kijunSenPeriods">The period used for the Kijun Sen</param>
             <param name="senkouSpanBPeriods">The period used for the Senkou Span B</param>
             <returns>Ichimoku Kinko Hyo Indicator instance</returns>
             <example>
             <code>
             //...
             private IchimokuKinkoHyo ichimokuKinkoHyo;
             //...
             protected override void OnStart()
             {
                 ichimokuKinkoHyo = Indicators.IchimokuKinkoHyo
                     (tenkanSenPeriods, kijunSenPeriods, senkouSpanBPeriods);
             }
             protected override void OnBar()
             {
                 Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
                 Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
                 Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
                 Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
                 Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);
            
                 //...
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AwesomeOscillator">
            <summary>
            Initializes the AwesomeOscillator indicator instance
            </summary>
            <returns>AwesomeOscillator indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AcceleratorOscillator">
            <summary>
            Initializes the AcceleratorOscillator indicator instance
            </summary>
            <returns>AcceleratorOscillator indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.KeltnerChannels(System.Int32,cAlgo.API.MovingAverageType,System.Int32,cAlgo.API.MovingAverageType,System.Double)">
            <summary>
            Initializes the Keltner Channels indicator instance
            </summary>
            <param name="maPeriod">Moving Average Period</param>
            <param name="maType">Moving Average Type</param>
            <param name="atrPeriod">Average True Range Period</param>
            <param name="atrMaType">Average True Range MAType</param>
            <param name="bandDistance">ATR Multiplier</param>
            <returns>KeltnerChannels</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AverageDirectionalMovementIndexRating(System.Int32)">
            <summary>
            
            </summary>
            <param name="periods"></param>
            <returns>AverageDirectionalMovementIndexRating</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Alligator(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="jawsPeriods"></param>
            <param name="jawsShift"></param>
            <param name="teethPeriods"></param>
            <param name="teethShift"></param>
            <param name="lipsPeriods"></param>
            <param name="lipsShift"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CenterOfGravity(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CyberCycle(System.Double)">
            <summary>Polynomial Regression Channels
            
            </summary>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Fractals(System.Int32)">
            <summary>
            
            </summary>
            <param name="periods"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PolynomialRegressionChannels(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="degree"></param>
            <param name="periods"></param>
            <param name="standardDeviation"></param>
            <param name="standardDeviation2"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Supertrend(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="periods"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.GetIndicator``1(cAlgo.API.Internals.MarketSeries,System.Object[])">
            <summary>
            Initializes the custom indicator for a specific timeframe
            </summary>
            <typeparam name="TIndicator">The custom indicator name</typeparam>
            <param name="marketSeries">MarketSeries</param>
            <param name="parameterValues">The custom indicator parameters</param>
            <returns>Custom indicator instance</returns>
            <example>
            <code>
            private AdaptiveCG adaptiveCG;
            private MarketSeries seriesMin5;
            
            protected override void Initialize()
            {
                seriesMin5 = MarketData.GetSeries(TimeFrame.Minute5);
                adaptiveCG = Indicators.GetIndicator&#60;AdaptiveCG>(seriesMin5, Alpha);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HighMinusLow(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the High Minus Low indicator for a specific timeframe
            </summary>
            <remarks>
            The High Minus Low indicator is used to compute the range of daily bars
            </remarks>
            <returns>High Minus Low indicator instance</returns>
            <example>
            <code> 
            private MarketSeries seriesMin5;
            private HighMinusLow highMinusLow;
            
            protected override void Initialize()
            {
                seriesMin5 = MarketData.GetSeries(TimeFrame.Minute5);
                highMinusLow = Indicators.HighMinusLow(seriesMin5);
            }
            public override void Calculate(int index)
            {
                //...
                Print("Min 5 HighMinusLow is: {0}", highMinusLow.Result[indexMin5]);
            }        
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TrueRange(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the True Range indicator for a specific timeframe
            </summary>
            <remarks>
            The True Range indicator is the daily range plus any gap from the closing price of the previous day
            </remarks>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>True Range indicator instance</returns>
            <example>
            <code> 
            protected override void Initialize()
            {
                seriesMin10 = MarketData.GetSeries(TimeFrame.Minute10); 
                trueRange = Indicators.TrueRange(seriesMin10);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.SwingIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Returns the Swing Index indicator instance.
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="limitMoveValue">The value of the limit move used for calculation.</param>
            <returns>Swing Index indicator instance</returns>
            <example>
            <code> 
            protected override void Initialize()
            {
               seriesMin10 = MarketData.GetSeries(TimeFrame.Minute10);
               swingIndex = Indicators.SwingIndex(seriesMin10, limitMove);
            }
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AccumulativeSwingIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the Accumulative Swing Index indicator for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="limitMoveValue">The Limit Move used in the calculation</param>
            <returns>AccumulativeSwingIndex indicator instance</returns>
            <example>
            <code>
            protected override void Initialize()
            {
               dailySeries = MarketData.GetSeries(TimeFrame.Daily);
               accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(dailySeries, limitMove);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Aroon(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the Aroon indicator instance
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The periods used in the calculation</param>
            <returns>Aroon indiator instance</returns>
            <example>
            <code> 
            [Parameter("Period")]
            public int Period { get; set; }
            
            private Aroon aroonDaily;
            private MarketSeries dailySeries;
            
            protected override void OnStart()
            {
                dailySeries = MarketData.GetSeries(TimeFrame.Daily);
                aroonDaily = Indicators.Aroon(dailySeries, Period);
            }
            protected override void OnTick()
            {
                if (aroonDaily.Up.LastValue &#60; aroonDaily.Down.LastValue)
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.UltimateOscillator(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the UltimateOscillator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="cycle1">the short periods used in calculation</param>
            <param name="cycle2">the medium periods used in calculation</param>
            <param name="cycle3">the long periods used in calculation</param>
            <returns>UltimateOscillator indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DirectionalMovementSystem(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the Directional Movement System Indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The periods used in calculation</param>
            <returns>Directional Movement System Indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ParabolicSAR(cAlgo.API.Internals.MarketSeries,System.Double,System.Double)">
            <summary>
            Initializes the ParabolicSAR Indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="minAf">The minimum accumulation factor</param>
            <param name="maxAf">The maximum accumulation factor</param>
            <returns>ParabolicSAR Indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.StochasticOscillator(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Initializes the StochasticOscillator Indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="kPeriods">The value of the k periods used for calculation.</param>
            <param name="kSlowing">The value of the k slowing used for calculation.</param>
            <param name="dPeriods">The value of the d periods used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>Stochastic Oscillator indicator instance.</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MedianPrice(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the Median indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>Median indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsAccumulationDistribution(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the WilliamsAccumulationDistribution indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>WilliamsAccumulationDistribution indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.FractalChaosBands(System.Int32)">
            <summary>
            The Fractal Chaos Bands indicator breaks down large trends into predictable patterns.
            </summary>
            <param name="periods">The period used for calculation.</param>
            <returns>Fractal Chaos Bands indicator instance</returns>
            <example>
            <code>
            private FractalChaosBands fractalChaosBands;
            
            [Parameter("Period", DefaultValue = 14)]
            public int Period { get; set; }
            
            protected override void Initialize()
            {        
                fractalChaosBands = Indicators.FractalChaosBands(Period);
            }
            public override void Calculate(int index)
            {            
                Print("Fractal Chaos Bands High = {0}", fractalChaosBands.High[index]); 
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.FractalChaosBands(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the FractalChaosBands indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used for calculation</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.FractalChaosBands(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the FractalChaosBands indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TypicalPrice(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the TypicalPrice indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>TypicalPrice indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CommodityChannelIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the CommodityChannelIndex indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The periods used in calculation</param>
            <returns>CommodityChannelIndex indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MassIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the MassIndex indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The periods used in calculation</param>
            <returns>MassIndex indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinVolatility(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Initializes the ChaikinVolatility indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The value of the periods used for calculation.</param>
            <param name="rateOfChange">The value of the rage of change used for calculation.</param>
            <param name="maType">Type of the Moving Average.</param>
            <returns>Chaikin Volatiliy indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsPctR(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the WilliamsPctR indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used in calculation</param>
            <returns>WilliamsPctR indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WeightedClose(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the WeightedClose indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <returns>WeightedClose indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinMoneyFlow(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the ChaikinMoneyFlow indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used in the calculation</param>
            <returns>ChaikinMoneyFlow indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.EaseOfMovement(cAlgo.API.Internals.MarketSeries,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Initializes the EaseOfMovement indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used for the calculation</param>
            <param name="maType">The moving average type used for the calculation</param>
            <returns>EaseOfMovement indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MoneyFlowIndex(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the MoneyFlowIndex instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used for the calculation</param>
            <returns>MoneyFlowIndex instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeOscillator(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32)">
            <summary>
            Initializes the VolumeOscillator instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="shortTerm">The fast moving average period</param>
            <param name="longTerm">The slow moving average period</param>
            <returns>VolumeOscillator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeROC(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the VolumeROC instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">The period used for the calculation</param>
            <returns>VolumeROC instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AverageTrueRange(cAlgo.API.Internals.MarketSeries,System.Int32,cAlgo.API.MovingAverageType)">
            <summary>
            Initializes the AverageTrueRange instance for a specific timeframe
            </summary>
            <param name="marketSeries">The MarketSeries of the Timeframe to be applied</param>
            <param name="periods">Period of moving average to use for Average True Range caluclation.</param>
            <param name="maType">Type of moving average to use for Average True Range caluclation.</param>
            <returns>Average True Range indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DonchianChannel(cAlgo.API.Internals.MarketSeries,System.Int32)">
            <summary>
            Initializes the DonchianChannel instance for a specific timeframe
            </summary>
            <param name="marketSeries">MarketSeries of the Timeframe to be applied</param>
            <param name="periods">Period used in the calculation</param>
            <returns>DonchianChannel instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.IchimokuKinkoHyo(cAlgo.API.Internals.MarketSeries,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the IchimokuKinkoHyo indicator instance for a specific timeframe
            </summary>
            <param name="marketSeries">MarketSeries of the Timeframe to be applied</param>
            <param name="tenkanSenPeriods">The period used for the Tenkan Sen</param>
            <param name="kijunSenPeriods">The period used for the Kijun Sen</param>
            <param name="senkouSpanBPeriods">The period used for the Senkou Span B</param>
            <returns>Ichimoku Kinko Hyo Indicator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AwesomeOscillator(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the AwesomeOscillator instance for specific timeframe
            </summary>
            <param name="marketSeries">MarketSeries of the Timeframe to be applied</param>
            <returns>AwesomeOscillator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AcceleratorOscillator(cAlgo.API.Internals.MarketSeries)">
            <summary>
            Initializes the AcceleratorOscillator instance for specific timeframe
            </summary>
            <param name="marketSeries">MarketSeries of the Timeframe to be applied</param>
            <returns>AcceleratorOscillator instance</returns>
        </member>
        <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.KeltnerChannels(cAlgo.API.Internals.MarketSeries,System.Int32,cAlgo.API.MovingAverageType,System.Int32,cAlgo.API.MovingAverageType,System.Double)">
            <summary>
            Initializes the Keltner Channels indicator instance for specific MarketSeries
            </summary>
            <param name="marketSeries">Specific MarketSeries to be applied</param>
            <param name="maPeriod">Moving Average Period</param>
            <param name="maType">Moving Average Type</param>
            <param name="atrPeriod">Average True Range Period</param>
            <param name="atrMaType">Average True Range MAType</param>
            <param name="bandDistance">ATR Multiplier</param>
            <returns>KeltnerChannels</returns>
        </member>
        <member name="T:cAlgo.API.Internals.INotifications">
             <summary>
             It is an interface that represents all Notifications.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use API notifications to play sound or send an email
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class NotificationsSample : Indicator
                 {
                     private int _lastNotifiedBarIndex;
            
                     [Parameter("Sound File Path", DefaultValue = "C:\\Windows\\Media\\notify.wav")]
                     public string SoundFilePath { get; set; }
            
                     [Parameter("Sender Email")]
                     public string SenderEmail { get; set; }
            
                     [Parameter("Receiver Email")]
                     public string ReceiverEmail { get; set; }
            
                     protected override void Initialize()
                     {
                     }
            
                     public override void Calculate(int index)
                     {
                         if (!IsLastBar || _lastNotifiedBarIndex == index) return;
            
                         _lastNotifiedBarIndex = index;
            
                         if (Bars.Last(1).Close > Bars.Last(1).Open)
                         {
                             Notify("Up Bar Closed");
                         }
                         else if (Bars.Last(1).Close &lt; Bars.Last(1).Open)
                         {
                             Notify("Down Bar Closed");
                         }
                     }
            
                     private void Notify(string message)
                     {
                         if (!string.IsNullOrWhiteSpace(SoundFilePath))
                         {
                             Notifications.PlaySound(SoundFilePath);
                         }
            
                         if (!string.IsNullOrWhiteSpace(SenderEmail) &amp;&amp; !string.IsNullOrWhiteSpace(ReceiverEmail))
                         {
                             Notifications.SendEmail(SenderEmail, ReceiverEmail, "Notification", message);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.INotifications.PlaySound(System.String)">
            <summary>
            Plays a notification sound.
            </summary>
            <remarks>
            This method doesn't work during backtesting and optimization.
            In indicators, use it with IsRealTime/IsLastBar, for real-time values.
            </remarks>
            <example>
            <code>
            Notifications.PlaySound(@&quot;C:\SampleDestination\SampleSound.mp3&quot;);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.INotifications.SendEmail(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a notification email message.
            </summary>
            <remarks>
            This method doesn't work during backtesting and optimization.
            Use correct settings before trying to send an email notification.
            You can do that in Preferences -&gt; Email Settings
            </remarks>
            <param name="from">Sender's Address</param>
            <param name="to">Recipient's Address</param>
            <param name="subject">Email Subject</param>
            <param name="text">Email Body</param>
            <example>
            <code>
            Notifications.SendEmail(&quot;from@email.com&quot;, &quot;to@email.com&quot;,
                        &quot;Email Notification Subject&quot;, &quot;Email body&quot;);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.IServer">
             <summary>
             Server related information.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use Server object to get data related to server and connection
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class ServerSample : Indicator
                 {
                     private TextBlock _isConnectedTextBlock;
            
                     protected override void Initialize()
                     {
                         var grid = new Grid(4, 2)
                         {
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                         };
            
                         var style = new Style();
            
                         style.Set(ControlProperty.Padding, 5);
                         style.Set(ControlProperty.Margin, 5);
                         style.Set(ControlProperty.FontWeight, FontWeight.ExtraBold);
                         style.Set(ControlProperty.BackgroundColor, Color.Black);
            
                         grid.AddChild(new TextBlock { Text = "Server Info", Style = style, HorizontalAlignment = HorizontalAlignment.Center }, 0, 0, 1, 2);
            
                         grid.AddChild(new TextBlock { Text = "Time", Style = style }, 1, 0);
                         grid.AddChild(new TextBlock { Text = Server.Time.ToString("o"), Style = style }, 1, 1);
            
                         grid.AddChild(new TextBlock { Text = "Time (UTC)", Style = style }, 2, 0);
                         grid.AddChild(new TextBlock { Text = Server.TimeInUtc.ToString("o"), Style = style }, 2, 1);
            
                         grid.AddChild(new TextBlock { Text = "Is Connected", Style = style }, 3, 0);
            
                         _isConnectedTextBlock = new TextBlock
                         {
                             Text = Server.IsConnected ? "Yes" : "No",
                             Style = style,
                         };
            
                         Server.Connected += () => _isConnectedTextBlock.Text = "Yes";
                         Server.Disconnected += () => _isConnectedTextBlock.Text = "No";
            
                         grid.AddChild(_isConnectedTextBlock, 3, 1);
            
                         Chart.AddControl(grid);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Internals.IServer.Time">
            <summary>
            Returns the server time.
            </summary>
            <example>
            <code>
            protected override void OnTick()
            {
                Print("The Server Time is: {0}", Server.Time);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IServer.TimeInUtc">
            <summary>
            Returns the server time in UTC.
            </summary>
            <example>
            <code>
            protected override void OnTick()
            {
                Print("The Server Time in UTC is: {0}", Server.TimeInUtc);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.IServer.IsConnected">
            <summary>
            Indicates current connection status with the server
            </summary>
        </member>
        <member name="E:cAlgo.API.Internals.IServer.Connected">
            <summary>
            Event raised when successfully connected with the server
            </summary>
        </member>
        <member name="E:cAlgo.API.Internals.IServer.Disconnected">
            <summary>
            Disconnected - Event raised when connection with the server is lost
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.LeverageTier">
            <summary>
            Tier of dynamic leverage.
            </summary>
            <example>
            <code>
            var firstTier = Symbol.DynamicLeverage[0];
            Print("Leverage for volume up to {0} is {1}, firstTier.Volume, firstTier.Leverage);
            </code>
            </example>
            <seealso cref="T:cAlgo.API.Internals.Symbol"/>
        </member>
        <member name="P:cAlgo.API.Internals.LeverageTier.Volume">
            <summary>
            Volume of dynamic leverage tier.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.LeverageTier.Leverage">
            <summary>
            Leverage of dynamic leverage tier.
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.MarketData">
             <summary>
            Provide access to charts data (bars and ticks) and to the Depth of Market data.
             </summary>
             <example>
             <code>
              MarketDepth md = MarketData.GetMarketDepth(Symbol);
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Internals;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to get a symbol and time frame market data
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MarketDataSample : Indicator
                 {
                     private Bars _bars;
            
                     private Ticks _ticks;
            
                     private MarketDepth _marketDepth;
            
                     [Parameter("Use Current Symbol", DefaultValue = true)]
                     public bool UseCurrentSymbol { get; set; }
            
                     [Parameter("Other Symbol Name", DefaultValue = "GBPUSD")]
                     public string OtherSymbolName { get; set; }
            
                     [Parameter("Use Current TimeFrame", DefaultValue = true)]
                     public bool UseCurrentTimeFrame { get; set; }
            
                     [Parameter("Other TimeFrame", DefaultValue = "Daily")]
                     public TimeFrame OtherTimeFrame { get; set; }
            
                     protected override void Initialize()
                     {
                         var symbol = UseCurrentSymbol ? Symbol : Symbols.GetSymbol(OtherSymbolName);
                         var timeframe = UseCurrentTimeFrame ? TimeFrame : OtherTimeFrame;
            
                         // You can use GetBarsAsync instead of GetBars
                         _bars = MarketData.GetBars(timeframe, symbol.Name);
                         // You can use GetTicksAsync instead of GetTicks
                         _ticks = MarketData.GetTicks(symbol.Name);
            
                         _marketDepth = MarketData.GetMarketDepth(symbol.Name);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetBars(cAlgo.API.TimeFrame)">
            <summary>
            Gets the bars for the specific timeframe.
            </summary>
            <param name="timeFrame"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetBars(cAlgo.API.TimeFrame,System.String)">
            <summary>
            Gets the chart bars for the specific timeframe for the specific symbol.
            </summary>
            <param name="timeFrame"></param>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetBarsAsync(cAlgo.API.TimeFrame,System.Action{cAlgo.API.Bars})">
            <summary>
            The asynchronous method to get the bars for the specific timeframe for the specific symbol.
            </summary>
            <param name="timeFrame"></param>
            <param name="callback"></param>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetBarsAsync(cAlgo.API.TimeFrame,System.String,System.Action{cAlgo.API.Bars})">
            <summary>
            The asynchronous method to get the specific bars for the specific timeframe for the specific symbol.
            </summary>
            <param name="timeFrame"></param>
            <param name="symbolName"></param>
            <param name="callback"></param>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetTicks">
            <summary>
            Gets the Tick data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetTicks(System.String)">
            <summary>
            Gets the Tick data for the specific symbol.
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetTicksAsync(System.Action{cAlgo.API.Ticks})">
            <summary>
            The asynchronous method to get tick data.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetTicksAsync(System.String,System.Action{cAlgo.API.Ticks})">
            <summary>
            The asynchronous method to get tick data for the specific symbol.
            </summary>
            <param name="symbolName"></param>
            <param name="callback"></param>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetMarketDepth(System.String)">
            <summary>
            Gets the Depth of Market for the specific symbol.
            </summary>
            <param name="symbolName">The symbol name e.g. "EURUSD"</param>
            <returns>Depth of Market</returns>
            <example>
            <code>
            MarketDepth md = MarketData.GetMarketDepth("EURUSD");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetMarketDepth(cAlgo.API.Internals.Symbol)">
            <summary>
            Get the depth of market price and volume of the current symbol
            </summary>
            <param name="symbol">The currency pair</param>
            <returns>Depth of Market</returns>
            <example>
            <code>
             MarketDepth md = MarketData.GetMarketDepth(Symbol);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetSeries(cAlgo.API.TimeFrame)">
            <summary>
            Get the MarketSeries of a specific timeframe and the current symbol
            </summary>
            <param name="timeFrame">The timeframe of the MarketSeries data</param>
            <example>
            <code>
            var marketSeriesMin30 = MarketData.GetSeries(TimeFrame.Minute30);
            var smaMin30 = Indicators.SimpleMovingAverage(marketSeriesMin30.Close, 14);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetSeries(System.String,cAlgo.API.TimeFrame)">
            <summary>
            Get the MarketSeries of market data for the symbol and timeframe
            </summary>
            <param name="symbolName">the symbol name string of the market data</param>
            <param name="timeFrame">the Timeframe of the market data</param>
            <returns>MarketSeries of specific Symbol and Timeframe</returns>
            <example>
            <code>
            var daily = MarketData.GetSeries("EURUSD", TimeFrame.Daily);
            var sma = Indicators.SimpleMovingAverage(daily.Close, 14);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetSeries(cAlgo.API.Internals.Symbol,cAlgo.API.TimeFrame)">
            <summary>
            Get the MataSeries of market data for the symbol and timeframe
            </summary>
            <param name="symbol">the Symbol of the market data</param>
            <param name="timeFrame">the Timeframe of the market data</param>
            <returns>MarketSeries of specific Symbol and Timeframe</returns>
            <example>
            <code>
            Symbol USDCAD = GetSymbol("USDCAD");
            var daily = MarketData.GetSeries(USDCAD, TimeFrame.Daily);
            var sma = Indicators.SimpleMovingAverage(daily.Close, 14);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.MarketData.GetSymbol(System.String)">
            <summary>
            Get the Symbol given the symbol's string name representation
            </summary>
            <param name="symbolCode"></param>
            <returns>Symbol</returns>
            <example>
            <code>
            Symbol USDCAD = MarketData.GetSymbol("USDCAD");
            var usdCadAsk = USDCAD.Ask;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Internals.MarketHours">
            <summary>
            Access to symbol's trading sessions schedule
            </summary>
            <seealso cref="T:cAlgo.API.Internals.MarketHours"/>
        </member>
        <member name="P:cAlgo.API.Internals.MarketHours.Sessions">
            <summary>
            List of all symbol's trading sessions
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.MarketHours.IsOpened">
            <summary>
            Indicates if trading session is active
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.MarketHours.IsOpened(System.DateTime)">
            <summary>
            Indicates if trading session is active
            </summary>
            <param name="datetime">Date and time to check</param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.MarketHours.TimeTillClose">
            <summary>
            Time left till end of current trading session. Returns 0 if session is not active
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.MarketHours.TimeTillOpen">
            <summary>
            Time left till start of new trading session. Returns 0 if session is already active
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.MarketSeries">
            <summary>
                Provides access to the market data such as the DataSeries Open, High, Low, Close.
            </summary>
            <remarks>
                Access to the Open, High, Low, Close, Median, Typical, Weighted price series
                as well as OpenTime for the current symbol and time frame.
            </remarks>
            <example>
                <code>
            //Accessing historical OHLC prices from Indicators 
            double close = MarketSeries.Close[index];
            double high = MarketSeries.High[index];
            double low = MarketSeries.Low[index];
            double open = MarketSeries.Open[index];
            </code>
            </example>
            <example>
                <code>
            //Accessing historical O-H-L-C prices from Robots
            int index = MarketSeries.Close.Count-1;
            double close = MarketSeries.Close[index];
            double high = MarketSeries.High[index];
            double low = MarketSeries.Low[index];
            double open = MarketSeries.Open[index];
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Open">
            <summary>
                Open price series of historical trendbars.
            </summary>
            <example>
                <code>
            
            [Parameter(DefaultValue = 14)]
            public int period { get; set; }
            
            private SimpleMovingAverage smaopen
            
            protected override void Initialize()
            {
                //Simple moving average of the Open price series for the specified period
                smaopen = Indicators.SimpleMovingAverage(MarketSeries.Open, period);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.High">
            <summary>
                Highest price series of historical trendbars.
            </summary>
            <example>
                <code>
            
            [Parameter(DefaultValue = 14)]
            public int period { get; set; }
            
            private SimpleMovingAverage smahigh
            
            protected override void Initialize()
            {
                //Simple moving average of the High price series for the specified period
                smahigh = Indicators.SimpleMovingAverage(MarketSeries.High,period);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Low">
            <summary>
                Low price series of historical trendbars.
            </summary>
            <example>
                <code>
            
            [Parameter(DefaultValue = 14)]
            public int period { get; set; }
            
            private SimpleMovingAverage smaLow
            
            protected override void Initialize()
            {
                //Simple moving average of the Low price series for the specified period
                smaLow = Indicators.SimpleMovingAverage(MarketSeries.Low, period);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Close">
            <summary>
                Close price series of historical trendbars.
            </summary>
            <example>
                <code>
             
            [Parameter(DefaultValue = 14)]
            public int Period { get; set; }
            
            private SimpleMovingAverage smaClose
            
            protected override void Initialize()
            {
                //Simple moving average of the Close prices series for the specified period
                smaClose = Indicators.SimpleMovingAverage(MarketSeries.Close, Period);
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.TickVolume">
            <summary>
                Volume of Ticks for Historical Trendbars
            </summary>
            <example>
                <code>
            
            public override void Calculate(int index)
            {
                double currentVolume = MarketSeries.TickVolume[index];
                double previousVolume = MarketSeries.TickVolume[index-1];
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Median">
            <summary>
                Median price series of historical trendbars.
            </summary>
            <example>
                <code>
            
            protected override void OnBar()
            {
                int currentIndex = MarketSeries.Median.Count - 1;
                var currentTypical = MarketSeries.Median[currentIndex];     //The current Median price
                var previousTypical = MarketSeries.Median[currentIndex - 1]; //The previous Median price
                if (currentTypical &#60; previousTypical)
                {
                    // Do something
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Typical">
            <summary>
                Typical price series of historical trendbars.
            </summary>
            <example>
                <code>
            
            public override void Calculate(int index)
            {
                if (IsRealTime)
                {
                    var currentTypical = MarketSeries.Typical[index];
                    var previousTypical = MarketSeries.Typical[index - 1];
                    if (currentTypical &#60; previousTypical)
                    {
                        Print("Current typical price is less than the previous one");
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.Weighted">
            <summary>
                Weighted price series of historical trendbars.
            </summary>
            <example>
                <code>
            protected override void OnBar()
            {
                int currentIndex = MarketSeries.Weighted.Count - 1;
                var currentWeighted = MarketSeries.Weighted[currentIndex];     //The current Weighted price
                var previousWeighted = MarketSeries.Weighted[currentIndex - 1]; //The previous Weighted price
                if (currentWeighted &#60;= previousWeighted)
                {
                    // Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.WeightedClose">
            <summary>
                Weighted price series of historical trendbars.
            </summary>
            <example>
                <code>
            protected override void OnBar()
            {
                int currentIndex = MarketSeries.Weighted.Count - 1;
                var currentWeighted = MarketSeries.Weighted[currentIndex];     //The current Weighted price
                var previousWeighted = MarketSeries.Weighted[currentIndex - 1]; //The previous Weighted price
                if (currentWeighted &#60;= previousWeighted)
                {
                    // Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.OpenTime">
            <summary>
                Open Time series of historical trendbars.
            </summary>
            <example>
                <code>
            
            //Accessing historical Open Times
            Print("{0}", MarketSeries.OpenTime[index]);     
            Print("{0}", MarketSeries.OpenTime[index].Day); 
            Print("{0}", MarketSeries.OpenTime[index].Hour);
            
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.TimeFrame">
            <summary>
                The timeframe that the MarketSeries is subscribed to
            </summary>
            <example>
                <code>
            Print("{0}", MarketSeries.TimeFrame);   
            </code>
            </example>
            <example>
                <code>
            Symbol eurUsd = MarketData.GetSymbol("EURUSD");
            MarketSeries seriesEurUsd = MarketData.GetSeries(eurUsd, TimeFrame.Daily);
            
            Print(seriesEurUsd.TimeFrame);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.SymbolCode">
            <summary>
                The code representation of the symbol that the MarketSeries is subscribed to
            </summary>
            <example>
                <code>
            Print("{0}", MarketSeries.SymbolCode);   
            </code>
            </example>
            <example>
                <code>
            Symbol eurUsd = MarketData.GetSymbol("EURUSD");
            MarketSeries seriesEurUsd = MarketData.GetSeries(eurUsd, TimeFrame.Daily);
            Print(seriesEurUsd.SymbolCode);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.MarketSeries.SymbolName">
            <summary>
            Gets the symbol name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Internals.Symbol">
             <summary>
             Represents a currency pair.
             </summary>
             <example>
                 <code>
            
              double bid = Symbol.Bid;
             	double ask = Symbol.Ask;
             	string code = Symbol.Code;
             	int digits = Symbol.Digits;
             	double pipSize = Symbol.PipSize;
             	double pointSize = Symbol.PointSize;
             	double spread = Symbol.Spread;
            
              </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Internals;
             using System;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to get a symbol data
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class SymbolSample : Indicator
                 {
                     private TextBlock _spreadTextBlock;
                     private TextBlock _bidTextBlock;
                     private TextBlock _askTextBlock;
                     private TextBlock _unrealizedGrossProfitTextBlock;
                     private TextBlock _unrealizedNetProfitTextBlock;
                     private TextBlock _timeTillOpenTextBlock;
                     private TextBlock _timeTillCloseTextBlock;
                     private TextBlock _isOpenedTextBlock;
                     private Symbol _symbol;
            
                     [Parameter("Use Current Symbol", DefaultValue = true)]
                     public bool UseCurrentSymbol { get; set; }
            
                     [Parameter("Other Symbol Name", DefaultValue = "GBPUSD")]
                     public string OtherSymbolName { get; set; }
            
                     protected override void Initialize()
                     {
                         var grid = new Grid(24, 2)
                         {
                             BackgroundColor = Color.Gold,
                             Opacity = 0.6,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                         };
            
                         var style = new Style();
            
                         style.Set(ControlProperty.Padding, 1);
                         style.Set(ControlProperty.Margin, 2);
                         style.Set(ControlProperty.BackgroundColor, Color.Black);
                         style.Set(ControlProperty.FontSize, 8);
            
                         _symbol = UseCurrentSymbol ? Symbol : Symbols.GetSymbol(OtherSymbolName);
            
                         grid.AddChild(new TextBlock { Text = "Symbol Info", Style = style, HorizontalAlignment = HorizontalAlignment.Center }, 0, 0, 1, 2);
            
                         grid.AddChild(new TextBlock { Text = "Name", Style = style }, 1, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.Name, Style = style }, 1, 1);
            
                         grid.AddChild(new TextBlock { Text = "ID", Style = style }, 2, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.Id.ToString(), Style = style }, 2, 1);
            
                         grid.AddChild(new TextBlock { Text = "Digits", Style = style }, 3, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.Digits.ToString(), Style = style }, 3, 1);
            
                         grid.AddChild(new TextBlock { Text = "Description", Style = style }, 4, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.Description, Style = style }, 4, 1);
            
                         grid.AddChild(new TextBlock { Text = "Lot Size", Style = style }, 5, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.LotSize.ToString(), Style = style }, 5, 1);
            
                         grid.AddChild(new TextBlock { Text = "Pip Size", Style = style }, 6, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.PipSize.ToString(), Style = style }, 6, 1);
            
                         grid.AddChild(new TextBlock { Text = "Pip Value", Style = style }, 7, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.PipValue.ToString(), Style = style }, 7, 1);
            
                         grid.AddChild(new TextBlock { Text = "Tick Size", Style = style }, 8, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.TickSize.ToString(), Style = style }, 8, 1);
            
                         grid.AddChild(new TextBlock { Text = "Tick Value", Style = style }, 9, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.TickValue.ToString(), Style = style }, 9, 1);
            
                         grid.AddChild(new TextBlock { Text = "Volume In Units Max", Style = style }, 10, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.VolumeInUnitsMax.ToString(), Style = style }, 10, 1);
            
                         grid.AddChild(new TextBlock { Text = "Volume In Units Min", Style = style }, 11, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.VolumeInUnitsMin.ToString(), Style = style }, 11, 1);
            
                         grid.AddChild(new TextBlock { Text = "Volume In Units Step", Style = style }, 12, 0);
                         grid.AddChild(new TextBlock { Text = _symbol.VolumeInUnitsStep.ToString(), Style = style }, 12, 1);
            
                         grid.AddChild(new TextBlock { Text = "Ask", Style = style }, 13, 0);
            
                         _askTextBlock = new TextBlock { Text = _symbol.Ask.ToString(), Style = style };
            
                         grid.AddChild(_askTextBlock, 13, 1);
            
                         grid.AddChild(new TextBlock { Text = "Bid", Style = style }, 14, 0);
            
                         _bidTextBlock = new TextBlock { Text = _symbol.Bid.ToString(), Style = style };
            
                         grid.AddChild(_bidTextBlock, 14, 1);
            
                         grid.AddChild(new TextBlock { Text = "Spread", Style = style }, 15, 0);
            
                         _spreadTextBlock = new TextBlock { Text = _symbol.Spread.ToString(), Style = style };
            
                         grid.AddChild(_spreadTextBlock, 15, 1);
            
                         grid.AddChild(new TextBlock { Text = "Unrealized Gross Profit", Style = style }, 16, 0);
            
                         _unrealizedGrossProfitTextBlock = new TextBlock { Text = _symbol.UnrealizedGrossProfit.ToString(), Style = style };
            
                         grid.AddChild(_unrealizedGrossProfitTextBlock, 16, 1);
            
                         grid.AddChild(new TextBlock { Text = "Unrealized Net Profit", Style = style }, 17, 0);
            
                         _unrealizedNetProfitTextBlock = new TextBlock { Text = _symbol.UnrealizedNetProfit.ToString(), Style = style };
            
                         grid.AddChild(_unrealizedNetProfitTextBlock, 17, 1);
            
                         grid.AddChild(new TextBlock { Text = "Time Till Open", Style = style }, 18, 0);
            
                         _timeTillOpenTextBlock = new TextBlock { Text = _symbol.MarketHours.TimeTillOpen().ToString(), Style = style };
            
                         grid.AddChild(_timeTillOpenTextBlock, 18, 1);
            
                         grid.AddChild(new TextBlock { Text = "Time Till Close", Style = style }, 19, 0);
            
                         _timeTillCloseTextBlock = new TextBlock { Text = _symbol.MarketHours.TimeTillClose().ToString(), Style = style };
            
                         grid.AddChild(_timeTillCloseTextBlock, 19, 1);
            
                         grid.AddChild(new TextBlock { Text = "Is Opened", Style = style }, 20, 0);
            
                         _isOpenedTextBlock = new TextBlock { Text = _symbol.MarketHours.IsOpened().ToString(), Style = style };
            
                         grid.AddChild(_isOpenedTextBlock, 20, 1);
            
                         grid.AddChild(new TextBlock { Text = "Trading Sessions #", Style = style }, 21, 0);
            
                         grid.AddChild(new TextBlock { Text = _symbol.MarketHours.Sessions.Count.ToString(), Style = style }, 21, 1);
            
                         grid.AddChild(new TextBlock { Text = "Trading Session Week Days", Style = style }, 22, 0);
            
                         var weekDays = string.Empty;
            
                         for (var iSession = 0; iSession &lt; _symbol.MarketHours.Sessions.Count; iSession++)
                         {
                             var currentSessionWeekDays = string.Format("{0}({1})-{2}({3})", _symbol.MarketHours.Sessions[iSession].StartDay, _symbol.MarketHours.Sessions[iSession].StartTime, _symbol.MarketHours.Sessions[iSession].EndDay, _symbol.MarketHours.Sessions[iSession].EndTime);
            
                             weekDays = iSession == 0 ? currentSessionWeekDays : string.Format("{0}, {1}", weekDays, currentSessionWeekDays);
                         }
            
                         grid.AddChild(new TextBlock { Text = weekDays, Style = style }, 22, 1);
            
                         grid.AddChild(new TextBlock { Text = "Leverage Tier", Style = style }, 23, 0);
            
                         var leverageTiers = string.Empty;
            
                         for (var iLeveragTier = 0; iLeveragTier &lt; _symbol.DynamicLeverage.Count; iLeveragTier++)
                         {
                             var currentLeverageTiers = string.Format("Volume up to {0} is {1}", _symbol.DynamicLeverage[iLeveragTier].Volume, _symbol.DynamicLeverage[iLeveragTier].Leverage);
            
                             leverageTiers = iLeveragTier == 0 ? currentLeverageTiers : string.Format("{0}, {1}", leverageTiers, currentLeverageTiers);
                         }
            
                         grid.AddChild(new TextBlock { Text = leverageTiers, Style = style }, 23, 1);
            
                         Chart.AddControl(grid);
            
                         _symbol.Tick += Symbol_Tick;
            
                         Timer.Start(TimeSpan.FromSeconds(1));
                     }
            
                     private void Symbol_Tick(SymbolTickEventArgs obj)
                     {
                         _askTextBlock.Text = obj.Symbol.Ask.ToString();
                         _bidTextBlock.Text = obj.Symbol.Bid.ToString();
                         _spreadTextBlock.Text = obj.Symbol.Spread.ToString();
                         _unrealizedGrossProfitTextBlock.Text = obj.Symbol.UnrealizedGrossProfit.ToString();
                         _unrealizedNetProfitTextBlock.Text = obj.Symbol.UnrealizedNetProfit.ToString();
                     }
            
                     protected override void OnTimer()
                     {
                         _timeTillOpenTextBlock.Text = _symbol.MarketHours.TimeTillOpen().ToString();
                         _timeTillCloseTextBlock.Text = _symbol.MarketHours.TimeTillClose().ToString();
                         _isOpenedTextBlock.Text = _symbol.MarketHours.IsOpened().ToString();
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Ask">
            <summary>
            Gets the current ask price for this symbol.
            </summary>
            <remarks>
            The seller's price for the symbol.
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("Ask Price: {0}", Symbol.Ask);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Bid">
            <summary>
            Gets the current bid price for this symbol.
            </summary>
            <remarks>
            The buyer's price for the symbol.
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("Bid Price: {0}", Symbol.Bid);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Spread">
            <summary>
            Gets the current spread of this symbol.
            </summary>
            <remarks>
            The difference between the Ask and the Bid price for the symbol.
                (see <see cref="P:cAlgo.API.Internals.Symbol.Ask" /> and <see cref="P:cAlgo.API.Internals.Symbol.Bid" />)
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The Spread of the symbol is: {0}", Symbol.Spread);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Code">
            <summary>
            Represents the trading pair code, e.g. "EURUSD".
            </summary>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("This strategy is trading the symbol: {0}", Symbol.Code);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.PipSize">
            <summary>
            Gets the pip size for current symbol.
            </summary>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The current symbol has pip size of: {0}", Symbol.PipSize);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Digits">
            <summary>
            Gets the number of digits for the symbol.
            </summary>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The number of Digits the current symbol  has is: {0}", Symbol.Digits);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.PointSize">
            <summary>
            Gets the point size for the current symbol.
            </summary>
            <remarks>
                If the symbol is a 5 digit symbol, the point size is 0.00001.
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The current symbol has PointSize: {0}", Symbol.PointSize);
            }
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.TickSize">
            <summary>
            Gets the tick size for the current symbol.
            </summary>
            <remarks>
                If the symbol is a 5 digit symbol, the tick size is 0.00001.
            </remarks>
            <example>
                <code>
            protected override void OnTick()
            {
                Print("The current symbol has TickSize: {0}", Symbol.TickSize);
            }
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeMin">
            <summary>
            Gets the minimum tradable amount.
            </summary>
            <example>
                <code>
            if(volume &lt; Symbol.VolumeMin)
            {
                Print("The minimum volume is {0}", Symbol.VolumeMin);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeMax">
            <summary>
            Gets the maximum tradable amount.
            </summary>
            <example>
                <code>
            if(Symbol.NormalizeVolume(volume, RoundingMode.Down) &lt;= Symbol.VolumeMax)
            {
                volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
                ExecuteMarketOrder(TradeType.Buy, Symbol, volume);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeStep">
            <summary>
            Gets the minimum trade amount increment.
            </summary>
            <example>
                <code>
            if(volume + Symbol.VolumeStep &lt;= Symbol.VolumeMax)
            {
                volume += Symbol.VolumeStep;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeInUnitsMin">
            <summary>
            Gets the minimum tradable amount.
            </summary>
            <example>
                <code>
            if(volume &lt; Symbol.VolumeInUnitsMin)
            {
                Print("The minimum volume is {0}", Symbol.VolumeInUnitsMin);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeInUnitsMax">
            <summary>
            Gets the maximum tradable amount.
            </summary>
            <example>
                <code>
            if(Symbol.NormalizeVolumeInUnits(volume, RoundingMode.Down) &lt;= Symbol.VolumeInUnitsMax)
            {
                volume = Symbol.NormalizeVolumeInUnits(volume, RoundingMode.Down);
                ExecuteMarketOrder(TradeType.Buy, Symbol, volume);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.VolumeInUnitsStep">
            <summary>
            Gets the minimum trade amount increment.
            </summary>
            <example>
                <code>
            if(volume + Symbol.VolumeInUnitsStep &lt;= Symbol.VolumeInUnitsMax)
            {
                volume += Symbol.VolumeInUnitsStep;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.PipValue">
            <summary>
            Gets the monetary value of one pip.
            </summary>
            <example>
                <code>
            var volume = ((Account.Balance*Risk)/StopLoss)/Symbol.PipValue;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.TickValue">
            <summary>
            Gets the monetary value of one tick.
            </summary>
            <example>
                <code>
            var volume = ((Account.Balance*Risk)/StopLoss)/Symbol.TickValue;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.LotSize">
            <summary>
            Gets the size of 1 lot in units of the base currency.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.UnrealizedNetProfit">
            <summary>
            Gets the sum of the unrealized Net profits of the positions of this Symbol.
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.UnrealizedGrossProfit">
            <summary>
            Gets the sum of the unrealized Gross profits of the positions of this Symbol
            </summary>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.NormalizeVolume(System.Double,cAlgo.API.RoundingMode)">
            <summary>
            Gets the round the volume to the amount suitable for a trade.
            </summary>
            <param name="volume">Amount to normalize</param>
            <param name="roundingMode">Rounding method</param>
            <returns>Normalized volume</returns>
            <example>
                <code>
            volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.NormalizeVolumeInUnits(System.Double,cAlgo.API.RoundingMode)">
            <summary>
            Round the volume to the amount suitable for a trade.
            </summary>
            <param name="volume">Amount to normalize</param>
            <param name="roundingMode">Rounding method</param>
            <returns>Normalized volume</returns>
            <example>
                <code>
            volume = Symbol.NormalizeVolumeInUnits(volume, RoundingMode.Down);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.QuantityToVolume(System.Double)">
            <summary>
            Convert Quantity (in lots) to Volume in units of base currency.
            </summary>
            <param name="quantity">Quantity (lots)</param>
            <returns>Volume in units of base currency</returns>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.QuantityToVolumeInUnits(System.Double)">
            <summary>
            Convert Quantity (in lots) to Volume in units of base currency.
            </summary>
            <param name="quantity">Quantity (lots)</param>
            <returns>Volume in units of base currency</returns>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.VolumeToQuantity(System.Int64)">
            <summary>
            Convert Volume in units of base currency to Quantity (in lots).
            </summary>
            <param name="volume"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Internals.Symbol.VolumeInUnitsToQuantity(System.Double)">
            <summary>
            Convert Volume in units of base currency to Quantity (in lots).
            </summary>
            <param name="volume"></param>
            <returns></returns>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.Leverage">
            <summary>
            Gets the maximum leverage for the instrument.
            </summary>
            <example>
            <code>
            var leverage = Math.Min(Symbol.Leverage, Account.Leverage);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.PreciseLeverage">
            <summary>
            Gets the maximum leverage for the instrument.
            </summary>
            <example>
            <code>
            var leverage = Math.Min(Symbol.Leverage, Account.Leverage);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.DynamicLeverage">
            <summary>
            Gets the dynamic leverage tiers for the symbol.
            </summary>
            <example>
            <code>
            var symbolLeverage = Symbol.DynamicLeverage[0].Leverage;
            var realLeverage = Math.Min(symbolLeverage, Account.Leverage);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Internals.Symbol.MarketHours">
            <summary>
            Gets access to the symbol's trading sessions schedule.
            </summary>
        </member>
        <member name="T:cAlgo.API.Internals.TradingSession">
            <summary>
            Trading session schedule
            </summary>
            <seealso cref="T:cAlgo.API.Internals.TradingSession"/>
        </member>
        <member name="P:cAlgo.API.Internals.TradingSession.StartDay">
            <summary>
            Day of week when trading session starts
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.TradingSession.EndDay">
            <summary>
             Day of week when trading session ends
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.TradingSession.StartTime">
            <summary>
            Time when trading session starts
            </summary>
        </member>
        <member name="P:cAlgo.API.Internals.TradingSession.EndTime">
            <summary>
            Time when trading session ends
            </summary>
        </member>
        <member name="T:cAlgo.API.LineStyle">
             <summary>
             An enumeration of different stroke styles used to render lines.
             </summary>
             <example>
             <code>
             //Examples of all different LineStyles
             [Output("Dots", LineStyle = LineStyle.Dots)]
             public IndicatorDataSeries outputDots { get; set; }
            
             [Output("DotsRare", LineStyle = LineStyle.DotsRare)]
             public IndicatorDataSeries outputDotsRare { get; set; }
            
             [Output("DotsVeryRare", LineStyle = LineStyle.DotsVeryRare)]
             public IndicatorDataSeries outputDotsVeryRare { get; set; }
            
             [Output("Lines", LineStyle = LineStyle.Lines)]
             public IndicatorDataSeries outputLines { get; set; }
            
             [Output("LinesDots", LineStyle = LineStyle.LinesDots)]
             public IndicatorDataSeries outputLinesDots { get; set; }
            
             [Output("Solid", LineStyle = LineStyle.Solid)]
             public IndicatorDataSeries outputSolid { get; set; }
             </code>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use different line styles
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class LineStyleSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         Chart.DrawVerticalLine("Dots", Chart.LastVisibleBarIndex, Color.Red, 3, LineStyle.Dots);
                         Chart.DrawVerticalLine("DotsRare", Chart.LastVisibleBarIndex - 2, Color.Yellow, 3, LineStyle.DotsRare);
                         Chart.DrawVerticalLine("DotsVeryRare", Chart.LastVisibleBarIndex - 4, Color.Green, 3, LineStyle.DotsVeryRare);
                         Chart.DrawVerticalLine("Lines", Chart.LastVisibleBarIndex - 6, Color.Blue, 3, LineStyle.Lines);
                         Chart.DrawVerticalLine("LinesDots", Chart.LastVisibleBarIndex - 8, Color.Magenta, 3, LineStyle.LinesDots);
                         Chart.DrawVerticalLine("Solid", Chart.LastVisibleBarIndex - 10, Color.Brown, 3, LineStyle.Solid);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.Solid">
            <summary>
            A solid line: -----
            </summary>
            <example>
            <code>
            [Output("Solid", LineStyle = LineStyle.Solid)]
            public IndicatorDataSeries outputSolid { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.Dots">
            <summary>
            A dotted line: .....
            </summary>
            <example>
            <code>
            [Output("Dots", LineStyle = LineStyle.Dots)]
            public IndicatorDataSeries outputDots { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.DotsRare">
            <summary>
            A dotted line, large gap between dots: . . . .
            </summary>
            <example>
            <code>
            [Output("DotsRare", LineStyle = LineStyle.DotsRare)]
            public IndicatorDataSeries outputDotsRare { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.DotsVeryRare">
            <summary>
            A dotted line, extra large gap between dots: .   .   .   .
            </summary>
            <example>
            <code>
            [Output("DotsVeryRare", LineStyle = LineStyle.DotsVeryRare)]
            public IndicatorDataSeries outputDotsVeryRare { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.LinesDots">
            <summary>
            A mixed line / dot style is used to render the line: - . - . - .
            </summary>
            <example>
            <code>
            [Output("LinesDots", LineStyle = LineStyle.LinesDots)]
            public IndicatorDataSeries outputLinesDots { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.LineStyle.Lines">
            <summary>
            Lines with gaps are used to render the line: - - - -
            </summary>
            <example>
            <code>
            [Output("Lines", LineStyle = LineStyle.Lines)]
            public IndicatorDataSeries outputLines { get; set; }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Bar">
            <summary>
            Represents the Bar object.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bar.OpenTime">
            <summary>
            Gets the bar open time.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bar.Open">
            <summary>
            Gets the open price.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bar.High">
            <summary>
            Gets the High price.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bar.Low">
            <summary>
            Gets the Low price.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bar.Close">
            <summary>
            Gets the Close price.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bar.TickVolume">
            <summary>
            Gets the Tick volume.
            </summary>
        </member>
        <member name="M:cAlgo.API.Bar.Equals(cAlgo.API.Bar)">
            <summary>
            Defines whether the specified object is equal to this instance.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Bar.Equals(System.Object)">
            <summary>
            Defines whether the specified object is equal to this instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Bar.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Bar.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cAlgo.API.Bars">
             <summary>
             Represents the Bars interface - the collection of Bar objects.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using System;
            
             namespace cAlgo
             {
                 // A sample indicator that shows how to use Bars
                 [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class BarsSample : Indicator
                 {
                     private TextBlock _barTicksNumberTextBlock, _barsStateTextBlock;
            
                     [Output("Range", LineColor = "RoyalBlue")]
                     public IndicatorDataSeries Range { get; set; }
            
                     [Output("Body", LineColor = "Yellow")]
                     public IndicatorDataSeries Body { get; set; }
            
                     protected override void Initialize()
                     {
                         // Bars events
                         Bars.BarOpened += Bars_BarOpened;
            
                         Bars.Tick += Bars_Tick;
            
                         Bars.HistoryLoaded += Bars_HistoryLoaded;
            
                         Bars.Reloaded += Bars_Reloaded;
            
                         var grid = new Grid(2, 2)
                         {
                             BackgroundColor = Color.DarkGoldenrod,
                             HorizontalAlignment = HorizontalAlignment.Right,
                             VerticalAlignment = VerticalAlignment.Top,
                             Opacity = 0.5
                         };
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Bar Ticks #",
                             Margin = 5
                         }, 0, 0);
            
                         _barTicksNumberTextBlock = new TextBlock
                         {
                             Text = "0",
                             Margin = 5
                         };
            
                         grid.AddChild(_barTicksNumberTextBlock, 0, 1);
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Bars State",
                             Margin = 5
                         }, 1, 0);
            
                         _barsStateTextBlock = new TextBlock
                         {
                             Margin = 5
                         };
            
                         grid.AddChild(_barsStateTextBlock, 1, 1);
            
                         IndicatorArea.AddControl(grid);
                     }
            
                     private void Bars_Reloaded(BarsHistoryLoadedEventArgs obj)
                     {
                         _barsStateTextBlock.Text = "Reloaded";
                     }
            
                     private void Bars_HistoryLoaded(BarsHistoryLoadedEventArgs obj)
                     {
                         _barsStateTextBlock.Text = "History Loaded";
                     }
            
                     private void Bars_Tick(BarsTickEventArgs obj)
                     {
                         _barTicksNumberTextBlock.Text = Bars.TickVolumes.LastValue.ToString();
                     }
            
                     private void Bars_BarOpened(BarOpenedEventArgs obj)
                     {
                         _barsStateTextBlock.Text = "New Bar Opened";
                     }
            
                     public override void Calculate(int index)
                     {
                         Range[index] = Bars.HighPrices[index] - Bars.LowPrices[index];
                         Body[index] = Math.Abs(Bars.ClosePrices[index] - Bars.OpenPrices[index]);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Bars.LastBar">
            <summary>
            Gets the last bar in the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.Count">
            <summary>
            Gets the number of bars.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.TimeFrame">
            <summary>
            Get the timeframe.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.SymbolName">
            <summary>
            Gets the symbol name.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.OpenPrices">
            <summary>
            Gets the Open price bars data.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.HighPrices">
            <summary>
            Gets the High price bars data.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.LowPrices">
            <summary>
            Gets the Low price bars data.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.ClosePrices">
            <summary>
            Gets the Close price bars data.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.TickVolumes">
            <summary>
            Gets the Tick volumes data.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.MedianPrices">
            <summary>
            Gets the Median prices data.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.TypicalPrices">
            <summary>
            Gets the Typical prices data.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.WeightedPrices">
            <summary>
            Gets the Weighted prices data.
            </summary>
        </member>
        <member name="P:cAlgo.API.Bars.OpenTimes">
            <summary>
            Gets the open bar time data.
            </summary>
        </member>
        <member name="M:cAlgo.API.Bars.Last(System.Int32)">
            <summary>
            Gets the bar from the end of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Bars.LoadMoreHistory">
            <summary>
            Loads more historical bars. Method returns the number of loaded bars that were added to the beginning of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Bars.LoadMoreHistoryAsync">
            <summary>
            Loads more historical bars asynchronously.
            </summary>
        </member>
        <member name="M:cAlgo.API.Bars.LoadMoreHistoryAsync(System.Action{cAlgo.API.BarsHistoryLoadedEventArgs})">
            <summary>
            Loads more historical bars asynchronously.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="E:cAlgo.API.Bars.HistoryLoaded">
            <summary>
            Occurs when more history is loaded due to chart scroll on the left or due to API call.
            </summary>
        </member>
        <member name="E:cAlgo.API.Bars.Reloaded">
            <summary>
            Occurs when bars are refreshed due to reconnect.
            </summary>
        </member>
        <member name="E:cAlgo.API.Bars.Tick">
            <summary>
            Occurs when a new Tick arrives.
            </summary>
        </member>
        <member name="E:cAlgo.API.Bars.BarOpened">
            <summary>
            Occurs when the last bar is closed and a new bar is opened.
            </summary>
        </member>
        <member name="T:cAlgo.API.Tick">
            <summary>
            Represents the Tick object.
            </summary>
            <seealso cref="T:cAlgo.API.Ticks"/>
        </member>
        <member name="P:cAlgo.API.Tick.Time">
            <summary>
             Gets the Tick time.
            </summary>
        </member>
        <member name="P:cAlgo.API.Tick.Bid">
            <summary>
            Gets the Bid price of tick.
            </summary>
        </member>
        <member name="P:cAlgo.API.Tick.Ask">
            <summary>
            Gets the Ask price of tick.
            </summary>
        </member>
        <member name="M:cAlgo.API.Tick.Equals(cAlgo.API.Tick)">
             <summary>
            
             </summary>
             <param name="other"></param>
             <returns></returns>
        </member>
        <member name="M:cAlgo.API.Tick.Equals(System.Object)">
             <summary>
            
             </summary>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:cAlgo.API.Tick.GetHashCode">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:cAlgo.API.Tick.ToString">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:cAlgo.API.Tick.op_Equality(cAlgo.API.Tick,cAlgo.API.Tick)">
             <summary>
            
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="M:cAlgo.API.Tick.op_Inequality(cAlgo.API.Tick,cAlgo.API.Tick)">
             <summary>
            
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="T:cAlgo.API.Ticks">
             <summary>
             Represents the Ticks interface - the collection of Tick objects.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Internals;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to get a symbol ticks data and handle its tick events
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TickSample : Indicator
                 {
                     private Ticks _ticks;
            
                     [Parameter("Symbol Name", DefaultValue = "EURUSD")]
                     public string InputSymbolName { get; set; }
            
                     protected override void Initialize()
                     {
                         // Getting a symbol ticks data
                         _ticks = MarketData.GetTicks(InputSymbolName);
                         // Subscribing to upcoming ticks
                         _ticks.Tick += Ticks_Tick;
            
                         _ticks.HistoryLoaded += Ticks_HistoryLoaded;
                         // You can also pass a callback method instead of subscribing to HistoryLoaded event
                         //_ticks.LoadMoreHistoryAsync(Ticks_HistoryLoaded);
                         _ticks.LoadMoreHistoryAsync();
            
                         _ticks.Reloaded += Ticks_Reloaded;
                     }
            
                     private void Ticks_Reloaded(TicksHistoryLoadedEventArgs obj)
                     {
                         Print("Ticks got reloaded");
                     }
            
                     private void Ticks_HistoryLoaded(TicksHistoryLoadedEventArgs obj)
                     {
                         Print("New ticks loaded: #", obj.Count);
                     }
            
                     private void Ticks_Tick(TicksTickEventArgs obj)
                     {
                         // Printing Last tick inside Ticks collection
                         Print(obj.Ticks.LastTick);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Ticks.Item(System.Int32)">
            <summary>
            Gets the specific tick data.
            </summary>
        </member>
        <member name="P:cAlgo.API.Ticks.LastTick">
            <summary>
            Gets the last tick in the chart.
            </summary>
        </member>
        <member name="P:cAlgo.API.Ticks.Count">
            <summary>
            Gets the number of objects.
            </summary>
        </member>
        <member name="M:cAlgo.API.Ticks.Last(System.Int32)">
            <summary>
            Gets the tick from the end of the list.
            </summary>
        </member>
        <member name="P:cAlgo.API.Ticks.SymbolName">
            <summary>
            Gets the symbol name.
            </summary>
        </member>
        <member name="M:cAlgo.API.Ticks.LoadMoreHistory">
            <summary>
            Loads more historical ticks. Method returns the number of loaded ticks that were added to the beginning of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cAlgo.API.Ticks.LoadMoreHistoryAsync">
            <summary>
            Loads more historical ticks asynchronously.
            </summary>
        </member>
        <member name="M:cAlgo.API.Ticks.LoadMoreHistoryAsync(System.Action{cAlgo.API.TicksHistoryLoadedEventArgs})">
            <summary>
            Loads more historical ticks asynchronously.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="E:cAlgo.API.Ticks.HistoryLoaded">
            <summary>
            Occurs when more history is loaded due to chart scroll to the left or due to API call.
            </summary>
        </member>
        <member name="E:cAlgo.API.Ticks.Reloaded">
            <summary>
            Occurs when ticks are refreshed due to reconnect.
            </summary>
        </member>
        <member name="E:cAlgo.API.Ticks.Tick">
            <summary>
            Occurs when a new tick appears.
            </summary>
        </member>
        <member name="T:cAlgo.API.MarketDepth">
             <summary>
             Access to MarketDepth Ask Entries, Bid Entries and the event at which the market depth gets updated
             </summary>
             <example>
             <code>
            	using System;
            	using System.Text;
            	using cAlgo.API;
            
            	namespace cAlgo.Indicators
            	{
            	    [Indicator]
            	    public class MarketDepthIndicator : Indicator
            	    {
            
            	        private MarketDepth _marketDepth;
            
            	        public override void Calculate(int index){}
            
            	        protected override void Initialize()
            	        {
                         //  Get Market Depth
            	            _marketDepth = MarketData.GetMarketDepth(Symbol);
                         // subscribe to event Updated
            	            _marketDepth.Updated += MarketDepthUpdated;
            	        }
            
            	        void MarketDepthUpdated()
            	        {
                         // Draw Market Depth Entries in the indicator panel
            	            var se = new StringBuilder();
            	            se.Append("Bid");
            	            se.Append("                              ");
            	            se.Append("Ask");
            	            ChartObjects.DrawText("DOM", se.ToString(), StaticPosition.TopLeft, Colors.White);
            	            se.Clear();
            	            se.AppendLine();
            	            se.AppendLine();
            
            	            foreach (var entry in _marketDepth.BidEntries)
            	            {
            	                double dVolume  = Math.Round(entry.Volume / 1000000.0, 2);
            	                string volume = string.Format("{0}{1}", dVolume, "m");
            	                double entryPrice = entry.Price;
            	                string askText = string.Format("{0}    {1}", entryPrice.ToString("0.00000"), volume);
            	                se.AppendLine(askText);
            	            }
            
            	            ChartObjects.DrawText("Bid", se.ToString(), StaticPosition.TopLeft, Colors.Red);
            
            	            se.Clear();
            	            se.AppendLine();
            	            se.AppendLine();
            
            	            foreach (var entry in _marketDepth.AskEntries)
            	            {
            	                double dVolume = Math.Round(entry.Volume / 1000000.0, 2);
            	                string volume = string.Format("{0}{1}", dVolume, "m");
            	                double entryPrice = entry.Price;
            	                se.Append("                                    ");
            	                string bidText = string.Format("{0}     {1}", entryPrice.ToString("0.00000"), volume);
            	                se.AppendLine(bidText);
            	            }
            
            	            ChartObjects.DrawText("Ask", se.ToString(), StaticPosition.TopLeft, Colors.Turquoise);
            
            	        }
            	    }
            	}
             </code>
             </example>
             <example>
             <code>
            	using cAlgo.API;
            
            	namespace cAlgo.Indicators
            	{
            	    [Indicator]
            	    public class Level2 : Indicator
            	    {
            	        [Output("BidEntries", Color = Colors.Red, PlotType = PlotType.Histogram, Thickness = 5)]
            	        public IndicatorDataSeries BidResult { get; set; }
            
            	        [Output("AskEntries", Color = Colors.Blue, PlotType = PlotType.Histogram, Thickness = 5)]
            	        public IndicatorDataSeries AskResult { get; set; }
            
            	        MarketDepth GBPUSD;
            
            	        private int _askNo;
            	        private int _bidNo;
            
            	        protected override void Initialize()
            	        {
            	            GBPUSD = MarketData.GetMarketDepth(Symbol);
            	            GBPUSD.Updated += OnGbpUsdUpdated;
            	        }
            
            	        void OnGbpUsdUpdated()
            	        {
            	            _askNo = 0;
            	            _bidNo = 0;
            
            	            var index = MarketSeries.Close.Count - 1;
            
            	            for (var i = 0; i &lt; GBPUSD.AskEntries.Count; i++)
            	                AskResult[index - i] = double.NaN;
            
            	            foreach (var entry in GBPUSD.AskEntries)
            	            {
            	                AskResult[index - _askNo] = (-1) * entry.Volume;
            	                _askNo++;
            	            }
            
            	            for (var i = 0; i &lt; GBPUSD.BidEntries.Count; i++)
            	                BidResult[index - i] = double.NaN;
            
            	            foreach (var entry in GBPUSD.BidEntries)
            	            {
            	                BidResult[index - _bidNo] = entry.Volume;
            	                _bidNo++;
            	            }
            	        }
            	        public override void Calculate(int index){}
            	    }
            	}
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Internals;
            
             namespace cAlgo
             {
                 // This sample shows how to get a symbol market depth and use it
                 [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MarketDepthSample : Indicator
                 {
                     private int _askNo;
                     private int _bidNo;
            
                     private MarketDepth _marketDepth;
            
                     [Output("Bid Entries", LineColor = "Red", PlotType = PlotType.Histogram, Thickness = 5)]
                     public IndicatorDataSeries BidResult { get; set; }
            
                     [Output("Ask Entries", LineColor = "Blue", PlotType = PlotType.Histogram, Thickness = 5)]
                     public IndicatorDataSeries AskResult { get; set; }
            
                     protected override void Initialize()
                     {
                         _marketDepth = MarketData.GetMarketDepth(SymbolName);
                         _marketDepth.Updated += MarketDepth_Updated; ;
                     }
            
                     private void MarketDepth_Updated()
                     {
                         _askNo = 0;
                         _bidNo = 0;
            
                         var index = Bars.ClosePrices.Count - 1;
            
                         for (var i = 0; i &lt; _marketDepth.AskEntries.Count; i++)
                             AskResult[index - i] = double.NaN;
            
                         foreach (var entry in _marketDepth.AskEntries)
                         {
                             AskResult[index - _askNo] = (-1) * entry.VolumeInUnits;
                             _askNo++;
                         }
            
                         for (var i = 0; i &lt; _marketDepth.BidEntries.Count; i++)
                             BidResult[index - i] = double.NaN;
            
                         foreach (var entry in _marketDepth.BidEntries)
                         {
                             BidResult[index - _bidNo] = entry.VolumeInUnits;
                             _bidNo++;
                         }
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="E:cAlgo.API.MarketDepth.Updated">
             <summary>
             The event at which the market depth gets updated
             </summary>
             <example>
             <code>
             MarketDepth _marketDepth;
            
             protected override void Initialize()
             {
                 _marketDepth = MarketData.GetMarketDepth(Symbol);
                 // subscribe to event Updated
                 _marketDepth.Updated += MarketDepthUpdated;
             }
            
             // user defined function MarketDepthUpdated
             void MarketDepthUpdated()
             {
                 // Do something
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.MarketDepth.AskEntries">
             <summary>
             The total number of Ask entries
             </summary>
             <example>
             <code>
            foreach (var entry in _marketDepth.AskEntries)
            {
                 volume  = entry.Volume;
            	    entryPrice = entry.Price;
            }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.MarketDepth.BidEntries">
             <summary>
             The total number of Bid entries
             </summary>
             <example>
             <code>
            foreach (var entry in _marketDepth.BidEntries)
            {
                 volume  = entry.Volume;
            	    entryPrice = entry.Price;
            }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.MarketDepthEntry">
             <summary>
             Provides access to market depth prices and volumes
             </summary>
             <example>
             <code>
            foreach (var marketDepthEntry in _marketDepth.AskEntries)
            {
                 //The volume of this market depth entry
                 volume = marketDepthEntry.Volume;
                 //The price of this market depth entry
                 price = marketDepthEntry.Price;    
            }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.MarketDepthEntry.Volume">
             <summary>
             The volume of this market depth entry
             </summary>
             <example>
             <code>
            foreach (var entry in _marketDepth.AskEntries)
            {
                 volume  = entry.Volume;
            }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.MarketDepthEntry.VolumeInUnits">
             <summary>
             The volume of this market depth entry
             </summary>
             <example>
             <code>
            foreach (var entry in _marketDepth.AskEntries)
            {
                 volume  = entry.VolumeInUnits;
            }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.MarketDepthEntry.Price">
            <summary>
            The price of this market depth entry
            </summary>
            <example>
            <code>
            for(int i = 0; i &lt; _marketDepth.AskEntries.Count; i++)
            {
                price = _marketDepth.AskEntries[i].Price;    
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.MovingAverageType">
             <summary>
             An enumeration of the different MovingAverage weighting (smoothing) methods.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo
             {
                 // A sample indicator that shows how to use different types of moving average
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class MovingAverageTypeSample : Indicator
                 {
                     private MovingAverage _ma;
            
                     [Parameter("Type", DefaultValue = MovingAverageType.Simple)]
                     public MovingAverageType MovingAverageType { get; set; }
            
                     [Output("Main")]
                     public IndicatorDataSeries Result { get; set; }
            
                     protected override void Initialize()
                     {
                         _ma = Indicators.MovingAverage(Bars.ClosePrices, 14, MovingAverageType);
                     }
            
                     public override void Calculate(int index)
                     {
                         Result[index] = _ma.Result[index];
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.Simple">
            <summary>
            Use uniform weighting. Represents indicator of <see cref="T:cAlgo.API.Indicators.SimpleMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.Simple)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.Exponential">
            <summary>
            Use exponential weighting. Represents indicator of <see cref="T:cAlgo.API.Indicators.ExponentialMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.Exponential)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.TimeSeries">
            <summary>
            Represents indicator of <see cref="T:cAlgo.API.Indicators.TimeSeriesMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.TimeSeries)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.Triangular">
            <summary>
            Represents indicator of <see cref="T:cAlgo.API.Indicators.TriangularMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.Triangular)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.VIDYA">
            <summary>
            VIDYA (Volatility Index Dynamic Average) variable length weighting. Represents indicator of <see cref="T:cAlgo.API.Indicators.Vidya"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.VIDYA)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.Weighted">
            <summary>
            Represents indicator of <see cref="T:cAlgo.API.Indicators.WeightedMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.Weighted)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.WilderSmoothing">
            <summary>
            Represents indicator of <see cref="T:cAlgo.API.Indicators.WellesWilderSmoothing"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.WilderSmoothing)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
            <example>
            <code>
            private MovingAverageType _wilderSmoothing = MovingAverageType.WilderSmoothing;
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.MovingAverageType.Hull">
            <summary>
            Represents indicator of <see cref="T:cAlgo.API.Indicators.HullMovingAverage"/> type.
            </summary>
            <example>
            <code>
            [Parameter("MAType", DefaultValue = MovingAverageType.Hull)]
            public MovingAverageType MaType { get; set; }
            </code>
            </example>
            <example>
            <code>
            private MovingAverageType _hull = MovingAverageType.Hull;
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.PendingOrder">
             <summary>
             Provides access to properties of pending orders
             </summary>
             <example>
             <code>
             PlaceLimitOrder(TradeType.Buy, Symbol, 10000,Symbol.Bid);
             var order = LastResult.PendingOrder;
             Print("The pending order's ID: {0}", order.Id);
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using System;
             using System.Globalization;
            
             namespace cAlgo.Robots
             {
                 // This sample bot shows how to place different types of pending orders
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PendingOrderPlacingSample : Robot
                 {
                     [Parameter("Type", DefaultValue = PendingOrderType.Limit)]
                     public PendingOrderType OrderType { get; set; }
            
                     [Parameter("Direction", DefaultValue = TradeType.Buy)]
                     public TradeType OrderTradeType { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Distance (Pips)", DefaultValue = 20, MinValue = 1)]
                     public double DistanceInPips { get; set; }
            
                     [Parameter("Stop (Pips)", DefaultValue = 10, MinValue = 0)]
                     public double StopInPips { get; set; }
            
                     [Parameter("Target (Pips)", DefaultValue = 10, MinValue = 0)]
                     public double TargetInPips { get; set; }
            
                     [Parameter("Limit Range (Pips)", DefaultValue = 10, MinValue = 1)]
                     public double LimitRangeInPips { get; set; }
            
                     [Parameter("Expiry", DefaultValue = "00:00:00")]
                     public string Expiry { get; set; }
            
                     [Parameter("Label")]
                     public string Label { get; set; }
            
                     [Parameter("Comment")]
                     public string Comment { get; set; }
            
                     [Parameter("Trailing Stop", DefaultValue = false)]
                     public bool HasTrailingStop { get; set; }
            
                     [Parameter("Stop Loss Method", DefaultValue = StopTriggerMethod.Trade)]
                     public StopTriggerMethod StopLossTriggerMethod { get; set; }
            
                     [Parameter("Stop Order Method", DefaultValue = StopTriggerMethod.Trade)]
                     public StopTriggerMethod StopOrderTriggerMethod { get; set; }
            
                     [Parameter("Async", DefaultValue = false)]
                     public bool IsAsync { get; set; }
            
                     protected override void OnStart()
                     {
                         var volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         DistanceInPips *= Symbol.PipSize;
            
                         var stopLoss = StopInPips == 0 ? null : (double?)StopInPips;
                         var takeProfit = TargetInPips == 0 ? null : (double?)TargetInPips;
            
                         TimeSpan expiry;
            
                         if (!TimeSpan.TryParse(Expiry, CultureInfo.InvariantCulture, out expiry))
                         {
                             Print("Invalid expiry");
            
                             Stop();
                         }
            
                         var expiryTime = expiry != TimeSpan.FromSeconds(0) ? (DateTime?)Server.Time.Add(expiry) : null;
            
                         TradeResult result = null;
            
                         switch (OrderType)
                         {
                             case PendingOrderType.Limit:
                                 var limitPrice = OrderTradeType == TradeType.Buy ? Symbol.Ask - DistanceInPips : Symbol.Ask + DistanceInPips;
            
                                 if (IsAsync)
                                     PlaceLimitOrderAsync(OrderTradeType, SymbolName, volumeInUnits, limitPrice, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, OnCompleted);
                                 else
                                     result = PlaceLimitOrder(OrderTradeType, SymbolName, volumeInUnits, limitPrice, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod);
            
                                 break;
            
                             case PendingOrderType.Stop:
                                 var stopPrice = OrderTradeType == TradeType.Buy ? Symbol.Ask + DistanceInPips : Symbol.Ask - DistanceInPips;
            
                                 if (IsAsync)
                                     PlaceStopOrderAsync(OrderTradeType, SymbolName, volumeInUnits, stopPrice, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, StopOrderTriggerMethod, OnCompleted);
                                 else
                                     result = PlaceStopOrder(OrderTradeType, SymbolName, volumeInUnits, stopPrice, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, StopOrderTriggerMethod);
            
                                 break;
            
                             case PendingOrderType.StopLimit:
                                 var stopLimitPrice = OrderTradeType == TradeType.Buy ? Symbol.Ask + DistanceInPips : Symbol.Ask - DistanceInPips;
            
                                 if (IsAsync)
                                     PlaceStopLimitOrderAsync(OrderTradeType, SymbolName, volumeInUnits, stopLimitPrice, LimitRangeInPips, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, StopOrderTriggerMethod, OnCompleted);
                                 else
                                     result = PlaceStopLimitOrder(OrderTradeType, SymbolName, volumeInUnits, stopLimitPrice, LimitRangeInPips, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, StopOrderTriggerMethod);
            
                                 break;
            
                             default:
                                 Print("Invalid order type");
            
                                 throw new ArgumentOutOfRangeException("OrderType");
                         }
            
                         if (!IsAsync) OnCompleted(result);
                     }
            
                     private void OnCompleted(TradeResult result)
                     {
                         if (!result.IsSuccessful) Print("Error: ", result.Error);
            
                         Stop();
                     }
                 }
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using System;
             using System.Globalization;
             using System.Linq;
            
             namespace cAlgo.Robots
             {
                 // This sample shows how to modify a pending order
                 // It uses order comment to find the order, you can use order label instead if you want to
                 // Set stop loss and take profit to 0 if you don't want to change it
                 // Leave expiry parameter empty if you don't want to change it or 0 if you want to remove it
                 // If you don't want to change the target price set it to 0
                 // If you don't want to change the volume set it to 0
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PendingOrderModificationSample : Robot
                 {
                     [Parameter("Order Comment")]
                     public string OrderComment { get; set; }
            
                     [Parameter("Order Label")]
                     public string OrderLabel { get; set; }
            
                     [Parameter("Target Price", DefaultValue = 0.0)]
                     public double TargetPrice { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Stop Loss Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
                     public StopTriggerMethod StopLossTriggerMethod { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Expiry (HH:mm:ss)")]
                     public string Expiry { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Has Trailing Stop", DefaultValue = false)]
                     public bool HasTrailingStop { get; set; }
            
                     [Parameter("Order Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
                     public StopTriggerMethod OrderTriggerMethod { get; set; }
            
                     [Parameter("Limit Range (Pips)", DefaultValue = 10)]
                     public double LimitRangeInPips { get; set; }
            
                     protected override void OnStart()
                     {
                         PendingOrder order = null;
            
                         if (!string.IsNullOrWhiteSpace(OrderComment) &amp;&amp; !string.IsNullOrWhiteSpace(OrderComment))
                         {
                             order = PendingOrders.FirstOrDefault(iOrder => string.Equals(iOrder.Comment, OrderComment, StringComparison.OrdinalIgnoreCase) &amp;&amp; string.Equals(iOrder.Label, OrderLabel, StringComparison.OrdinalIgnoreCase));
                         }
                         else if (!string.IsNullOrWhiteSpace(OrderComment))
                         {
                             order = PendingOrders.FirstOrDefault(iOrder => string.Equals(iOrder.Comment, OrderComment, StringComparison.OrdinalIgnoreCase));
                         }
                         else if (!string.IsNullOrWhiteSpace(OrderLabel))
                         {
                             order = PendingOrders.FirstOrDefault(iOrder => string.Equals(iOrder.Label, OrderLabel, StringComparison.OrdinalIgnoreCase));
                         }
            
                         if (order == null)
                         {
                             Print("Couldn't find the order, please check the comment and label");
            
                             Stop();
                         }
            
                         var targetPrice = TargetPrice == 0 ? order.TargetPrice : TargetPrice;
            
                         var orderSymbol = Symbols.GetSymbol(order.SymbolName);
            
                         var stopLossInPips = StopLossInPips == 0 ? order.StopLossPips : (double?)StopLossInPips;
                         var takeProfitInPips = TakeProfitInPips == 0 ? order.TakeProfitPips : (double?)TakeProfitInPips;
            
                         DateTime? expiryTime;
            
                         if (string.IsNullOrWhiteSpace(Expiry))
                         {
                             expiryTime = order.ExpirationTime;
                         }
                         else if (Expiry.Equals("0", StringComparison.OrdinalIgnoreCase))
                         {
                             expiryTime = null;
                         }
                         else
                         {
                             var expiryTimeSpan = default(TimeSpan);
            
                             if (!TimeSpan.TryParse(Expiry, CultureInfo.InvariantCulture, out expiryTimeSpan))
                             {
                                 Print("Your provided value for expiry is not valid, please use HH:mm:ss format");
            
                                 Stop();
                             }
            
                             expiryTime = expiryTimeSpan == default(TimeSpan) ? null : (DateTime?)Server.Time.Add(expiryTimeSpan);
                         }
            
                         var volumeInUnits = VolumeInLots == 0 ? order.VolumeInUnits : orderSymbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         if (order.OrderType == PendingOrderType.Limit)
                         {
                             ModifyPendingOrder(order, targetPrice, stopLossInPips, takeProfitInPips, expiryTime, volumeInUnits, HasTrailingStop, StopLossTriggerMethod);
                         }
                         else if (order.OrderType == PendingOrderType.Stop)
                         {
                             ModifyPendingOrder(order, targetPrice, stopLossInPips, takeProfitInPips, expiryTime, volumeInUnits, HasTrailingStop, StopLossTriggerMethod, OrderTriggerMethod);
                         }
                         else if (order.OrderType == PendingOrderType.StopLimit)
                         {
                             ModifyPendingOrder(order, targetPrice, stopLossInPips, takeProfitInPips, expiryTime, volumeInUnits, HasTrailingStop, StopLossTriggerMethod, OrderTriggerMethod, LimitRangeInPips);
                         }
                     }
                 }
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using System;
             using System.Linq;
            
             namespace cAlgo.Robots
             {
                 // This sample shows how to cancel a pending order
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PendingOrderCancelationSample : Robot
                 {
                     [Parameter("Order Comment")]
                     public string OrderComment { get; set; }
            
                     [Parameter("Order Label")]
                     public string OrderLabel { get; set; }
            
                     protected override void OnStart()
                     {
                         PendingOrder order = null;
            
                         if (!string.IsNullOrWhiteSpace(OrderComment) &amp;&amp; !string.IsNullOrWhiteSpace(OrderLabel))
                         {
                             order = PendingOrders.FirstOrDefault(iOrder => string.Equals(iOrder.Comment, OrderComment, StringComparison.OrdinalIgnoreCase) &amp;&amp; string.Equals(iOrder.Label, OrderLabel, StringComparison.OrdinalIgnoreCase));
                         }
                         else if (!string.IsNullOrWhiteSpace(OrderComment))
                         {
                             order = PendingOrders.FirstOrDefault(iOrder => string.Equals(iOrder.Comment, OrderComment, StringComparison.OrdinalIgnoreCase));
                         }
                         else if (!string.IsNullOrWhiteSpace(OrderLabel))
                         {
                             order = PendingOrders.FirstOrDefault(iOrder => string.Equals(iOrder.Label, OrderLabel, StringComparison.OrdinalIgnoreCase));
                         }
            
                         if (order == null)
                         {
                             Print("Couldn't find the order, please check the comment and label");
            
                             Stop();
                         }
            
                         CancelPendingOrder(order);
                     }
                 }
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo.Robots
             {
                 // This sample shows how to use PendingOrders events
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PendingOrderEvents : Robot
                 {
                     protected override void OnStart()
                     {
                         PendingOrders.Cancelled += PendingOrders_Cancelled;
                         PendingOrders.Modified += PendingOrders_Modified;
                         PendingOrders.Filled += PendingOrders_Filled;
                     }
            
                     private void PendingOrders_Filled(PendingOrderFilledEventArgs obj)
                     {
                         var pendingOrderThatFilled = obj.PendingOrder;
            
                         var filledPosition = obj.Position;
                     }
            
                     private void PendingOrders_Modified(PendingOrderModifiedEventArgs obj)
                     {
                         var modifiedOrder = obj.PendingOrder;
                     }
            
                     private void PendingOrders_Cancelled(PendingOrderCancelledEventArgs obj)
                     {
                         var cancelledOrder = obj.PendingOrder;
            
                         var cancellationReason = obj.Reason;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.SymbolCode">
            <summary>
            Symbol code of the order
            </summary>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000,Symbol.Bid);
            Print("SymbolCode = {0}", LastResult.PendingOrder.SymbolCode);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.TradeType">
            <summary>
            Specifies whether this order is to buy or sell.
            </summary>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
            Print(LastResult.PendingOrder.TradeType);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Volume">
            <summary>
            Volume of this order.
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
            var order = result.PendingOrder;
            Print("The order's volume is: {0}", order.Volume);
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.VolumeInUnits">
            <summary>
            Volume of this order.
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
            var order = result.PendingOrder;
            Print("The order's volume is: {0}", order.VolumeInUnits);
             </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Id">
            <summary>
            Unique order Id.
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
            var order = result.PendingOrder;
            Print("The pending order's ID: {0}", order.Id);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.OrderType">
            <summary>
            Specifies whether this order is Stop or Limit.
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
            var order = result.PendingOrder;
            Print("Order type = {0}", order.OrderType);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.TargetPrice">
            <summary>
            The order target price.
            </summary>
            <example>
            <code>
            var targetPrice = Symbol.Bid;
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.ExpirationTime">
            <summary>
            The order Expiration time
            The Timezone used is set in the Robot attribute
            </summary>
            <example>
            <code>
            DateTime expiration = Server.Time.AddMinutes(120);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
                Symbol.Bid, null, 10, 10, expiration);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopLoss">
             <summary>
             The order stop loss in price
             </summary>
             <example>
             <code>
             var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
             Symbol.Bid, null, 10, 10);
            
             var order = result.PendingOrder;
             Print("Order SL price = {0}", order.StopLoss);
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopLossPips">
             <summary>
             The order stop loss in pips
             </summary>
             <example>
             <code>
             var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
                                 Symbol.Bid, null, 10, 10);
            
             var order = result.PendingOrder;
             Print("Order SL pips = {0}", order.StopLossPips);
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.TakeProfit">
             <summary>
             The order take profit in price
             </summary>
             <example>
             <code>
             var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
             Symbol.Bid, null, 10, 10);
            
             var order = result.PendingOrder;
             Print("Order TP price = {0}", order.TakeProfit);
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.TakeProfitPips">
             <summary>
             The order take profit in pips
             </summary>
             <example>
             <code>
             var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
             Symbol.Bid, null, 10, 10);
            
             var order = result.PendingOrder;
             Print("TP Pips = {0}", order.TakeProfitPips);
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Label">
             <summary>
             User assigned identifier for the order.
             </summary>
             <example>
             <code>
             var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
             Symbol.Bid, "myLabel", 10, 10);
            
             if(result.IsSuccessful)
             {
                 var order = result.PendingOrder;
                 Print("Label = {0}", order.Label);
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Comment">
            <summary>
            User assigned Order Comment
            </summary>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
                            Symbol.Bid, null, 10, 10, null, "this is a comment");
            var order = result.PendingOrder;
            Print("comment = {0}", order.Comment);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.Quantity">
            <summary>
            Quantity (lots) of this order
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrder.HasTrailingStop">
            <summary>
            When HasTrailingStop set to true,
            server updates Stop Loss every time position moves in your favor.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10, 2, "comment", true);
            Print("Position was opened, has Trailing Stop = {0}", result.Position.HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopLossTriggerMethod">
            <summary>
            Trigger method for position's StopLoss
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopOrderTriggerMethod">
            <summary>
            Determines how pending order will be triggered in case it's a StopOrder
            </summary>
        </member>
        <member name="P:cAlgo.API.PendingOrder.StopLimitRangePips">
            <summary>
            Maximum limit from order target price, where order can be executed.
            </summary>
            <example>
            <code>
            var targetPrice = Symbol.Ask;
            var result = PlaceStopLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice, 2.0);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrder.SymbolName">
            <summary>
            Gets the symbol name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyStopLossPips(System.Nullable{System.Double})">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Stop Loss
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyTakeProfitPips(System.Nullable{System.Double})">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Take Profit
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyStopLimitRange(System.Double)">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Stop Limit Range
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyExpirationTime(System.Nullable{System.DateTime})">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Expiration Time
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyVolume(System.Double)">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change VolumeInUnits
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.ModifyTargetPrice(System.Double)">
            <summary>
            Shortcut for Robot.ModifyPendingOrder method to change Target Price
            </summary>
        </member>
        <member name="M:cAlgo.API.PendingOrder.Cancel">
            <summary>
            Shortcut for Robot.CancelPendingOrder method
            </summary>
            <returns></returns>
        </member>
        <member name="T:cAlgo.API.PendingOrderCancellationReason">
            <summary>
            The reason for the order cancellation.
            </summary>
            <seealso cref="T:cAlgo.API.PendingOrder"/>
        </member>
        <member name="F:cAlgo.API.PendingOrderCancellationReason.Cancelled">
            <summary>
            THe order was cancelled by trader.
            </summary>
        </member>
        <member name="F:cAlgo.API.PendingOrderCancellationReason.Expired">
            <summary>
            The order was cancelled due to expiration.
            </summary>
        </member>
        <member name="F:cAlgo.API.PendingOrderCancellationReason.Rejected">
            <summary>
            The order fill was rejected and the order was cancelled.
            </summary>
        </member>
        <member name="T:cAlgo.API.PendingOrders">
            <summary>
            Provides access to methods of the Pending Orders collection
            </summary>
            <seealso cref="T:cAlgo.API.PendingOrder"/>
        </member>
        <member name="P:cAlgo.API.PendingOrders.Item(System.Int32)">
            <summary>
            Find a pending order by index
            </summary>
            <param name="index">The position of the order in the collection</param>
            <example>
            <code>
            if(PendingOrders.Count > 0)
                Print(PendingOrders[0].Id);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.PendingOrders.Count">
            <summary>
            Total number of pending orders
            </summary>
            <example>
            <code>
            var totalOrders = PendingOrders.Count;
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.PendingOrders.Created">
            <summary>
            Occurs when pending order is created
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Created += PendingOrdersOnCreated;
                PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
            }
            private void PendingOrdersOnCreated(PendingOrderCreatedEventArgs args)
            {
                Print("Pending order with id {0} was created", args.PendingOrder.Id);
            }
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.PendingOrders.Modified">
            <summary>
            Occurs when pending order is modified
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Modified += PendingOrdersOnModified;
                var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
                ModifyPendingOrder(result.PendingOrder, Symbol.Ask + 20 * Symbol.PipSize ,null, null, null);
            }
            private void PendingOrdersOnModified(PendingOrderModifiedEventArgs args)
            {
                Print("Pending order with id {0} was modifed", args.PendingOrder.Id);
            }
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.PendingOrders.Cancelled">
            <summary>
            Occurs when pending order is cancelled
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Cancelled += PendingOrdersOnCancelled;
                var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
                CancelPendingOrder(result.PendingOrder);
            }
            private void PendingOrdersOnCancelled(PendingOrderCancelledEventArgs args)
            {
               Print("Pending order with id {0} was cancelled. Reason: {1}", args.PendingOrder.Id, args.Reason);
            }
            </code>
            </example>
        </member>
        <member name="E:cAlgo.API.PendingOrders.Filled">
            <summary>
            Occurs when pending order is filled
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                PendingOrders.Filled += PendingOrdersOnFilled;
                PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            }
            private void PendingOrdersOnFilled(PendingOrderFilledEventArgs args)
            {
                Print("Pending order with id {0} was filled, position id  is {1}", args.PendingOrder.Id, args.Position.Id);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.PendingOrderType">
            <summary>
            Represents the type (Limit or Stop) of pending order.
            </summary>
            <seealso cref="T:cAlgo.API.PendingOrder"/>
            <example>
            <code>
            if(PendingOrders.Count > 0)
            {
                PendingOrderType type = PendingOrders[0].OrderType;
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PendingOrderType.Limit">
            <summary>
             A limit order is an order to buy or sell at a specific price or better.
            </summary>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if(order.OrderType == PendingOrderType.Limit)
                    Print(order.Id);
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PendingOrderType.Stop">
            <summary>
            A stop order is an order to buy or sell once the price of the symbol reaches a specified price.
            </summary>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if(order.OrderType == PendingOrderType.Stop)
                    Print(order.Id);
            }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PendingOrderType.StopLimit">
            <summary>
            A stop limit order is an order to buy or sell once the price of the symbol reaches specific price.
            Order has a parameter for maximum distance from that target price, where it can be executed.
            </summary>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if(order.OrderType == PendingOrderType.StopLimit)
                    Print(order.Id);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.PlotType">
             <summary>
             The Plot type.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Indicators;
            
             namespace cAlgo
             {
                 // This sample shows how to use different types of plots for your indicator outputs
                 [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PlotTypeSample : Indicator
                 {
                     private StandardDeviation _standardDeviation;
            
                     [Output("Discontinuous Line", LineColor = "Red", PlotType = PlotType.DiscontinuousLine)]
                     public IndicatorDataSeries DiscontinuousLine { get; set; }
            
                     [Output("Histogram", LineColor = "Green", PlotType = PlotType.Histogram)]
                     public IndicatorDataSeries Histogram { get; set; }
            
                     [Output("Line", LineColor = "Blue", PlotType = PlotType.Line)]
                     public IndicatorDataSeries Line { get; set; }
            
                     [Output("Points", LineColor = "Yellow", PlotType = PlotType.Points)]
                     public IndicatorDataSeries Points { get; set; }
            
                     protected override void Initialize()
                     {
                         _standardDeviation = Indicators.StandardDeviation(Bars.ClosePrices, 20, MovingAverageType.Simple);
                     }
            
                     public override void Calculate(int index)
                     {
                         DiscontinuousLine[index] = Bars.ClosePrices[index] + _standardDeviation.Result[index];
                         Histogram[index] = Bars.ClosePrices[index] + (_standardDeviation.Result[index] * 1.5);
                         Line[index] = Bars.ClosePrices[index] + (_standardDeviation.Result[index] * 2);
                         Points[index] = Bars.ClosePrices[index] + (_standardDeviation.Result[index] * 2.5);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.PlotType.Line">
            <summary>
            Plot Indicator result as a line.
            </summary>
            <example>
            <code>
            [Output("Main", PlotType = PlotType.Line)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PlotType.Histogram">
            <summary>
            Plot Indicator result as a histogram.
            </summary>
            <example>
            <code>
            [Output("Main", PlotType = PlotType.Histogram)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PlotType.Points">
            <summary>
            Plot Indicator result as a sequence of points.
            </summary>
            <example>
            <code>
            [Output("Main", PlotType = PlotType.Points)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.PlotType.DiscontinuousLine">
            <summary>
            Plot Indicator result as a line with breaks where there are no values in the IndicatorDataSeries.
            </summary>
            <example>
            <code>
            [Output("Main", PlotType = PlotType.DiscontinuousLine)]
            public IndicatorDataSeries Result { get; set; }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Position">
             <summary>
             Taking or opening a position means buying or selling a trading pair.
             </summary>
             <example>
             <code>
             protected override void OnStart()
             {
                 foreach (var position in Positions)
                 {
                     Print("Position Label {0}", position.Label);
                     Print("Position ID {0}", position.Id);
                     Print("Profit {0}", position.GrossProfit);
                     Print("Entry Price {0}", position.EntryPrice);
                 }
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Internals;
            
             namespace cAlgo.Robots
             {
                 /// <summary>
                 /// This sample shows how to execute a position or market order
                 /// </summary>
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PositionExecutionSample : Robot
                 {
                     [Parameter("Direction", DefaultValue = TradeType.Buy)]
                     public TradeType Direction { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Distance (Pips)", DefaultValue = 20, MinValue = 1)]
                     public double DistanceInPips { get; set; }
            
                     [Parameter("Stop (Pips)", DefaultValue = 10, MinValue = 0)]
                     public double StopInPips { get; set; }
            
                     [Parameter("Target (Pips)", DefaultValue = 10, MinValue = 0)]
                     public double TargetInPips { get; set; }
            
                     [Parameter("Label")]
                     public string Label { get; set; }
            
                     [Parameter("Comment")]
                     public string Comment { get; set; }
            
                     [Parameter("Trailing Stop", DefaultValue = false)]
                     public bool HasTrailingStop { get; set; }
            
                     [Parameter("Stop Loss Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
                     public StopTriggerMethod StopLossTriggerMethod { get; set; }
            
                     [Parameter("Async", DefaultValue = false)]
                     public bool IsAsync { get; set; }
            
                     protected override void OnStart()
                     {
                         var volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);
            
                         DistanceInPips *= Symbol.PipSize;
            
                         var stopLoss = StopInPips == 0 ? null : (double?)StopInPips;
                         var takeProfit = TargetInPips == 0 ? null : (double?)TargetInPips;
            
                         TradeResult result = null;
            
                         if (IsAsync)
                             ExecuteMarketOrderAsync(Direction, SymbolName, volumeInUnits, Label, stopLoss, takeProfit, Comment, HasTrailingStop, StopLossTriggerMethod, OnCompleted);
                         else
                             result = ExecuteMarketOrder(Direction, SymbolName, volumeInUnits, Label, stopLoss, takeProfit, Comment, HasTrailingStop, StopLossTriggerMethod);
            
                         if (!IsAsync) OnCompleted(result);
                     }
            
                     private void OnCompleted(TradeResult result)
                     {
                         if (!result.IsSuccessful) Print("Error: ", result.Error);
            
                         Stop();
                     }
                 }
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using System;
             using System.Linq;
            
             namespace cAlgo.Robots
             {
                 /// <summary>
                 /// This sample shows how to close a position
                 /// </summary>
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PositionClosingSample : Robot
                 {
                     [Parameter("Position Comment")]
                     public string PositionComment { get; set; }
            
                     [Parameter("Position Label")]
                     public string PositionLabel { get; set; }
            
                     protected override void OnStart()
                     {
                         Position position = null;
            
                         if (!string.IsNullOrWhiteSpace(PositionComment) &amp;&amp; !string.IsNullOrWhiteSpace(PositionLabel))
                         {
                             position = Positions.FindAll(PositionLabel).FirstOrDefault(iOrder => string.Equals(iOrder.Comment, PositionComment, StringComparison.OrdinalIgnoreCase));
                         }
                         else if (!string.IsNullOrWhiteSpace(PositionComment))
                         {
                             position = Positions.FirstOrDefault(iOrder => string.Equals(iOrder.Comment, PositionComment, StringComparison.OrdinalIgnoreCase));
                         }
                         else if (!string.IsNullOrWhiteSpace(PositionLabel))
                         {
                             position = Positions.Find(PositionLabel);
                         }
            
                         if (position == null)
                         {
                             Print("Couldn't find the position, please check the comment and label");
            
                             Stop();
                         }
            
                         ClosePosition(position);
                     }
                 }
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
             using System;
             using System.Linq;
            
             namespace cAlgo.Robots
             {
                 /// <summary>
                 /// This sample shows how to modify a position
                 /// </summary>
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PositionModificationSample : Robot
                 {
                     [Parameter("Position Comment")]
                     public string PositionComment { get; set; }
            
                     [Parameter("Position Label")]
                     public string PositionLabel { get; set; }
            
                     [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
                     public double StopLossInPips { get; set; }
            
                     [Parameter("Stop Loss Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
                     public StopTriggerMethod StopLossTriggerMethod { get; set; }
            
                     [Parameter("Take Profit (Pips)", DefaultValue = 10)]
                     public double TakeProfitInPips { get; set; }
            
                     [Parameter("Volume (Lots)", DefaultValue = 0.01)]
                     public double VolumeInLots { get; set; }
            
                     [Parameter("Has Trailing Stop", DefaultValue = false)]
                     public bool HasTrailingStop { get; set; }
            
                     protected override void OnStart()
                     {
                         Position position = null;
            
                         if (!string.IsNullOrWhiteSpace(PositionComment) &amp;&amp; !string.IsNullOrWhiteSpace(PositionLabel))
                         {
                             position = Positions.FindAll(PositionLabel).FirstOrDefault(iOrder => string.Equals(iOrder.Comment, PositionComment, StringComparison.OrdinalIgnoreCase));
                         }
                         else if (!string.IsNullOrWhiteSpace(PositionComment))
                         {
                             position = Positions.FirstOrDefault(iOrder => string.Equals(iOrder.Comment, PositionComment, StringComparison.OrdinalIgnoreCase));
                         }
                         else if (!string.IsNullOrWhiteSpace(PositionLabel))
                         {
                             position = Positions.Find(PositionLabel);
                         }
            
                         if (position == null)
                         {
                             Print("Couldn't find the position, please check the comment and label");
            
                             Stop();
                         }
            
                         var positionSymbol = Symbols.GetSymbol(position.SymbolName);
            
                         var stopLossInPrice = position.StopLoss;
            
                         if (StopLossInPips > 0)
                         {
                             var stopLossInPipsPrice = StopLossInPips * positionSymbol.PipSize;
            
                             stopLossInPrice = position.TradeType == TradeType.Buy ? position.EntryPrice - stopLossInPipsPrice : position.EntryPrice + stopLossInPipsPrice;
                         }
            
                         var takeProfitInPrice = position.TakeProfit;
            
                         if (TakeProfitInPips > 0)
                         {
                             var takeProfitInPipsPrice = TakeProfitInPips * positionSymbol.PipSize;
            
                             takeProfitInPrice = position.TradeType == TradeType.Buy ? position.EntryPrice + takeProfitInPipsPrice : position.EntryPrice - takeProfitInPipsPrice;
                         }
            
                         ModifyPosition(position, stopLossInPrice, takeProfitInPrice, HasTrailingStop, StopLossTriggerMethod);
            
                         if (VolumeInLots > 0)
                         {
                             var volumeInUnits = positionSymbol.QuantityToVolumeInUnits(VolumeInLots);
            
                             ModifyPosition(position, volumeInUnits);
                         }
                     }
                 }
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo.Robots
             {
                 /// <summary>
                 /// This sample shows how to handle position events
                 /// </summary>
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class PositionEventsSample : Robot
                 {
                     protected override void OnStart()
                     {
                         Positions.Opened += Positions_Opened;
                         Positions.Closed += Positions_Closed;
                         Positions.Modified += Positions_Modified;
                     }
            
                     private void Positions_Modified(PositionModifiedEventArgs obj)
                     {
                         var modifiedPosition = obj.Position;
                     }
            
                     private void Positions_Closed(PositionClosedEventArgs obj)
                     {
                         var closedPosition = obj.Position;
            
                         var closeReason = obj.Reason;
                     }
            
                     private void Positions_Opened(PositionOpenedEventArgs obj)
                     {
                         var openedPosition = obj.Position;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Position.SymbolCode">
            <summary>
            Symbol code of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.SymbolCode);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.SymbolName">
            <summary>
            Gets the symbol name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Position.TradeType">
            <summary>
            Trade type (Buy/Sell) of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.TradeType);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Volume">
            <summary>
            The amount traded by the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.Volume);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.VolumeInUnits">
            <summary>
            The amount traded by the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.VolumeInUnits);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Id">
            <summary>
            The position's unique identifier.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.Id);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Profit">
            <summary>
            Use GrossProfit instead.
            </summary>
        </member>
        <member name="P:cAlgo.API.Position.GrossProfit">
            <summary>
            Gross profit accrued by the order associated with the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.GrossProfit);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.EntryPrice">
            <summary>
            Entry price of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.EntryPrice);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.StopLoss">
            <summary>
            The Stop Loss level of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.StopLoss);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.TakeProfit">
            <summary>
            The take profit level of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.TakeProfit);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.NetProfit">
            <summary>
            The Net profit of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.NetProfit);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Swap">
            <summary>
            Swap is the overnight interest rate if any, accrued on the position.
            </summary>
            <example>
            <code>
            Print(LastResult.Position.Swap);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Commissions">
            <summary>
            Commission Amount of the request to trade one way (Buy/Sell) associated with this position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.Commissions);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.EntryTime">
            <summary>
            Entry time of trade associated with the position.
            The Timezone used is set in the cBot attribute.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.EntryTime);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Pips">
            <summary>
            Represents the winning or loosing pips of the position.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
            Print(LastResult.Position.Pips);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Label">
            <summary>
            Label can be used to represent the order.
            </summary>
            <example>
            <code>
            var result = ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "myLabel");
            if(result.IsSuccessful)
                Print("Position {0} is open", result.Position.Label);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Comment">
            <summary>
            Comment can be used as a note for the order.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myLabel", 10, 10, 2, "this is a comment");
            if(result.IsSuccessful)
                Print("Position is open: {0}", result.Position.Comment);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.Quantity">
            <summary>
            Quantity of lots traded by the position.
            </summary>
        </member>
        <member name="P:cAlgo.API.Position.HasTrailingStop">
            <summary>
            When HasTrailingStop set to true, the server updates the Stop Loss every time the position moves in your favor.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10, 2, "comment", true);
            Print("Position was opened, has Trailing Stop = {0}", result.Position.HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Position.StopLossTriggerMethod">
            <summary>
            Trigger method for the position's Stop Loss.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyStopLossPrice(System.Nullable{System.Double})">
            <summary>
            Shortcut for Robot.ModifyPosition method to change the Stop Loss.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyTakeProfitPrice(System.Nullable{System.Double})">
            <summary>
            Shortcut for Robot.ModifyPosition method to change the Take Profit.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyStopLossPips(System.Nullable{System.Double})">
            <summary>
            Shortcut for the Robot.ModifyPosition method to change the Stop Loss pips
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyTakeProfitPips(System.Nullable{System.Double})">
            <summary>
            Shortcut for the Robot.ModifyPosition method to change the Take Profit pips
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyTrailingStop(System.Boolean)">
            <summary>
            Shortcut for the Robot.ModifyPosition method to change the Trailing Stop.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.ModifyVolume(System.Double)">
            <summary>
            Shortcut for the Robot.ModifyPosition method to change the VolumeInUnits.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.Reverse">
            <summary>
            Shortcut for the Robot.ReversePosition method to change the direction of the trade.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.Reverse(System.Double)">
            <summary>
            Shortcut for the Robot.ReversePosition method to change the direction of trade and the volume.
            </summary>
        </member>
        <member name="M:cAlgo.API.Position.Close">
            <summary>
            Shortcut for the Robot.ClosePosition method.
            </summary>
        </member>
        <member name="T:cAlgo.API.PositionCloseReason">
            <summary>
            The reason for closing the position.
            </summary>
            <seealso cref="T:cAlgo.API.Position"/>
        </member>
        <member name="F:cAlgo.API.PositionCloseReason.Closed">
            <summary>
            Positions was closed by the trader.
            </summary>
        </member>
        <member name="F:cAlgo.API.PositionCloseReason.StopLoss">
            <summary>
            Position was closed by the Stop Loss.
            </summary>
        </member>
        <member name="F:cAlgo.API.PositionCloseReason.TakeProfit">
            <summary>
            Position was closed by the Take Profit.
            </summary>
        </member>
        <member name="F:cAlgo.API.PositionCloseReason.StopOut">
            <summary>
            Position was closed because the Stop Out level reached.
            </summary>
        </member>
        <member name="T:cAlgo.API.Positions">
            <summary>
            Provides access to methods of the positions collection.
            </summary>
            <seealso cref="T:cAlgo.API.Position"/>
            <example>
            <code>
            int totalPositions = Positions.Count;
            </code>
            </example>
            <example>
            <code>
            Position position =  Positions.Find("myLabel", Symbol, TradeType.Buy);
            </code>
            </example>
            <example>
            <code>
            Position[] positions = Positions.FindAll("myLabel", Symbol, TradeType.Buy);
            </code>
            </example>
            <example>
            <code>
            Positions.Opened += PositionsOnOpened;
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Positions.Item(System.Int32)">
            <summary>
            Finds a position by index.
            </summary>
            <param name="index">the index in the list</param>
            <example>
            <code>
            var position = Positions[0];
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Positions.Count">
            <summary>
            The total number of open positions.
            </summary>
            <example>
            <code>
            int totalPositions = Positions.Count;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.Find(System.String)">
            <summary>
            Find a position by its label.
            </summary>
            <param name="label">Label to search by</param>
            <returns>Position if it exists, null otherwise</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.Find(System.String,System.String)">
            <summary>
            Find a position by its label and symbol name.
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbolName">Symbol name to search by</param>
            <returns>Position if it exists, null otherwise</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", "EURUSD");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.Find(System.String,System.String,cAlgo.API.TradeType)">
            <summary>
            Find a position by its label, symbol name and trade type
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbolName">Symbol name to search by </param>
            <param name="tradeType">Trade type to search by</param>
            <returns>Position if it exists, null otherwise</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", "EURUSD", TradeType.Buy);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.FindAll(System.String)">
             <summary>
             Find all positions with this label.
             </summary>
             <param name="label">Label to search by</param>
             <returns>Array of Positions</returns>
             <example>
             <code>
             var positions = Positions.FindAll("myLabel");
            
             foreach (var position in positions)
             {
                 double? newStopLoss = position.StopLoss ?? 10;
                 ModifyPosition(position, newStopLoss, position.TakeProfit);
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Positions.FindAll(System.String,System.String)">
             <summary>
             Find all positions with this label and symbol name.
             </summary>
             <param name="label">Label to search by</param>
             <param name="symbolName">Symbol name to search by </param>
             <returns>Array of Positions</returns>
             <example>
             <code>
             var positions = Positions.FindAll("myLabel", "EURUSD");
            
             foreach (var position in positions)
             {
                 double? newStopLoss = position.StopLoss ?? 10;
                 ModifyPosition(position, newStopLoss, position.TakeProfit);
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Positions.FindAll(System.String,System.String,cAlgo.API.TradeType)">
             <summary>
             Finds all the positions of this label, symbol name and trade type.
             </summary>
             <param name="label">Label to search by</param>
             <param name="symbolName">Symbol name to search by </param>
             <param name="tradeType">Trade type to search by</param>
             <returns>Array of Positions</returns>
             <example>
             <code>
             var positions = Positions.FindAll("myLabel", "EURUSD", TradeType.Buy);
            
             foreach (var position in positions)
             {
                 double? newStopLoss = position.StopLoss ?? 10;
                 ModifyPosition(position, newStopLoss, position.TakeProfit);
             }
             </code>
             </example>
        </member>
        <member name="E:cAlgo.API.Positions.Closed">
             <summary>
             Occurs each time a position is closed.
             </summary>
             <example>
             <code>
            protected override void OnStart()
             {
                 Positions.Closed += PositionsOnClosed;
             }
             private void PositionsOnClosed(PositionClosedEventArgs args)
             {
                 var position = args.Position;
                 Print("Position closed with {0} profit", position.GrossProfit);
             }
             </code>
             </example>
        </member>
        <member name="E:cAlgo.API.Positions.Opened">
             <summary>
             Occurs each time a position is opened.
             </summary>
             <example>
             <code>
            protected override void OnStart()
             {
                 Positions.Opened += PositionsOnOpened;
             }
             private void PositionsOnOpened(PositionOpenedEventArgs args)
             {
                 Print("Position opened {0}", args.Position.Label);
             }
             </code>
             </example>
        </member>
        <member name="E:cAlgo.API.Positions.Modified">
            <summary>
            Occurs each time a position is modified.
            </summary>
        </member>
        <member name="M:cAlgo.API.Positions.Find(System.String,cAlgo.API.Internals.Symbol)">
            <summary>
            Find a position by its label and symbol.
            </summary>
            <seealso cref="T:cAlgo.API.Position"/>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by</param>
            <returns>Position if it exists, null otherwise</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.Find(System.String,cAlgo.API.Internals.Symbol,cAlgo.API.TradeType)">
            <summary>
            Find a position by its label, symbol and trade type
            </summary>
            <param name="label">Label to search by</param>
            <param name="symbol">Symbol to search by </param>
            <param name="tradeType">Trade type to search by</param>
            <returns>Position if it exists, null otherwise</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Positions.FindAll(System.String,cAlgo.API.Internals.Symbol)">
             <summary>
             Find all positions with this label and symbol.
             </summary>
             <param name="label">Label to search by</param>
             <param name="symbol">Symbol to search by </param>
             <returns>Array of Positions</returns>
             <example>
             <code>
             var positions = Positions.FindAll("myLabel", Symbol);
            
             foreach (var position in positions)
             {
                 double? newStopLoss = position.StopLoss ?? 10;
                 ModifyPosition(position, newStopLoss, position.TakeProfit);
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Positions.FindAll(System.String,cAlgo.API.Internals.Symbol,cAlgo.API.TradeType)">
             <summary>
             Finds all the positions of this label, symbol and trade type.
             </summary>
             <param name="label">Label to search by</param>
             <param name="symbol">Symbol to search by </param>
             <param name="tradeType">Trade type to search by</param>
             <returns>Array of Positions</returns>
             <example>
             <code>
             var positions = Positions.FindAll("myLabel", Symbol, TradeType.Buy);
            
             foreach (var position in positions)
             {
                 double? newStopLoss = position.StopLoss ?? 10;
                 ModifyPosition(position, newStopLoss, position.TakeProfit);
             }
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Key">
            <summary>
                Specifies the possible key values on a keyboard.
            </summary>
        </member>
        <member name="F:cAlgo.API.Key.None">
            <summary>No key pressed. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Cancel">
            <summary>The Cancel key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Back">
            <summary>The Backspace key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Tab">
            <summary>The Tab key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.LineFeed">
            <summary>The Linefeed key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Clear">
            <summary>The Clear key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Enter">
            <summary>The Enter key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Pause">
            <summary>The Pause key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.CapsLock">
            <summary>The Caps Lock key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.KanaMode">
            <summary>The IME Kana mode key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.JunjaMode">
            <summary>The IME Junja mode key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.FinalMode">
            <summary>The IME Final mode key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.HanjaMode">
            <summary>The IME Hanja mode key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Escape">
            <summary>The ESC key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.ImeConvert">
            <summary>The IME Convert key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.ImeNonConvert">
            <summary>The IME NonConvert key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.ImeAccept">
            <summary>The IME Accept key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.ImeModeChange">
            <summary>The IME Mode change request. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Space">
            <summary>The Spacebar key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.PageUp">
            <summary>The Page Up key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.PageDown">
            <summary>The Page Down key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.End">
            <summary>The End key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Home">
            <summary>The Home key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Left">
            <summary>The Left Arrow key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Up">
            <summary>The Up Arrow key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Right">
            <summary>The Right Arrow key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Down">
            <summary>The Down Arrow key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Select">
            <summary>The Select key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Print">
            <summary>The Print key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Execute">
            <summary>The Execute key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.PrintScreen">
            <summary>The Print Screen key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Insert">
            <summary>The Insert key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Delete">
            <summary>The Delete key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Help">
            <summary>The Help key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D0">
            <summary>The 0 (zero) key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D1">
            <summary>The 1 (one) key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D2">
            <summary>The 2 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D3">
            <summary>The 3 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D4">
            <summary>The 4 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D5">
            <summary>The 5 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D6">
            <summary>The 6 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D7">
            <summary>The 7 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D8">
            <summary>The 8 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D9">
            <summary>The 9 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.A">
            <summary>The A key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.B">
            <summary>The B key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.C">
            <summary>The C key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.D">
            <summary>The D key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.E">
            <summary>The E key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F">
            <summary>The F key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.G">
            <summary>The G key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.H">
            <summary>The H key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.I">
            <summary>The I key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.J">
            <summary>The J key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.K">
            <summary>The K key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.L">
            <summary>The L key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.M">
            <summary>The M key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.N">
            <summary>The N key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.O">
            <summary>The O key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.P">
            <summary>The P key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Q">
            <summary>The Q key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.R">
            <summary>The R key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.S">
            <summary>The S key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.T">
            <summary>The T key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.U">
            <summary>The U key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.V">
            <summary>The V key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.W">
            <summary>The W key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.X">
            <summary>The X key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Y">
            <summary>The Y key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Z">
            <summary>The Z key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.LWin">
            <summary>The left Windows logo key (Microsoft Natural Keyboard). </summary>
        </member>
        <member name="F:cAlgo.API.Key.RWin">
            <summary>The right Windows logo key (Microsoft Natural Keyboard). </summary>
        </member>
        <member name="F:cAlgo.API.Key.Apps">
            <summary>The Application key (Microsoft Natural Keyboard). </summary>
        </member>
        <member name="F:cAlgo.API.Key.Sleep">
            <summary>The Computer Sleep key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad0">
            <summary>The 0 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad1">
            <summary>The 1 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad2">
            <summary>The 2 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad3">
            <summary>The 3 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad4">
            <summary>The 4 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad5">
            <summary>The 5 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad6">
            <summary>The 6 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad7">
            <summary>The 7 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad8">
            <summary>The 8 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumPad9">
            <summary>The 9 key on the numeric keypad. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Multiply">
            <summary>The Multiply key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Add">
            <summary>The Add key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Separator">
            <summary>The Separator key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Subtract">
            <summary>The Subtract key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Decimal">
            <summary>The Decimal key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Divide">
            <summary>The Divide key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F1">
            <summary>The F1 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F2">
            <summary>The F2 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F3">
            <summary>The F3 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F4">
            <summary>The F4 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F5">
            <summary>The F5 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F6">
            <summary>The F6 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F7">
            <summary>The F7 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F8">
            <summary>The F8 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F9">
            <summary>The F9 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F10">
            <summary>The F10 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F11">
            <summary>The F11 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F12">
            <summary>The F12 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F13">
            <summary>The F13 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F14">
            <summary>The F14 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F15">
            <summary>The F15 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F16">
            <summary>The F16 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F17">
            <summary>The F17 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F18">
            <summary>The F18 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F19">
            <summary>The F19 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F20">
            <summary>The F20 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F21">
            <summary>The F21 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F22">
            <summary>The F22 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F23">
            <summary>The F23 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.F24">
            <summary>The F24 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NumLock">
            <summary>The Num Lock key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Scroll">
            <summary>The Scroll Lock key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.LeftShift">
            <summary>The left Shift key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.RightShift">
            <summary>The right Shift key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.LeftCtrl">
            <summary>The left CTRL key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.RightCtrl">
            <summary>The right CTRL key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.LeftAlt">
            <summary>The left ALT key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.RightAlt">
            <summary>The right ALT key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.BrowserBack">
            <summary>The Browser Back key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.BrowserForward">
            <summary>The Browser Forward key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.BrowserRefresh">
            <summary>The Browser Refresh key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.BrowserStop">
            <summary>The Browser Stop key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.BrowserSearch">
            <summary>The Browser Search key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.BrowserFavorites">
            <summary>The Browser Favorites key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.BrowserHome">
            <summary>The Browser Home key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.VolumeMute">
            <summary>The Volume Mute key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.VolumeDown">
            <summary>The Volume Down key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.VolumeUp">
            <summary>The Volume Up key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.MediaNextTrack">
            <summary>The Media Next Track key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.MediaPreviousTrack">
            <summary>The Media Previous Track key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.MediaStop">
            <summary>The Media Stop key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.MediaPlayPause">
            <summary>The Media Play Pause key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.LaunchMail">
            <summary>The Launch Mail key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.SelectMedia">
            <summary>The Select Media key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.LaunchApplication1">
            <summary>The Launch Application1 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.LaunchApplication2">
            <summary>The Launch Application2 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Oem1">
            <summary>The OEM 1 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemPlus">
            <summary>The OEM Addition key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemComma">
            <summary>The OEM Comma key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemMinus">
            <summary>The OEM Minus key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemPeriod">
            <summary>The OEM Period key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Oem2">
            <summary>The OEM 2 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Oem3">
            <summary>The OEM 3 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.AbntC1">
            <summary>The ABNT_C1 (Brazilian) key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.AbntC2">
            <summary>The ABNT_C2 (Brazilian) key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Oem4">
            <summary>The OEM 4 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Oem5">
            <summary>The OEM 5 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Oem6">
            <summary>The OEM 6 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Oem7">
            <summary>The OEM 7 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Oem8">
            <summary>The OEM 8 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Oem102">
            <summary>The OEM 102 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.ImeProcessed">
            <summary>A special key masking the real key being processed by an IME. </summary>
        </member>
        <member name="F:cAlgo.API.Key.System">
            <summary>A special key masking the real key being processed as a system key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemAttn">
            <summary>The OEM ATTN key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemFinish">
            <summary>The OEM FINISH key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemCopy">
            <summary>The OEM COPY key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemAuto">
            <summary>The OEM AUTO key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemEnlw">
            <summary>The OEM ENLW key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemBackTab">
            <summary>The OEM BACKTAB key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Attn">
            <summary>The ATTN key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.CrSel">
            <summary>The CRSEL key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.ExSel">
            <summary>The EXSEL key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.EraseEof">
            <summary>The ERASE EOF key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Play">
            <summary>The PLAY key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Zoom">
            <summary>The ZOOM key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.NoName">
            <summary>A constant reserved for future use. </summary>
        </member>
        <member name="F:cAlgo.API.Key.Pa1">
            <summary>The PA1 key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.OemClear">
            <summary>The OEM Clear key. </summary>
        </member>
        <member name="F:cAlgo.API.Key.DeadCharProcessed">
            <summary>The key is used with another key to create a single combined character.</summary>
        </member>
        <member name="T:cAlgo.API.ModifierKeys">
            <summary>
            Specifies the set of modifier keys.
            </summary>
        </member>
        <member name="F:cAlgo.API.ModifierKeys.None">
            <summary>No modifiers are pressed. </summary>
        </member>
        <member name="F:cAlgo.API.ModifierKeys.Alt">
            <summary>The ALT key. </summary>
        </member>
        <member name="F:cAlgo.API.ModifierKeys.Control">
            <summary>The CTRL key. </summary>
        </member>
        <member name="F:cAlgo.API.ModifierKeys.Shift">
            <summary>The SHIFT key. </summary>
        </member>
        <member name="T:cAlgo.API.TimeFrame">
             <summary>
                 Contains supported timeframe values.
             </summary>
             <example>
                 <code>
             if (TimeFrame  &lt; TimeFrame.Daily)
                 Print("Intraday Trading");
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to get a time frame from user via parameters and the get that time frame bars
                 // Also you can use the pre-defiend time frames
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TimeFrameSample : Indicator
                 {
                     // Getting time frame via a parameter from user
                     [Parameter("Time Frame", DefaultValue = "Daily")]
                     public TimeFrame UserSelectedTimeFrame { get; set; }
            
                     protected override void Initialize()
                     {
                         Print("Name: ", UserSelectedTimeFrame.Name, " | Short Name: ", UserSelectedTimeFrame.ShortName);
            
                         // Getting another time frame bars data, using user selected time frame
                         var barsBasedOnUserSelectedTimeFrame = MarketData.GetBars(UserSelectedTimeFrame);
                         // Getting another time frame bars data, using pre-defined TimeFrames
                         var barsBasedOnOtherTimeFrame = MarketData.GetBars(TimeFrame.Day2);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.TimeFrame.Equals(cAlgo.API.TimeFrame)">
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.TimeFrame.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.TimeFrame.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:cAlgo.API.TimeFrame.ToString">
            <inheritdoc />
        </member>
        <member name="T:cAlgo.API.Requests.LimitOrderRequest">
            <summary>
            Creates a limit order request that can be used as a parameter 
            in the Trade.Send method in order to send a limit order request to the server.
            </summary>
            <example>
            <code>
            double price = Symbol.Ask + 10*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            int volume = 1000000;
            
            var request = new LimitOrderRequest(sell,volume,price);
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Requests.LimitOrderRequest.#ctor(cAlgo.API.TradeType,System.Int32,System.Double)">
            <summary>
            LimitOrderRequest constructor
            </summary>
            <param name="tradeType">Buy or Sell</param>
            <param name="volume">Amount of Trade</param>
            <param name="targetPrice">The price the order should be filled at</param>
            <example>
            <code>
            double price = Symbol.Ask + 10*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            int volume = 1000000;
            DateTime? expiration = DateTime.Now.AddMinutes(60);
            double? stopLoss = price + 10*Symbol.PipSize;
            double? takeProfit = price - 20*Symbol.PipSize;
            
            var request = new LimitOrderRequest(sell, volume, price)
                                {
                                    Expiration = expiration,
                                    Label = "123456",
                                    StopLoss = stopLoss,
                                    TakeProfit = takeProfit
                                 };
            
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Requests.MarketOrderRequest">
            <summary>
            Creates a market order request that can be used as a parameter in the Trade.Send() method
            in order to send a market order request to the server.
            </summary>
            <remarks>
            MarketOrderRequest implements Request interface. 
            Similar to Trade.CreateBuyMarketOrder/CreateSellMarketOrder
            </remarks>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           Label = "Robot 1",
                           SlippagePips = 0,
                           StopLossPips = 10,
                           TakeProfitPips = 20
                       };
            Trade.Send(request); 
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Requests.MarketOrderRequest.#ctor(cAlgo.API.TradeType,System.Int32)">
            <summary>
            MarketOrderRequest constructor
            </summary>
            <param name="tradeType">Buy or Sell</param>
            <param name="volume">Amount of trade</param>
            <example>
            <code>
            TradeType tradeType = TradeType.Sell;
            int volume = 10000;
            
            var request = new MarketOrderRequest(tradeType, volume)
                       {
                           Label = "market order",
                           SlippagePips = 1,
                           StopLossPips = 10,
                           TakeProfitPips = 20
                       };
            Trade.Send(request); 
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.TradeType">
            <summary>
            The type of trade. Buy/Sell.
            </summary>
            <example>
            <code>
            TradeType tradeType = TradeType.Sell;
            var request = new MarketOrderRequest(tradeType, 10000);
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.Volume">
            <summary>
            The amount of the trade
            </summary>
            <example>
            <code>
            int volume = 10000;
            TradeType tradeType = TradeType.Sell;
            var request = new MarketOrderRequest(tradeType, volume);
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.Label">
            <summary>
            Optional propery Label can be used to identify the position created with this order.
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           Label = "Robot 1"
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.SlippagePips">
            <summary>
            Optional property SlippagePips may be used to set the market range pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           SlippagePips = 1
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.StopLossPips">
            <summary>
            Optional property StopLossPips may be used to set the stop loss in pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           StopLossPips = 10
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.TakeProfitPips">
            <summary>
            Optional property TakeProfitPips may be used to set the take profit in pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            var request = new MarketOrderRequest(sell, 10000)
                       {
                           TakeProfitPips = 10
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.MarketOrderRequest.Symbol">
             <summary>
             Optional property Symbol may be used to create an order for a different symbol
             </summary>
             <example>
             <code>
             var request = new MarketOrderRequest(TradeType.Buy, 10000)
                        {
                            Symbol = "USDCAD"
                        };
             Trade.Send(request);
             </code>
             </example>
             <example>
             <code>
             var Symbol usdcad = MarketData.GetSymbol("USDCAD");
             var request = new MarketOrderRequest(TradeType.Buy, 10000)
                     {
                         Symbol = usdcad 
                     };
            
             </code>
             </example>
        </member>
        <member name="T:cAlgo.API.Requests.PendingOrderRequest">
            <summary>
            PendingOrderRequest implements Request interface
            LimitOrderRequest and StopOrderRequest are derived classes 
            of the PendingOrderRequest abstract class.
            </summary>
            <remarks>
            See LimitOrderRequest and StopOrderRequest classes for more examples.
            </remarks>
            <example>
            <code>
            
            double price = Symbol.Ask + 10*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            int volume = 1000000
            
            PendingOrderRequest request = 
                    new LimitOrderRequest(sell, volume, price);
            
            Trade.Send(request);
            </code>
            </example>
            <example>
            <code>
            TradeType buy = TradeType.Buy;
            PendingOrderRequest request2 = 
                    new StopOrderRequest(buy, 10000, price);
            
            Trade.Send(request2);
            
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Requests.PendingOrderRequest.#ctor(cAlgo.API.PendingOrderType,cAlgo.API.TradeType,System.Int32,System.Double)">
            <summary>
            PendingOrderRequest constructor
            </summary>
            <remarks>
            Protected constructor. See constructors of 
            LimitOrderRequest and StopOrderRequest.
            </remarks>
            <param name="pendingOrderType">The type of order. Limit/Stop</param>
            <param name="tradeType">The type of trade. Buy/Sell</param>
            <param name="volume">The trade amount</param>
            <param name="targetPrice">The price at which the order should be created</param>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.PendingOrderType">
            <summary>
            The type of order. Limit or Stop.
            </summary>
            <example>
            <code>
            
            double price = Symbol.Ask + 10 * Symbol.PipSize;
            DateTime? expiration = DateTime.Now.AddMinutes(30);
            
            protected override void OnStart()
            {	 
                var request = new CreateRequest(PendingOrderType.Stop);          
                Trade.Send(request);
            }
            
            private PendingOrderRequest CreateRequest(PendingOrderType type)
            {
                PendingOrderRequest request = null;
                switch (type)
                {
                    case PendingOrderType.Stop:
                        request = new StopOrderRequest(TradeType.Buy, 10000, price)
                        {
                            Expiration = expiration,
                            Label = "Robot 1",
                            StopLoss = price - 30 * Symbol.PipSize,
                            TakeProfit = price + 50 * Symbol.PipSize
                        };
                        break;
                    case PendingOrderType.Limit:
                        request = new LimitOrderRequest(TradeType.Sell, 10000, price)
                        {
                            Expiration = expiration,
                            Label = "Robot 1",
                            StopLoss = price + 30 * Symbol.PipSize,
                            TakeProfit = price - 30 * Symbol.PipSize
                         };
                         break;
                }
            
                return request;
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.TradeType">
            <summary>
            The type of trade. Buy or Sell.
            </summary>
            <example>
            <code>
            // declare trade type variable and price
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid+Symbol.PipSize;
            // create a sell limit order request
            var request = new LimitOrderRequest(sell, 10000, price);
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.Volume">
            <summary>
            The trade amount
            </summary>
            <example>
            <code>
            // variables to pass to constructor
            int volume = 10000;
            double price = Symbol.Ask+10*Symbol.PipSize;
            TradeType buy = TradeType.Buy;
            // create a buy stop order request
            var request = new StopOrderRequest(buy, volume, price);
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.TargetPrice">
            <summary>
            The target price for the order. 
            </summary>
            <remarks>
            The definition of target price depends on the order type.
            For Limit Orders the target price is the maximum or minimum 
            amount you're willing to pay or receive and for
            For Stop Orders target price refers to the threshold at which the order should become a market order.
            Since market orders guarantee execution but not price, once a stop order passes the threshold and becomes
            a market order it will be executed at the current market price.
            </remarks>
            <example>
            <code>
            // Declare and set the target price
            double price = Symbol.Ask-10*Symbol.PipSize;
            // create a limit order request to buy 
             var request = new LimitOrderRequest(TradeType.Buy, 10000, price);
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.Label">
            <summary>
            Property Label can be used to identify the order as well as the position created by this order. Optional.
            </summary>
            <example>
            <code>
            double price = Symbol.Bid+20*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            // create a limit order request
            var request = new LimitOrderRequest(sell, 10000, price)
                                {
                                    Label = "Limit Order"
                                };
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.Expiration">
            <summary>
            Property Expiration if specified, represents the date and time sthe order should expire.
            </summary>
            <example>
            <code>
            double price = Symbol.Bid+20*Symbol.PipSize;
            TradeType sell = TradeType.Sell;
            DateTime? expiration = Server.Time.AddMinutes(60);
            
            var request = new StopOrderRequest(sell, 10000, price)
                               {
                                    Expiration = expiration
                               };
            // Send the stop order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.StopLoss">
            <summary>
            Property StopLoss is the price that the position will close with loss. Optional.
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid-20*Symbol.PipSize;
            // create a stop order request
            var request = new StopOrderRequest(sell, 10000, price)
                             {
                                StopLoss = price+20*Symbol.PipSize;
                             };
            // Send the stop order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.TakeProfit">
            <summary>
            Property TakeProfit is the price that the position will close with profit. Optional.
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid+20*Symbol.PipSize;
            // create a limit order request
            var request = new LimitOrderRequest(sell, 10000, price)
                              {
                                 TakeProfit = price-20*Symbol.PipSize;
                              };
            // Send the limit order request to the server
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.StopLossPips">
            <summary>
            StopLossPips may be used to set the Stop Loss in pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid+20*Symbol.PipSize;
            
            var request = new LimitOrderRequest(sell, 10000, price)
                       {
                           StopLossPips = 10
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.TakeProfitPips">
            <summary>
            TakeProfitPips may be used to set the Take Profit in pips
            </summary>
            <example>
            <code>
            TradeType sell = TradeType.Sell;
            double price = Symbol.Bid+20*Symbol.PipSize;
            
            var request = new LimitOrderRequest(sell, 10000, price)
                       {
                           TakeProfitPips = 10
                       };
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Requests.PendingOrderRequest.Symbol">
            <summary>
            
            </summary>
            <example>
            <code>
            
            var Symbol usdcad = MarketData.GetSymbol("USDCAD");
            var request = new LimitOrderRequest(TradeType.Sell, 10000, Price)
                       {
                           Symbol = usdcad
                       };
            
            Trade.Send(request);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Requests.Request">
            <summary>
            A Request can be used as a parameter in the Trade.Send method.
            Used to send a trade order request to the server.
            </summary>
            <remarks>
            PendingOrderRequest abstract class and MarketOrderRequest class implement the Request interface
            </remarks>
            <example>
            <code>
            Request request = new MarketOrderRequest(TradeType.Buy, 10000)
                                 {  
                                    Label = "123", 
                                    SlippagePips = 0, 
                                    StopLossPips = 10, 
                                    TakeProfitPips = 10
                                };
            Trade.Send(request);
            
            var price = Symbol.Ask;
            var stopLoss = price - StopLossPips * Symbol.PipSize;
            var takeProfit = price + TakeProfitPips * Symbol.PipSize;
            Request request2 = new PendingOrderRequest(TradeType.Buy, 10000, price)
                                 {  
                                    Label = "Robot 1", 
                                    StopLoss = 10, 
                                    TakeProfit = 10
                                };
            Trade.Send(request2);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Requests.StopOrderRequest">
            <summary>
            Creates a stop order request that can be used as a parameter in the Trade.Send method
            in order to send a stop order request to the server.
            </summary>
            <example>
            <code>
            double price = Symbol.Ask + 10*Symbol.PipSize;
            TradeType buy = TradeType.Buy;
            
            // create a stop order request
            var request = new StopOrderRequest(buy, 10000, price);
            // Send the stop order request to the server
            Trade.Send(request); 
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Requests.StopOrderRequest.#ctor(cAlgo.API.TradeType,System.Int32,System.Double)">
            <summary>
            StopOrderRequest constructor
            </summary>
            <param name="tradeType">Trade type is either Buy or Sell.</param>
            <param name="volume">The trade amount</param>
            <param name="targetPrice">The target price for the order</param>
            <example>
            <code>
            TradeType buy = TradeType.Buy;
            double price = Symbol.Ask + 10 * Symbol.PipSize;
            DateTime? expiration = DateTime.Now.AddMinutes(30);
            double? stopLoss = targetPrice - 30 * Symbol.PipSize;
            double? takeProfit = targetPrice + 50 * Symbol.PipSize;
            
            // create a stop order request
            var request = new StopOrderRequest(buy, 10000, price)
                                            {
                                                Expiration = expiration,
                                                Label = "Robot 1",
                                                StopLoss = stopLoss,
                                                TakeProfit = takeProfit
                                            };
            
            // Send the stop order request to the server
            Trade.Send(request);
            
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.Robot">
             <summary>
             Base class for all cBots. 
             </summary>
             <remarks>
             Provides a convenient framework for creating cBots including methods to create, modify, cancel orders and close positions, methods triggered by each tick and each bar, access to built-in Indicators and more.
             </remarks>
             <example>
             <code>
             namespace cAlgo.Robots
             {
             [Robot]
             public class myCBot : Robot
             {
             
                 protected override void OnStart()
                 {
                     //This method is called when the cBot is being started, once.
                 }
                 
                 protected override void OnBar()
                 {
                     // Called on each incoming Bar.
                 }
             
                 protected override void OnTick()
                 {
                     // Called on each incoming tick.
             
                 }
                 
                 protected override void OnError(Error error)
                 {
                     Print("There has been an Error");
                 }
             
                 protected override void OnStop()
                 {
                     //This method is called when the cBot is being stoped.
                 }
            }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Robot.#ctor">
            <summary>
            Robot class constructor
            </summary>
        </member>
        <member name="M:cAlgo.API.Robot.OnStart">
            <summary>
            Called when cBot is being started. Override this method to initialize cBot, create nested indicators, etc.
            </summary>
            <example>
            <code>
            protected override void OnStart()
            {
                //This method is invoked when the cBot is started.
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.OnStop">
            <summary>
            Called when cBot is stopped.
            </summary>
            <example>
            <code>
            protected override void OnStop()
            {
                //This method is called when the cBot is stopped
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.OnTick">
            <summary>
            Called on each incoming market tick.
            </summary>
            <example>
            <code>
            protected override void OnTick()
            {
                // Place cBot's Logic here.
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.OnBar">
            <summary>
            Called on each incoming Bar.
            </summary>
            <example>
            <code>
            protected override void OnBar()
            {
                //Place cBot's Logic here.
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.OnError(cAlgo.API.Error)">
            <summary>
            Called if there is an error executing a trade operation.
            </summary>
            <param name="error">Error description.</param>
            <example>
            <code>
            protected override void OnError(Error error)
            {
                Print("There has been an Error");
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Robot.Account">
            <summary>
            Contains all Account information
            </summary>
            <example>
            <code>
            double balance = Account.Balance;
            string currency = Account.Currency;
            double equity = Account.Equity;
            double freemargin = Account.FreeMargin;
            double margin = Account.Margin;
            double? marginlevel = Account.MarginLevel;
            int leverage = Account.Leverage;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.Stop">
            <summary>
            Stops the cBot. cBot will be completely stopped and will not send/receive any signals.
            </summary>
            <example>
            <code>
            // Will stop the cBot if the balance of the account goes under 1000
            if(Account.Balance &#60; 1000)
            {
                Stop();
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.Robot.LastResult">
            <summary>
            The latest trade result
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 20000, null, 10, null);
            if(LastResult.IsSuccessful)
                Print(LastResult.Position.StopLoss);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ToString">
            <summary>
            Returns the cBot class name
            </summary>
            <returns></returns>
            <example>
            <code>
            protected override void OnStart()
            {
                Print(ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.GetFitness(cAlgo.API.GetFitnessArgs)">
            <summary>
            Override this method to provide custom fitness value for Optimization
            </summary>
            <returns>Fitness value of your cBot</returns>
        </member>
        <member name="M:cAlgo.API.Robot.OnPositionOpened(cAlgo.API.Position)">
            <summary>
            Obsolete. Subscribe to Positions.Opened event instead
            </summary>
        </member>
        <member name="M:cAlgo.API.Robot.OnPositionClosed(cAlgo.API.Position)">
            <summary>
            Obsolete. Subscribe to Positions.Closed event instead
            </summary>
        </member>
        <member name="M:cAlgo.API.Robot.OnPendingOrderCreated(cAlgo.API.PendingOrder)">
            <summary>
            Obsolete. Subscribe to PendingOrders.Created event instead
            </summary>
        </member>
        <member name="P:cAlgo.API.Robot.Trade">
            <summary>
            Accessor to the trading operations API. 
            </summary>
            <example>
            <code>
            Trade.Close(position)
            </code>
            </example>
            <example>
            <code>
            Trade.CreateBuyLimitOrder(Symbol,100000,Symbol.Bid,Symbol.Bid-20*Symbol.PipSize,
            Symbol.Ask+30*Symbol.PipSize,null);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateBuyMarketOrder(Symbol,100000);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateBuyStopOrder(Symbol,100000,Symbol.Ask+5*Symbol.PipSize,Symbol.Ask-20*Symbol.PipSize,
            Symbol.Ask+30*Symbol.PipSize,null);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateMarketOrder(TradeType.Buy,Symbol,100000);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateSellLimitOrder(Symbol,100000,Symbol.Ask,Symbol.Ask+20*Symbol.PipSize,
            Symbol.Ask-30*Symbol.PipSize,null);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateSellMarketOrder(Symbol,100000);
            </code>
            </example>
            <example>
            <code>
            Trade.CreateSellStopOrder(Symbol,100000,Symbol.Bid-5*Symbol.PipSize,Symbol.Ask+20*Symbol.PipSize,
            Symbol.Ask-30*Symbol.PipSize,null);
            </code>
            </example>
            <example>
            <code>
            Trade.DeletePendingOrder(Account.PendingOrders[i]);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double)">
            <summary>
                Place a Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String)">
            <summary>
                Place a Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
                Place a Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
                Place a Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
                Place a Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
                <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
                <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
                <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
                <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
                Place a Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
                <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
                <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
                <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
                <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
            <example>
                <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
                Place a Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
                <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
                <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
                <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
                <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
            <example>
                <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
            </code>
            </example>
            <example>
                <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
                <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
                <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">The action when the position closes</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
                <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
                <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
                <code> 
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">The action when the position closes</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
                <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
                <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
                <code> 
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
            </code>
            </example>
            <example>
                <code> 
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Place a Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 100000, 
                            Symbol.Bid - 2*Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 200000, 
                        Symbol.Bid - 2*Symbol.PipSize, "myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order");
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
            </code>
            </example>
            <example>
            <code>
            double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
            DateTime expiry = DateTime.Now.AddMinutes(30);
            PlaceLimitOrder(TradeType.Buy, Symbol, 10000, 
                            targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">The action when the position closes</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code> 
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Target price (or better) at which the order is filled</param>
            <param name="label">Label that represents the order</param>
            <param name="stopLossPips">Stop loss in pips from target price</param>
            <param name="takeProfitPips">Take profit in pips from target price</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">The action when the position closes</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel");
            </code>
            </example>
            <example>
            <code>
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
            }
            private void LimitOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code> 
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
            </code>
            </example>
            <example>
            <code> 
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, 
                                Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double)">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String)">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">order comment</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, 
            "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">Order comment</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", HasTrailingStop, OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", HasTrailingStop, OnOpened);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, 
                               "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="comment">order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="comment">order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="comment">order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Execute a Market Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="comment">order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, 
            "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="comment">Order comment</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="comment">Order comment</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", HasTrailingStop, OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", HasTrailingStop, OnOpened);
            </code>
            </example>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, 
                               "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double)">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips"></param>
            <param name="basePrice"></param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String)">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips"></param>
            <param name="basePrice"></param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips"></param>
            <param name="basePrice"></param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="basePrice"></param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">order comment</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="basePrice"></param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
                Execute a Market Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips">market range (slippage) pips</param>
            <param name="basePrice"></param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, 
            "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="basePrice"></param>
            <param name="marketRangePips"></param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips"></param>
            <param name="basePrice"></param>
            <param name="label">Label representing the order</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips"></param>
            <param name="basePrice"></param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="basePrice"></param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">Order comment</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="basePrice"></param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", HasTrailingStop, OnOpened);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Execute a market order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="marketRangePips">Market range (slippage) pips</param>
            <param name="basePrice"></param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Event raised when position is opened</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", OnOpened);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, 
                                    "order comment", HasTrailingStop, OnOpened);
            </code>
            </example>
            <example>
                <code>
            ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, 
                               "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.CancelPendingOrder(cAlgo.API.PendingOrder)">
            <summary>
            Cancel a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                CancelPendingOrder(order);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Int64,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="volume">New volume</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double)">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64)">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume"></param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double)">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume"></param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean)">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, hasTrailingStop);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime, 10000, hasTrailingStop, StopTriggerMethod.Trade);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
            if (order.StopLossPips == null)
                ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                   order.ExpirationTime, 5, hasTrailingStop);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double})">
            <summary>
            Modify a Pending Order
            </summary>
            <param name="pendingOrder">Pending Order which is affected</param>
            <param name="targetPrice">New target price</param>
            <param name="stopLossPips">New stop loss pips value from target price</param>
            <param name="takeProfitPips">New take profit pips value from target price</param>
            <param name="expirationTime">New order expiration time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
            if (order.StopLossPips == null)
                ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                   order.ExpirationTime, 5, hasTrailingStop);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
                                       order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade, 2);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.CancelPendingOrderAsync(cAlgo.API.PendingOrder,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Cancel a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to cancel</param>
            <param name="callback">Method that is called when pending order is cancelled</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            if (PendingOrders.Count > 0)           
            {
                var pendingOrder = PendingOrders[0];
                CancelPendingOrderAsync(pendingOrder);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Int64,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="volume">New volume</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when order is modified</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, 5, hasTrailingStop);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify a Pending Order in asynchronous execution mode
            </summary>
            <param name="pendingOrder">Pending Order to modify</param>
            <param name="targetPrice">New target price at which the order becomes market order</param>
            <param name="stopLossPips">New stop loss</param>
            <param name="takeProfitPips">New take profit</param>
            <param name="expirationTime">New expiry date and time</param>
            <param name="volume">New volume</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="callback">Method that is called when order is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            foreach (var order in PendingOrders)
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, hasTrailingStop);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, hasTrailingStop, StopTriggerMethod.Trade);                
            }
            </code>
            </example>
            <example>
            <code>
            bool hasTrailingStop = false;
            foreach (var order in PendingOrders) 
            {
                if (order.StopLossPips == null)
                    ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
                                    order.ExpirationTime, hasTrailingStop, 5, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);                
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ReversePosition(cAlgo.API.Position)">
            <summary>
            Modify the direction of trade at position 
            </summary>
            <param name="position">Position which is affected</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                ReversePosition(position);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Double)">
            <summary>
            Modify the volume of a position
            </summary>
            <param name="position">Position which is affected</param>
            <param name="volume">Volume (in units) of Trade</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                ModifyPosition(position, 20000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ReversePosition(cAlgo.API.Position,System.Double)">
            <summary>
            Modify the direction of trade and volume of a position
            </summary>
            <param name="position">Position which is affected</param>
            <param name="volume">Volume (in units) of Trade</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                ReversePosition(position, 20000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Modify the protection of a position 
            </summary>
            <param name="position">Position which is affected</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfit">New take profit price</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPosition(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Modify the protection of a position 
            </summary>
            <param name="position">Position which is affected</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfit">New take profit price</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPosition(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
                Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Modify the protection of a position 
            </summary>
            <param name="position">Position which is affected</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfit">New take profit price</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPosition(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
                Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null )
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop, StopTriggerMethod.Opposite);
                Print("Position was modified, stop loss trigger method = {0}", result.Position.StopLossTriggerMethod);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePosition(cAlgo.API.Position)">
            <summary>
            Close a position
            </summary>
            <param name="position">Position to close</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePosition(cAlgo.API.Position,System.Int64)">
            <summary>
            Close a position
            </summary>
            <param name="position">Position to close</param>
            <param name="volume">Volume which is closed</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ClosePosition(position);
            </code>
            </example>
            <example>
            <code>
            if (position.Volume >= 20000)
                ClosePosition(position, 10000);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePosition(cAlgo.API.Position,System.Double)">
            <summary>
            Close a position
            </summary>
            <param name="position">Position to close</param>
            <param name="volume">Volume which is closed</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            ClosePosition(position);
            </code>
            </example>
            <example>
            <code>
            if (position.Volume >= 20000)
                ClosePosition(position, 10000);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Close a position in asynchronous execution mode
            </summary>
            <param name="position">The position to close</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePositionAsync(cAlgo.API.Position,System.Int64,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Close a position in asynchronous execution mode
            </summary>
            <param name="position">The position to close</param>
            <param name="volume">The volume to close</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ClosePositionAsync(position);
            </code>
            </example>
            <example>
            <code>
            if (position.Volume >= 20000)
                ClosePositionAsync(position, 10000);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ClosePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Close a position in asynchronous execution mode
            </summary>
            <param name="position">The position to close</param>
            <param name="volume">The volume to close</param>
            <param name="callback">The action when the position closes</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            ClosePositionAsync(position);
            </code>
            </example>
            <example>
            <code>
            if (position.Volume >= 20000)
                ClosePositionAsync(position, 10000);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ReversePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="callback">Method that is called when position is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                ReversePositionAsync(position, TradeType.Sell);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when position is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                ModifyPositionAsync(position, 20000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ReversePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="volume">New volume</param>
            <param name="callback">Method that is called when position is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                ReversePositionAsync(position, 20000);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfit">New take profit price</param>
            <param name="callback">Method that is called when position is modified</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPositionAsync(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfit">New take profit price</param>
            <param name="callback">Method that is called when position is modified</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPositionAsync(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Modify Position in asynchronous execution mode
            </summary>
            <param name="position">Position to modify</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfit">New take profit price</param>
            <param name="callback">Method that is called when position is modified</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                ModifyPositionAsync(position, stopLoss,  takeProfit);
            }
            </code>
            </example>
            <example>
            <code>
            var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
            if (position != null)
            {
                double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
                double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
                bool hasTrailingStop = true;
                ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double)">
            <summary>
                Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String)">
            <summary>
                Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
                Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
                Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
                Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
                Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
                Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
            <summary>
                Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
            <summary>
            Place a Stop Limit Order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place Stop Limit order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price (or better) at which order is filled</param>
            <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double)">
            <summary>
                Place a stop order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String)">
            <summary>
                Place a stop order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
                Place a stop order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
                Place a stop order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
                Place a stop order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
                <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
                <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
                Place a stop order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
                <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
                <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
            <example>
                <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
                Place a stop order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
                <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
                <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
            <example>
                <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
            </code>
            </example>
            <example>
                <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
            <summary>
                Place a stop order
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume (in units) of trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <returns>Trade Result</returns>
            <example>
                <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
                <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
                <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
            <example>
                <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
            </code>
            </example>
            <example>
                <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Action when order is placed</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
            }
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, 
                                    "order comment", hasTrailingStop, StopTriggerMethod.Trade);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with stop trigger method: {0}", tradeResult.PendingOrder.StopTriggerMethod);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
            <summary>
                Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbolName">Symbol name of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <param name="callback">Action when order is placed</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
                <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
                <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
                <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
            }
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, 
                                    "order comment", hasTrailingStop, StopTriggerMethod.Trade);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with stop loss trigger method: {0}", tradeResult.PendingOrder.StopLossTriggerMethod);
            }
            </code>
            </example>
            <example>
                <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                StopTriggerMethod stopLossTriggerMethod = StopTriggerMethod.Trade;
                StopTriggerMethod stopOrderTriggerMethod = StopTriggerMethod.Trade;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, 
                                    "order comment", hasTrailingStop, stopLossTriggerMethod, stopOrderTriggerMethod);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with stop order trigger method: {0}", tradeResult.PendingOrder.StopOrderTriggerMethod);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <returns>Trade Result</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
            <summary>
            Place a stop order
            </summary>
            <param name="tradeType">Direction of Trade</param>
            <param name="symbol">Symbol of Trade</param>
            <param name="volume">Volume (in units) of Trade</param>
            <param name="targetPrice">Price at which order becomes a market order</param>
            <param name="label">Representing label</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry time</param>
            <param name="comment">Order comment</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <returns>Trade Result</returns>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask, 
                            "myStopOrder");
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20);
            </code>
            </example>
            <example>
            <code>
            DateTime expiration = Server.Time.AddHours(1);
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, expiration);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment");
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
            </code>
            </example>
            <example>
            <code>        
            PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask, 
                            "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Int64,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="callback">Action when order is placed</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="callback">Action when order is placed</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, 
                                    "order comment", hasTrailingStop, StopTriggerMethod.Trade);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with stop trigger method: {0}", tradeResult.PendingOrder.StopTriggerMethod);
            }
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,cAlgo.API.Internals.Symbol,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
            <summary>
            Place stop order in asynchronous execution mode
            </summary>
            <param name="tradeType">Direction of trade</param>
            <param name="symbol">Symbol of trade</param>
            <param name="volume">Volume of trade</param>
            <param name="targetPrice">Price at which the order becomes market order</param>
            <param name="label">Label representing the order</param>
            <param name="stopLossPips">Stop loss in pips</param>
            <param name="takeProfitPips">Take profit in pips</param>
            <param name="expiration">Order expiry date and time</param>
            <param name="comment">Order comment</param>
            <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
            <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
            <param name="callback">Action when order is placed</param>
            <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
            <returns>Trade Operation</returns>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
            </code>
            </example>
            <example>
            <code>
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
            </code>
            </example>
            <example>
            <code>
            DateTime? expiry = DateTime.Now.AddHours(1);
            PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                        Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, 
                                    "order comment", hasTrailingStop, StopTriggerMethod.Trade);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with stop loss trigger method: {0}", tradeResult.PendingOrder.StopLossTriggerMethod);
            }
            </code>
            </example>
            <example>
            <code>
            protected override void OnStart()
            {
                bool hasTrailingStop = true;
                StopTriggerMethod stopLossTriggerMethod = StopTriggerMethod.Trade;
                StopTriggerMethod stopOrderTriggerMethod = StopTriggerMethod.Trade;
                DateTime? expiry = DateTime.Now.AddHours(1);
                PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, 
                                    Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, 
                                    "order comment", hasTrailingStop, stopLossTriggerMethod, stopOrderTriggerMethod);
            }
            private void StopOrderOnPlaced(TradeResult tradeResult)
            {
                Print("Stop order placed with stop order trigger method: {0}", tradeResult.PendingOrder.StopOrderTriggerMethod);
            }
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.RoundingMode">
             <summary>
             The rounding mode for normalizing trade volume.
             </summary>
             <example>
             <code>
             volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to normalize volume based on different rounding modes
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class NormalizingVolumeSample : Indicator
                 {
                     [Parameter("Volume Unit", DefaultValue = VolumeUnit.Units)]
                     public VolumeUnit VolumeUnit { get; set; }
            
                     [Parameter("Volume Amount", DefaultValue = 0.01)]
                     public double VolumeAmount { get; set; }
            
                     [Parameter("Rounding Mode", DefaultValue = RoundingMode.ToNearest)]
                     public RoundingMode RoundingMode { get; set; }
            
                     protected override void Initialize()
                     {
                         double volumeInUnits = VolumeUnit == VolumeUnit.Units ? VolumeAmount : Symbol.QuantityToVolumeInUnits(VolumeAmount);
            
                         double normalizedVolume = Symbol.NormalizeVolumeInUnits(volumeInUnits, RoundingMode);
            
                         Print(normalizedVolume);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
            
                 public enum VolumeUnit
                 {
                     Units,
                     Lots
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.RoundingMode.ToNearest">
            <summary>
            Round value to the nearest tradable volume.
            </summary>
            <example>
            <code>
            var volume = Symbol.NormalizeVolume(calculatedVolume, RoundingMode.ToNearest);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.RoundingMode.Down">
            <summary>
            Round value down to tradable volume.
            </summary>
            <example>
            <code>
            var volume = Symbol.NormalizeVolume(calculatedVolume, RoundingMode.Down);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.RoundingMode.Up">
            <summary>
            Round value up to tradable volume.
            </summary>
            <example>
            <code>
            var volume = Symbol.NormalizeVolume(calculatedVolume, RoundingMode.Up);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.RunningMode">
             <summary>
             Defines if a cBot is running in real time, in the silent backtesting mode, in the visual backtesting mode, or in the optimization mode.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo.Robots
             {
                 // This sample shows how to use the RunningMode property of your robot
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class RunningModeSample : Robot
                 {
                     protected override void OnStart()
                     {
                         switch (RunningMode)
                         {
                             case RunningMode.RealTime:
                                 // If the robot is running on real time market condition
                                 break;
            
                             case RunningMode.SilentBacktesting:
                                 // If the robot is running on backtest and the visual mode is off
                                 break;
            
                             case RunningMode.VisualBacktesting:
                                 // If the robot is running on backtest and the visual mode is on
                                 break;
            
                             case RunningMode.Optimization:
                                 // If the robot is running on optimizer
                                 break;
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.RunningMode.RealTime">
            <summary>
            The cBot is running in real time.
            </summary>
        </member>
        <member name="F:cAlgo.API.RunningMode.SilentBacktesting">
            <summary>
            The cBot is running in the silent backtesting mode.
            </summary>
        </member>
        <member name="F:cAlgo.API.RunningMode.VisualBacktesting">
            <summary>
            The cBot is running in the visual backtesting mode.
            </summary>
        </member>
        <member name="F:cAlgo.API.RunningMode.Optimization">
            <summary>
            The cBot is running in the optimization mode.
            </summary>
        </member>
        <member name="T:cAlgo.API.SymbolInfo">
            <summary>
            Represents the Symbol interface.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.Id">
            <summary>
            Gets the current symbol ID.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.Name">
            <summary>
            Gets the current symbol name.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.Description">
            <summary>
            Gets the current symbol description.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.LotSize">
            <summary>
            Gets the lot size.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.TickValue">
            <summary>
            Gets the tick value.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.TickSize">
            <summary>
            Gets the tick size.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.PipValue">
            <summary>
            Gets the pip value.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.PipSize">
            <summary>
            Gets the pip size.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.Digits">
            <summary>
            Gets the symbol digits.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.VolumeInUnitsStep">
            <summary>
            Gets the step volume in units.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.VolumeInUnitsMax">
            <summary>
            Gets the maximum units value.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.VolumeInUnitsMin">
            <summary>
            Gets the minimum units value.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.DynamicLeverage">
            <summary>
            Gets the symbol dynamic leverege.
            </summary>
        </member>
        <member name="P:cAlgo.API.SymbolInfo.MarketHours">
            <summary>
            Gets the symbol market hours.
            </summary>
        </member>
        <member name="M:cAlgo.API.SymbolInfo.NormalizeVolumeInUnits(System.Double)">
            <summary>
            Rounds the volume to the amount suitable for a trade.
            </summary>
            <param name="volume"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.SymbolInfo.NormalizeVolumeInUnits(System.Double,cAlgo.API.RoundingMode)">
            <summary>
            Rounds the volume to the amount suitable for a trade.
            </summary>
            <param name="volume"></param>
            <param name="roundingMode"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.SymbolInfo.QuantityToVolumeInUnits(System.Double)">
            <summary>
            Converts Quantity (in lots) to Volume in units of base currency.
            </summary>
            <param name="quantity"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.SymbolInfo.VolumeInUnitsToQuantity(System.Double)">
            <summary>
            Converts Volume in units of base currency to Quantity (in lots).
            </summary>
            <param name="volume"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Symbols">
             <summary>
             Represents the list of all the symbols with the symbol names as string values.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo
             {
                 // This sample shows how to use Symbols collection to get symbols data
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class SymbolsSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         var scrollViewer = new ScrollViewer
                         {
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                             BackgroundColor = Color.Gold,
                             Opacity = 0.7,
                             HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
                             VerticalScrollBarVisibility = ScrollBarVisibility.Visible,
                             Height = 300
                         };
            
                         var grid = new Grid(Symbols.Count + 1, 2)
                         {
                             BackgroundColor = Color.Gold,
                             HorizontalAlignment = HorizontalAlignment.Center,
                             VerticalAlignment = VerticalAlignment.Center,
                         };
            
                         scrollViewer.Content = grid;
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Name",
                             Margin = 5,
                             ForegroundColor = Color.Black,
                             FontWeight = FontWeight.ExtraBold
                         }, 0, 0);
            
                         grid.AddChild(new TextBlock
                         {
                             Text = "Description",
                             Margin = 5,
                             ForegroundColor = Color.Black,
                             FontWeight = FontWeight.ExtraBold
                         }, 0, 1);
            
                         for (int iSymbol = 1; iSymbol &lt; Symbols.Count + 1; iSymbol++)
                         {
                             var symbolName = Symbols[iSymbol];
                             var symbol = Symbols.GetSymbol(symbolName);
            
                             if (!symbol.MarketHours.IsOpened()) continue;
            
                             grid.AddChild(new TextBlock
                             {
                                 Text = symbolName,
                                 Margin = 5,
                                 ForegroundColor = Color.Black,
                                 FontWeight = FontWeight.ExtraBold
                             }, iSymbol, 0);
            
                             grid.AddChild(new Button
                             {
                                 Text = symbol.Description,
                                 Margin = 5,
                                 ForegroundColor = Color.Black,
                                 FontWeight = FontWeight.ExtraBold
                             }, iSymbol, 1);
                         }
            
                         Chart.AddControl(scrollViewer);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Symbols.Item(System.Int32)">
            <summary>
            Gets the desired symbol.
            </summary>
            <param name="index"></param>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:cAlgo.API.Symbols.Count">
            <summary>
            Gets the total number of the symbols in the list.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Symbols.GetSymbolInfo(System.String)">
            <summary>
            Gets the symbol info with no realtime changes.
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Symbols.GetSymbolInfos(System.String[])">
            <summary>
            Gets the required symbol info like symbol IDs, Symbol Names, etc.
            </summary>
            <param name="symbolNames"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Symbols.GetSymbol(System.String)">
            <summary>
            Gets the specific symbol.
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Symbols.GetSymbols(System.String[])">
            <summary>
            Get multiple symbols at once.
            </summary>
            <param name="symbolNames"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:cAlgo.API.Symbols.Exists(System.String)">
            <summary>
            Defines if the specific symbol name exists in the list.
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:cAlgo.API.Timer">
             <summary>
             Schedules execution of virtual OnTimer method with specified interval.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using System;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the API Timer, this timer works both on live and back test
                 // The timer is available for both cBots and indicators
                 // Every cBot/indicator can have one single timer
                 // You can also use the .NET timers if you want to but those will not work properly on back test
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TimerSample : Robot
                 {
                     protected override void OnStart()
                     {
                         // You can start the cBot timer by calling Timer.Start method, for interval you can pass a time span or seconds
                         Timer.Start(TimeSpan.FromSeconds(1));
                         // You can also use the TimerTick event instead of OnTimer method
                         Timer.TimerTick += Timer_TimerTick;
            
                         // To stop the timer you can call Timer.Stop method anywhere on your cBot/indicator
                         Timer.Stop();
                     }
            
                     private void Timer_TimerTick()
                     {
                         // Put your logic for timer elapsed event here
                     }
            
                     protected override void OnTimer()
                     {
                         // Put your logic for timer elapsed event here
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.Timer.Start(System.TimeSpan)">
             <summary>
             Starts the Timer
             </summary>
             <param name="interval">Interval as a TimeSpan</param>
             <example>
             protected override void OnStart()
             {
                 Timer.Start(TimeSpan.FromMilliseconds(1000));
             }
            
             protected override void OnTimer()
             {
                 ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
             }
             </example>
        </member>
        <member name="M:cAlgo.API.Timer.Start(System.Int32)">
             <summary>
             Starts the Timer
             </summary>
             <param name="intervalInSeconds">Interval in seconds</param>
             <example>
             protected override void OnStart()
             {
                 Timer.Start(1);
             }
            
             protected override void OnTimer()
             {
                 ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
             }
             </example>
        </member>
        <member name="M:cAlgo.API.Timer.Stop">
            <summary>
            Stops the Timer
            </summary>
        </member>
        <member name="E:cAlgo.API.Timer.TimerTick">
             <summary>
             Occurs when the interval elapses
             </summary>
             <example>
             <code>
             protected override void OnStart()
             {
                 Timer.TimerTick += OnTimerTick
                 Timer.Start(1);//start timer with 1 second interval
             }
            
             private void OnTimerTick()
             {
                 ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Timer.Interval">
            <summary>
            Gets the interval of timer. Returns -1 millisecond if the timer is stopped
            </summary>
        </member>
        <member name="T:cAlgo.API.TimeSeries">
             <summary>
             A series of values that represent time like MarketSeries.OpenTime
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using cAlgo.API.Internals;
            
             namespace cAlgo
             {
                 // This sample indicator shows how to use Bars OpenTimes Time Series
                 [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TimeSeriesSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         // Every Bars object has a time series which is the open times of bars
                         var timeSeries = Bars.OpenTimes;
            
                         Print("Count: ", timeSeries.Count);
            
                         // You can get another bars index by using TimeSeries GetIndexByTime/GetIndexByExactTime methods
            
                         var dailyBars = MarketData.GetBars(TimeFrame.Daily);
            
                         var dailyBarsIndex = timeSeries.GetIndexByTime(dailyBars.OpenTimes.LastValue);
            
                         var open = Bars.OpenPrices[dailyBarsIndex];
            
                         Print("Daily Bars Index: ", dailyBarsIndex, " | Open: ", open);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.TimeSeries.Item(System.Int32)">
            <summary>
            Returns the DateTime value at the specified index.
            </summary>
            <param name="index">The index of the returned value within the series.</param>
            <returns></returns>
        </member>
        <member name="P:cAlgo.API.TimeSeries.LastValue">
            <summary>
            Gets the last value of this time series.
            </summary>
            <example>
            <code>
            DateTime openTime = MarketSeries.OpenTime.LastValue;
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.TimeSeries.Last(System.Int32)">
            <summary>
            Access a value in the data series certain number of bars ago.
            </summary>
            <param name="index">Number of bars ago</param>
            <example>
            <code>
            DateTime openTime = MarketSeries.OpenTime.Last[5];
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TimeSeries.Count">
            <summary>
            Gets the number of elements contained in the series.
            </summary>
        </member>
        <member name="M:cAlgo.API.TimeSeries.GetIndexByExactTime(System.DateTime)">
            <summary>
            Find the index in the different time frame series.
            </summary>
            <param name="dateTime">The open time of the bar at this index</param>
            <returns></returns>
            <example>
            <code>
            var indexSeries2 = indexSeries2.OpenTime.GetIndexByExactTime(MarketSeries.OpenTime.LastValue);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.TimeSeries.GetIndexByTime(System.DateTime)">
            <summary>
            Find the index in the different time frame series.
            </summary>
            <param name="dateTime">The open time of the bar at this index</param>
            <returns></returns>
            <example>
            <code>
            var indexSeries2 = indexSeries2.OpenTime.GetIndexByTime(MarketSeries.OpenTime.LastValue);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.TradeType">
             <summary>
             The direction of a trade order.
             </summary>
             <remarks>
             Indicates the trade direction, whether it is a Buy or a Sell trade.
             </remarks>
             <example>
             <code>
             ExecuteMarketOrder(TradeType.Buy, Symbol, 20000);
             </code>
             </example>
             <example>
             <code>
             Position position =  Positions.Find("myLabel", Symbol, TradeType.Sell);
             </code>
             </example>
             <example>
             <code>
             PlaceLimitOrder(TradeType.Buy, Symbol, 10000, Symbol.Bid);
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use the TradeType
                 // TradeType is used to set an order trade side or direction
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TradeTypeSample : Robot
                 {
                     [Parameter("Trade Type", DefaultValue = TradeType.Buy)]
                     public TradeType TradeType { get; set; }
            
                     protected override void OnStart()
                     {
                         ExecuteMarketOrder(TradeType, SymbolName, Symbol.VolumeInUnitsMin);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.TradeType.Buy">
            <summary>
            Represents a Buy order.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Buy, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, Symbol.Bid);
            </code>
            </example>
        </member>
        <member name="F:cAlgo.API.TradeType.Sell">
            <summary>
            Represents a Sell order.
            </summary>
            <example>
            <code>
            ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
            </code>
            </example>
            <example>
            <code>
            var result = PlaceLimitOrder(TradeType.Sell, Symbol, 10000, Symbol.Ask);
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.StopTriggerMethod">
             <summary>
             The trigger side for the Stop Orders.
             </summary>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo.Robots
             {
                 // This sample shows how to use StopTriggerMethod of orders to control their execution price
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class StopTriggerMethodSample : Robot
                 {
                     [Parameter("Stop Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
                     public StopTriggerMethod StopTriggerMethod { get; set; }
            
                     protected override void OnStart()
                     {
                         // Setting a new position StopTriggerMethod
                         ExecuteMarketOrder(TradeType.Buy, SymbolName, Symbol.VolumeInUnitsMin, "StopTriggerMethod Test", 10, 10, string.Empty, false, StopTriggerMethod);
            
                         // Setting a new stop order StopTriggerMethod for both order and its stop loss
                         var target = Symbol.Bid + (100 * Symbol.PipSize);
            
                         PlaceStopOrder(TradeType.Buy, SymbolName, Symbol.VolumeInUnitsMin, target, "StopTriggerMethod Test", 10, 10, null, string.Empty, false, StopTriggerMethod, StopTriggerMethod);
            
                         // Changing open positions StopTriggerMethod
                         foreach (var position in Positions)
                         {
                             if (!position.StopLoss.HasValue) continue;
            
                             ModifyPosition(position, position.StopLoss, position.TakeProfit, position.HasTrailingStop, StopTriggerMethod);
                         }
            
                         // Changing open pending orders (Stop and StopLimit) StopTriggerMethod
                         foreach (var order in PendingOrders)
                         {
                             if (!order.StopLossPips.HasValue || order.OrderType == PendingOrderType.Limit) continue;
            
                             ModifyPendingOrder(order, order.TargetPrice, order.StopLossPips, order.TakeProfitPips, order.ExpirationTime, order.VolumeInUnits, order.HasTrailingStop, StopTriggerMethod, StopTriggerMethod);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:cAlgo.API.StopTriggerMethod.Trade">
            <summary>
            Trade method uses default trigger behavior for Stop orders.
            Buy order and Stop Loss for Sell position will be triggered when Ask >= order price.
            Sell order and Stop Loss for Buy position will be triggered when Bid &lt;= order price.
            </summary>
        </member>
        <member name="F:cAlgo.API.StopTriggerMethod.Opposite">
            <summary>
            Opposite method uses opposite price for order triggering.
            Buy order and Stop Loss for Sell position will be triggered when Bid >= order price.
            Sell order and Stop Loss for Buy position will be triggered when Ask &lt;= order price.
            </summary>
        </member>
        <member name="F:cAlgo.API.StopTriggerMethod.DoubleTrade">
            <summary>
            Uses default prices for order triggering, but waits for
            additional  confirmation - two consecutive prices should meet criteria to trigger order.
            Buy order and Stop Loss for Sell position will be triggered when two consecutive Ask prices >= order price.
            Sell order and Stop Loss for Buy position will be triggered when two consecutive Bid prices &lt;= order price.
            </summary>
        </member>
        <member name="F:cAlgo.API.StopTriggerMethod.DoubleOpposite">
            <summary>
            Uses opposite prices for order triggering, and waits for
            additional confirmation - two consecutive prices should meet criteria to trigger order.
            Buy order and Stop Loss for Sell position will be triggered when two consecutive Bid prices >= order price.
            Sell order and Stop Loss for Buy position will be triggered when two consecutive Ask prices &lt;= order price.
            </summary>
        </member>
        <member name="T:cAlgo.API.TradeOperation">
             <summary>
             Provides access to the properties describing an asynchronous trade operation.
             </summary>
             <example>
             <code>
             TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "asynchronous");
             if (operation.IsExecuting)
             {
                 Print("Trade is executing");
             }
             else
             {
                 if (operation.TradeResult.IsSuccessful)
                     Print("Trade executed");
             }
             </code>
             </example>
             <example>
             <code>
             protected override void OnStart()
             {
                 Positions.Opened += PositionsOnOpened;
            
                 TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "asynchronous");
                 ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "synchronous", 10, 10);
            
                 if (operation.IsExecuting)
                 {
                     Print("Trade is executing");
                 }
                 else
                 {
                     if (operation.TradeResult.IsSuccessful)
                         Print("Trade executed");
                 }
             }
            
             private void PositionsOnOpened(PositionOpenedEventArgs args)
             {
                 var pos = args.Position;
                 Print("Position {0} opened at {1}", pos.Label, pos.EntryPrice);
             }
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to use TradeOperation to monitor an async order execution/placement operation
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TradeOperationSample : Robot
                 {
                     protected override void OnStart()
                     {
                         var tradeOperation = ExecuteMarketOrderAsync(TradeType.Buy, SymbolName, Symbol.VolumeInUnitsMin, OnTradeResult);
            
                         if (tradeOperation.IsExecuting)
                         {
                             Print("Executing");
                         }
                         else
                         {
                             Print("Completed");
                         }
                     }
            
                     private void OnTradeResult(TradeResult obj)
                     {
                         Print("Was Trade Operation Successful: ", obj.IsSuccessful);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:cAlgo.API.TradeOperation.#ctor(System.String,cAlgo.API.TradeResult)">
            <summary>
            Represents the trade operation description and the result of the operation.
            </summary>
            <param name="shortDescription"></param>
            <param name="tradeResult"></param>
        </member>
        <member name="P:cAlgo.API.TradeOperation.IsExecuting">
            <summary>
            True if a trade operation is being executed, false if it completed
            </summary>
            <example>
            <code>
            TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 20000, "myLabel");
            // ...
            if (!operation.IsExecuting)
            {
                Print("Trade executed");
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeOperation.TradeResult">
            <summary>
            The result of a trade operation
            </summary>
            <example>
            <code>
            TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 20000, "myLabel");
            // ...
            if (!operation.IsExecuting &amp;&amp; operation.TradeResult.IsSuccessful)
            {
                Print("Trade {0} executed", operation.TradeResult.Position.Label);
            }
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeOperation.ShortDescription">
            <summary>
            The trade operation short description.
            </summary>
        </member>
        <member name="M:cAlgo.API.TradeOperation.SetResult(cAlgo.API.TradeResult)">
             <summary>
            
             </summary>
             <param name="tradeResult"></param>
        </member>
        <member name="M:cAlgo.API.TradeOperation.ToString">
            <summary>
            The description of a trade operation
            </summary>
            <returns>Operation description</returns>
            <example>
            <code>
            TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "asynchronous");
            Print(operation.ToString());
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.TradeResult">
             <summary>
             The result of a trade operation.
             </summary>
             <example>
             <code>
             TradeResult result = ExecuteMarketOrder(TradeType.Sell, Symbol, 20000);
             if (result.IsSuccessful)
                 Print("Sell at {0}", result.Position.EntryPrice);
             </code>
             </example>
             <example>
             <code>
             using cAlgo.API;
            
             namespace cAlgo.Robots
             {
                 // This sample cBot shows how to get a trade operation result
                 [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class TradeResultSample : Robot
                 {
                     protected override void OnStart()
                     {
                         var tradeResult = ExecuteMarketOrder(TradeType.Buy, SymbolName, Symbol.VolumeInUnitsMin);
            
                         if (tradeResult.IsSuccessful)
                         {
                             Print("Market order execution was successful");
            
                             var position = tradeResult.Position;
            
                             Print("A new position opend with ID ", position.Id);
                         }
                         else
                         {
                             Print("Market order execution was not successful");
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.TradeResult.IsSuccessful">
            <summary>
            True if the trade is successful, false if there is an error.
            </summary>
            <example>
            <code>
            TradeResult result = ExecuteMarketOrder(TradeType.Buy, Symbol, 20000);
            if (result.IsSuccessful)
                Print("Buy at {0}", result.Position.EntryPrice);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeResult.Error">
            <summary>
            The error code of an unsuccessful trade.
            </summary>
            <example>
            <code>
            var mySymbol = MarketData.GetSymbol("EURUSD");
            TradeResult result = ExecuteMarketOrder(TradeType.Sell, mySymbol, 1);
            if(!result.IsSuccessful)
                Print("Error: {0}", result.Error);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeResult.Position">
            <summary>
            The resulting position of a trade request.
            </summary>
            <example>
            <code>
            TradeResult result = ExecuteMarketOrder(TradeType.Sell, Symbol, 50000);
            if (result.IsSuccessful)
                Print("Sell at {0}", result.Position.EntryPrice);
            </code>
            </example>
        </member>
        <member name="P:cAlgo.API.TradeResult.PendingOrder">
            <summary>
            The resulting pending order of a trade request.
            </summary>
            <example>
            <code>
            TradeResult result = PlaceLimitOrder(TradeType.Sell, Symbol,
                                50000, Symbol.Ask, "myLabel", 10, null);
            if(result.IsSuccessful)
                Print("Order placed. SL: {0}", result.PendingOrder.StopLoss);
            </code>
            </example>
        </member>
        <member name="M:cAlgo.API.TradeResult.ToString">
            <summary>
            The description of a trade result.
            </summary>
            <returns>Result description.</returns>
            <example>
            <code>
            TradeResult result = PlaceLimitOrder(TradeType.Sell, Symbol, 50000, Symbol.Ask);
            if (result.IsSuccessful)
                Print(result.ToString());
            </code>
            </example>
        </member>
        <member name="T:cAlgo.API.VerticalAlignment">
            <summary>
            Describes vertical position related to an anchor point or a parent element.
            </summary>
            <seealso cref="T:cAlgo.API.ChartVerticalLine"/>
        </member>
        <member name="F:cAlgo.API.VerticalAlignment.Center">
            <summary>
            Center vertical alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.VerticalAlignment.Top">
            <summary>
            Top vertical alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.VerticalAlignment.Bottom">
            <summary>
            Bottom vertical alignment.
            </summary>
        </member>
        <member name="F:cAlgo.API.VerticalAlignment.Stretch">
            <summary>
            Stretch vertical alignment.
            </summary>
        </member>
        <member name="T:cAlgo.API.Watchlist">
             <summary>
             Represents the Watchlist interface.
             </summary>
             <example>
             <code>
             using cAlgo.API;
             using System.Linq;
            
             namespace cAlgo
             {
                 // This sample shows how to use Automate API to monitor user platform Watchlists
                 [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
                 public class WatchlistSample : Indicator
                 {
                     protected override void Initialize()
                     {
                         Watchlists.Added += Watchlists_Added;
                         Watchlists.Removed += Watchlists_Removed;
                         Watchlists.WatchlistRenamed += Watchlists_WatchlistRenamed;
                         Watchlists.WatchlistSymbolAdded += Watchlists_WatchlistSymbolAdded;
                         Watchlists.WatchlistSymbolRemoved += Watchlists_WatchlistSymbolRemoved;
            
                         Print("Number of Watchlists: ", Watchlists.Count());
            
                         foreach (var watchlist in Watchlists)
                         {
                             Print("Watchlist Name: {0} | Symbols #: {1}", watchlist.Name, watchlist.SymbolNames.Count);
                         }
                     }
            
                     private void Watchlists_WatchlistSymbolRemoved(WatchlistSymbolRemovedEventArgs obj)
                     {
                         Print("Symbol {0} Removed From Watchlist {1}", obj.SymbolName, obj.Watchlist.Name);
                     }
            
                     private void Watchlists_WatchlistSymbolAdded(WatchlistSymbolAddedEventArgs obj)
                     {
                         Print("Symbol {0} Added to Watchlist {1}", obj.SymbolName, obj.Watchlist.Name);
                     }
            
                     private void Watchlists_WatchlistRenamed(WatchlistRenamedEventArgs obj)
                     {
                         Print("Renamed Watchlist {0}", obj.Watchlist.Name);
                     }
            
                     private void Watchlists_Removed(WatchlistRemovedEventArgs obj)
                     {
                         Print("Removed Watchlist {0}", obj.Watchlist.Name);
                     }
            
                     private void Watchlists_Added(WatchlistAddedEventArgs obj)
                     {
                         Print("Added Watchlist {0}", obj.Watchlist.Name);
                     }
            
                     public override void Calculate(int index)
                     {
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:cAlgo.API.Watchlist.Name">
            <summary>
            Gets the watchlist name.
            </summary>
        </member>
        <member name="P:cAlgo.API.Watchlist.SymbolNames">
            <summary>
            Gets the names of the symbols in the watchlist.
            </summary>
        </member>
        <member name="T:cAlgo.API.Watchlists">
            <summary>
            Represents the Watchlists interface - allows getting all the watchlists and symbols in them, and receiving the relevant events.
            </summary>
            <seealso cref="T:cAlgo.API.Watchlist"/>
        </member>
        <member name="P:cAlgo.API.Watchlists.Item(System.Int32)">
            <summary>
            Gets the desired Watchlist.
            </summary>
            <param name="index"></param>
        </member>
        <member name="E:cAlgo.API.Watchlists.Added">
            <summary>
            Occurs when a new watchlist is added.
            </summary>
        </member>
        <member name="E:cAlgo.API.Watchlists.Removed">
            <summary>
            Occurs when a watchlist is removed.
            </summary>
        </member>
        <member name="E:cAlgo.API.Watchlists.WatchlistSymbolAdded">
            <summary>
            Occurs when a new symbol is added to the watchlist.
            </summary>
        </member>
        <member name="E:cAlgo.API.Watchlists.WatchlistSymbolRemoved">
            <summary>
            Occurs when a symbol is removed from the watchlist.
            </summary>
        </member>
        <member name="E:cAlgo.API.Watchlists.WatchlistRenamed">
            <summary>
            Occurs when the name of the watchlist is changed.
            </summary>
        </member>
    </members>
</doc>
